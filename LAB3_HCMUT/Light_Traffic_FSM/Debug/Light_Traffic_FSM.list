
Light_Traffic_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b34  08002b34  00003b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  00004048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b58  08002b58  00004048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b58  08002b58  00004048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00003b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08002b60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000048  08002ba8  00004048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002ba8  00004134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a57  00000000  00000000  00004071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  0000cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0000e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000839  00000000  00000000  0000f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017972  00000000  00000000  0000fba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e063  00000000  00000000  00027513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ae6  00000000  00000000  00035576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029bc  00000000  00000000  000ba0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000bca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b1c 	.word	0x08002b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002b1c 	.word	0x08002b1c

0800014c <count_second_by_timer7SEG_auto>:
 *      Author: Lenovo
 */

#include "fsm_automatic.h"

void count_second_by_timer7SEG_auto() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	count_for_led7seg++;
 8000150:	4b0c      	ldr	r3, [pc, #48]	@ (8000184 <count_second_by_timer7SEG_auto+0x38>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a0b      	ldr	r2, [pc, #44]	@ (8000184 <count_second_by_timer7SEG_auto+0x38>)
 8000158:	6013      	str	r3, [r2, #0]
	if (count_for_led7seg >= 4) {
 800015a:	4b0a      	ldr	r3, [pc, #40]	@ (8000184 <count_second_by_timer7SEG_auto+0x38>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b03      	cmp	r3, #3
 8000160:	dd0c      	ble.n	800017c <count_second_by_timer7SEG_auto+0x30>
		light_countdown_X--;
 8000162:	4b09      	ldr	r3, [pc, #36]	@ (8000188 <count_second_by_timer7SEG_auto+0x3c>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	3b01      	subs	r3, #1
 8000168:	4a07      	ldr	r2, [pc, #28]	@ (8000188 <count_second_by_timer7SEG_auto+0x3c>)
 800016a:	6013      	str	r3, [r2, #0]
		light_countdown_Y--;
 800016c:	4b07      	ldr	r3, [pc, #28]	@ (800018c <count_second_by_timer7SEG_auto+0x40>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	3b01      	subs	r3, #1
 8000172:	4a06      	ldr	r2, [pc, #24]	@ (800018c <count_second_by_timer7SEG_auto+0x40>)
 8000174:	6013      	str	r3, [r2, #0]
		count_for_led7seg = 0;
 8000176:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <count_second_by_timer7SEG_auto+0x38>)
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
	}
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	20000088 	.word	0x20000088
 8000188:	20000080 	.word	0x20000080
 800018c:	20000084 	.word	0x20000084

08000190 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	switch (status) {
 8000194:	4b99      	ldr	r3, [pc, #612]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b04      	cmp	r3, #4
 800019a:	f200 8123 	bhi.w	80003e4 <fsm_automatic_run+0x254>
 800019e:	a201      	add	r2, pc, #4	@ (adr r2, 80001a4 <fsm_automatic_run+0x14>)
 80001a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a4:	080001b9 	.word	0x080001b9
 80001a8:	08000209 	.word	0x08000209
 80001ac:	0800027d 	.word	0x0800027d
 80001b0:	080002f9 	.word	0x080002f9
 80001b4:	0800036b 	.word	0x0800036b
	case INIT:

		status = AUTO_RED_GREEN;
 80001b8:	4b90      	ldr	r3, [pc, #576]	@ (80003fc <fsm_automatic_run+0x26c>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]

		//Assign edited value for duration
		red_edit = red_duration;
 80001be:	4b90      	ldr	r3, [pc, #576]	@ (8000400 <fsm_automatic_run+0x270>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a90      	ldr	r2, [pc, #576]	@ (8000404 <fsm_automatic_run+0x274>)
 80001c4:	6013      	str	r3, [r2, #0]
		yellow_edit = yellow_duration;
 80001c6:	4b90      	ldr	r3, [pc, #576]	@ (8000408 <fsm_automatic_run+0x278>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a90      	ldr	r2, [pc, #576]	@ (800040c <fsm_automatic_run+0x27c>)
 80001cc:	6013      	str	r3, [r2, #0]
		green_edit = green_duration;
 80001ce:	4b90      	ldr	r3, [pc, #576]	@ (8000410 <fsm_automatic_run+0x280>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a90      	ldr	r2, [pc, #576]	@ (8000414 <fsm_automatic_run+0x284>)
 80001d4:	6013      	str	r3, [r2, #0]


		light_countdown_X = red_duration;
 80001d6:	4b8a      	ldr	r3, [pc, #552]	@ (8000400 <fsm_automatic_run+0x270>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a8f      	ldr	r2, [pc, #572]	@ (8000418 <fsm_automatic_run+0x288>)
 80001dc:	6013      	str	r3, [r2, #0]
		light_countdown_Y = green_duration;
 80001de:	4b8c      	ldr	r3, [pc, #560]	@ (8000410 <fsm_automatic_run+0x280>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a8e      	ldr	r2, [pc, #568]	@ (800041c <fsm_automatic_run+0x28c>)
 80001e4:	6013      	str	r3, [r2, #0]

		display7SEG_X(light_countdown_X);
 80001e6:	4b8c      	ldr	r3, [pc, #560]	@ (8000418 <fsm_automatic_run+0x288>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fdbc 	bl	8000d68 <display7SEG_X>
		display7SEG_Y(light_countdown_Y);
 80001f0:	4b8a      	ldr	r3, [pc, #552]	@ (800041c <fsm_automatic_run+0x28c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fdeb 	bl	8000dd0 <display7SEG_Y>
		setTimer(LED7SEG, led7seg_duration);
 80001fa:	4b89      	ldr	r3, [pc, #548]	@ (8000420 <fsm_automatic_run+0x290>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4619      	mov	r1, r3
 8000200:	2007      	movs	r0, #7
 8000202:	f001 f849 	bl	8001298 <setTimer>
		break;
 8000206:	e0f6      	b.n	80003f6 <fsm_automatic_run+0x266>
	case AUTO_RED_GREEN:
		red_light_X();
 8000208:	f000 fe70 	bl	8000eec <red_light_X>
		green_light_Y();
 800020c:	f000 fee6 	bl	8000fdc <green_light_Y>

		if (flag_timer[LED7SEG]) {
 8000210:	4b84      	ldr	r3, [pc, #528]	@ (8000424 <fsm_automatic_run+0x294>)
 8000212:	69db      	ldr	r3, [r3, #28]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d01c      	beq.n	8000252 <fsm_automatic_run+0xc2>
			count_second_by_timer7SEG_auto(); // only 4 loop * 250ms = 1s, this function implement
 8000218:	f7ff ff98 	bl	800014c <count_second_by_timer7SEG_auto>
			if (light_countdown_Y == 0) {
 800021c:	4b7f      	ldr	r3, [pc, #508]	@ (800041c <fsm_automatic_run+0x28c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d106      	bne.n	8000232 <fsm_automatic_run+0xa2>
				status = AUTO_RED_YELLOW;
 8000224:	4b75      	ldr	r3, [pc, #468]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000226:	2202      	movs	r2, #2
 8000228:	601a      	str	r2, [r3, #0]

				light_countdown_Y = yellow_duration;
 800022a:	4b77      	ldr	r3, [pc, #476]	@ (8000408 <fsm_automatic_run+0x278>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a7b      	ldr	r2, [pc, #492]	@ (800041c <fsm_automatic_run+0x28c>)
 8000230:	6013      	str	r3, [r2, #0]
			}

			display7SEG_X(light_countdown_X);
 8000232:	4b79      	ldr	r3, [pc, #484]	@ (8000418 <fsm_automatic_run+0x288>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fd96 	bl	8000d68 <display7SEG_X>
			display7SEG_Y(light_countdown_Y);
 800023c:	4b77      	ldr	r3, [pc, #476]	@ (800041c <fsm_automatic_run+0x28c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fdc5 	bl	8000dd0 <display7SEG_Y>
			setTimer(LED7SEG, led7seg_duration);
 8000246:	4b76      	ldr	r3, [pc, #472]	@ (8000420 <fsm_automatic_run+0x290>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4619      	mov	r1, r3
 800024c:	2007      	movs	r0, #7
 800024e:	f001 f823 	bl	8001298 <setTimer>
		}

		if (is_button_pressed(0)) {
 8000252:	2000      	movs	r0, #0
 8000254:	f000 fb48 	bl	80008e8 <is_button_pressed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	f000 80c4 	beq.w	80003e8 <fsm_automatic_run+0x258>
			status = MAN_RED;
 8000260:	4b66      	ldr	r3, [pc, #408]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000262:	220b      	movs	r2, #11
 8000264:	601a      	str	r2, [r3, #0]

			clear_all_light();
 8000266:	f000 fe17 	bl	8000e98 <clear_all_light>
			clearAll();
 800026a:	f000 fce7 	bl	8000c3c <clearAll>

			setTimer(LED7SEG, led7seg_duration);
 800026e:	4b6c      	ldr	r3, [pc, #432]	@ (8000420 <fsm_automatic_run+0x290>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4619      	mov	r1, r3
 8000274:	2007      	movs	r0, #7
 8000276:	f001 f80f 	bl	8001298 <setTimer>
		}

		break;
 800027a:	e0b5      	b.n	80003e8 <fsm_automatic_run+0x258>
	case AUTO_RED_YELLOW:
		red_light_X();
 800027c:	f000 fe36 	bl	8000eec <red_light_X>
		yellow_light_Y();
 8000280:	f000 fe7c 	bl	8000f7c <yellow_light_Y>

		if (flag_timer[LED7SEG]) {
 8000284:	4b67      	ldr	r3, [pc, #412]	@ (8000424 <fsm_automatic_run+0x294>)
 8000286:	69db      	ldr	r3, [r3, #28]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d020      	beq.n	80002ce <fsm_automatic_run+0x13e>
			count_second_by_timer7SEG_auto(); // only 4 loop * 250ms = 1s, this function implement
 800028c:	f7ff ff5e 	bl	800014c <count_second_by_timer7SEG_auto>
			if (light_countdown_X == 0) {
 8000290:	4b61      	ldr	r3, [pc, #388]	@ (8000418 <fsm_automatic_run+0x288>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10a      	bne.n	80002ae <fsm_automatic_run+0x11e>
				status = AUTO_GREEN_RED;
 8000298:	4b58      	ldr	r3, [pc, #352]	@ (80003fc <fsm_automatic_run+0x26c>)
 800029a:	2203      	movs	r2, #3
 800029c:	601a      	str	r2, [r3, #0]

				light_countdown_X = green_duration;
 800029e:	4b5c      	ldr	r3, [pc, #368]	@ (8000410 <fsm_automatic_run+0x280>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a5d      	ldr	r2, [pc, #372]	@ (8000418 <fsm_automatic_run+0x288>)
 80002a4:	6013      	str	r3, [r2, #0]
				light_countdown_Y = red_duration;
 80002a6:	4b56      	ldr	r3, [pc, #344]	@ (8000400 <fsm_automatic_run+0x270>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a5c      	ldr	r2, [pc, #368]	@ (800041c <fsm_automatic_run+0x28c>)
 80002ac:	6013      	str	r3, [r2, #0]
			}

			display7SEG_X(light_countdown_X);
 80002ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000418 <fsm_automatic_run+0x288>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fd58 	bl	8000d68 <display7SEG_X>
			display7SEG_Y(light_countdown_Y);
 80002b8:	4b58      	ldr	r3, [pc, #352]	@ (800041c <fsm_automatic_run+0x28c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fd87 	bl	8000dd0 <display7SEG_Y>
			setTimer(LED7SEG, led7seg_duration);
 80002c2:	4b57      	ldr	r3, [pc, #348]	@ (8000420 <fsm_automatic_run+0x290>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	2007      	movs	r0, #7
 80002ca:	f000 ffe5 	bl	8001298 <setTimer>
		}


		if (is_button_pressed(0)) {
 80002ce:	2000      	movs	r0, #0
 80002d0:	f000 fb0a 	bl	80008e8 <is_button_pressed>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	f000 8088 	beq.w	80003ec <fsm_automatic_run+0x25c>
			status = MAN_RED;
 80002dc:	4b47      	ldr	r3, [pc, #284]	@ (80003fc <fsm_automatic_run+0x26c>)
 80002de:	220b      	movs	r2, #11
 80002e0:	601a      	str	r2, [r3, #0]

			clear_all_light();
 80002e2:	f000 fdd9 	bl	8000e98 <clear_all_light>
			clearAll();
 80002e6:	f000 fca9 	bl	8000c3c <clearAll>

			setTimer(LED7SEG, led7seg_duration);
 80002ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000420 <fsm_automatic_run+0x290>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	2007      	movs	r0, #7
 80002f2:	f000 ffd1 	bl	8001298 <setTimer>
		}

		break;
 80002f6:	e079      	b.n	80003ec <fsm_automatic_run+0x25c>
	case AUTO_GREEN_RED:
		green_light_X();
 80002f8:	f000 fe58 	bl	8000fac <green_light_X>
		red_light_Y();
 80002fc:	f000 fe0e 	bl	8000f1c <red_light_Y>

		if (flag_timer[LED7SEG]) {
 8000300:	4b48      	ldr	r3, [pc, #288]	@ (8000424 <fsm_automatic_run+0x294>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d01c      	beq.n	8000342 <fsm_automatic_run+0x1b2>
			count_second_by_timer7SEG_auto(); // only 4 loop * 250ms = 1s, this function implement
 8000308:	f7ff ff20 	bl	800014c <count_second_by_timer7SEG_auto>

			if (light_countdown_X == 0) {
 800030c:	4b42      	ldr	r3, [pc, #264]	@ (8000418 <fsm_automatic_run+0x288>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d106      	bne.n	8000322 <fsm_automatic_run+0x192>
				status = AUTO_YELLOW_RED;
 8000314:	4b39      	ldr	r3, [pc, #228]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000316:	2204      	movs	r2, #4
 8000318:	601a      	str	r2, [r3, #0]

				light_countdown_X = yellow_duration;
 800031a:	4b3b      	ldr	r3, [pc, #236]	@ (8000408 <fsm_automatic_run+0x278>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a3e      	ldr	r2, [pc, #248]	@ (8000418 <fsm_automatic_run+0x288>)
 8000320:	6013      	str	r3, [r2, #0]
			}

			display7SEG_X(light_countdown_X);
 8000322:	4b3d      	ldr	r3, [pc, #244]	@ (8000418 <fsm_automatic_run+0x288>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fd1e 	bl	8000d68 <display7SEG_X>
			display7SEG_Y(light_countdown_Y);
 800032c:	4b3b      	ldr	r3, [pc, #236]	@ (800041c <fsm_automatic_run+0x28c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fd4d 	bl	8000dd0 <display7SEG_Y>
			setTimer(LED7SEG, led7seg_duration);
 8000336:	4b3a      	ldr	r3, [pc, #232]	@ (8000420 <fsm_automatic_run+0x290>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	2007      	movs	r0, #7
 800033e:	f000 ffab 	bl	8001298 <setTimer>
		}

		if (is_button_pressed(0)) {
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fad0 	bl	80008e8 <is_button_pressed>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d050      	beq.n	80003f0 <fsm_automatic_run+0x260>
			status = MAN_RED;
 800034e:	4b2b      	ldr	r3, [pc, #172]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000350:	220b      	movs	r2, #11
 8000352:	601a      	str	r2, [r3, #0]

			clear_all_light();
 8000354:	f000 fda0 	bl	8000e98 <clear_all_light>
			clearAll();
 8000358:	f000 fc70 	bl	8000c3c <clearAll>

			setTimer(LED7SEG, led7seg_duration);
 800035c:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <fsm_automatic_run+0x290>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	2007      	movs	r0, #7
 8000364:	f000 ff98 	bl	8001298 <setTimer>
		}

		break;
 8000368:	e042      	b.n	80003f0 <fsm_automatic_run+0x260>
	case AUTO_YELLOW_RED:
		yellow_light_X();
 800036a:	f000 fdef 	bl	8000f4c <yellow_light_X>
		red_light_Y();
 800036e:	f000 fdd5 	bl	8000f1c <red_light_Y>

		if (flag_timer[LED7SEG]) {
 8000372:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <fsm_automatic_run+0x294>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d020      	beq.n	80003bc <fsm_automatic_run+0x22c>
			count_second_by_timer7SEG_auto(); // only 4 loop * 250ms = 1s, this function implement
 800037a:	f7ff fee7 	bl	800014c <count_second_by_timer7SEG_auto>

			if (light_countdown_X == 0) {
 800037e:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <fsm_automatic_run+0x288>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d10a      	bne.n	800039c <fsm_automatic_run+0x20c>
				status = AUTO_RED_GREEN;
 8000386:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <fsm_automatic_run+0x26c>)
 8000388:	2201      	movs	r2, #1
 800038a:	601a      	str	r2, [r3, #0]

				light_countdown_X = red_duration;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <fsm_automatic_run+0x270>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a21      	ldr	r2, [pc, #132]	@ (8000418 <fsm_automatic_run+0x288>)
 8000392:	6013      	str	r3, [r2, #0]
				light_countdown_Y = green_duration;
 8000394:	4b1e      	ldr	r3, [pc, #120]	@ (8000410 <fsm_automatic_run+0x280>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a20      	ldr	r2, [pc, #128]	@ (800041c <fsm_automatic_run+0x28c>)
 800039a:	6013      	str	r3, [r2, #0]
			}

			display7SEG_X(light_countdown_X);
 800039c:	4b1e      	ldr	r3, [pc, #120]	@ (8000418 <fsm_automatic_run+0x288>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fce1 	bl	8000d68 <display7SEG_X>
			display7SEG_Y(light_countdown_Y);
 80003a6:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <fsm_automatic_run+0x28c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fd10 	bl	8000dd0 <display7SEG_Y>
			setTimer(LED7SEG, led7seg_duration);
 80003b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000420 <fsm_automatic_run+0x290>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	2007      	movs	r0, #7
 80003b8:	f000 ff6e 	bl	8001298 <setTimer>
		}

		if (is_button_pressed(0)) {
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fa93 	bl	80008e8 <is_button_pressed>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d015      	beq.n	80003f4 <fsm_automatic_run+0x264>
			status = MAN_RED;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <fsm_automatic_run+0x26c>)
 80003ca:	220b      	movs	r2, #11
 80003cc:	601a      	str	r2, [r3, #0]

			clear_all_light();
 80003ce:	f000 fd63 	bl	8000e98 <clear_all_light>
			clearAll();
 80003d2:	f000 fc33 	bl	8000c3c <clearAll>

			setTimer(LED7SEG, led7seg_duration);
 80003d6:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <fsm_automatic_run+0x290>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4619      	mov	r1, r3
 80003dc:	2007      	movs	r0, #7
 80003de:	f000 ff5b 	bl	8001298 <setTimer>
		}

		break;
 80003e2:	e007      	b.n	80003f4 <fsm_automatic_run+0x264>
	default:
		break;
 80003e4:	bf00      	nop
 80003e6:	e006      	b.n	80003f6 <fsm_automatic_run+0x266>
		break;
 80003e8:	bf00      	nop
 80003ea:	e004      	b.n	80003f6 <fsm_automatic_run+0x266>
		break;
 80003ec:	bf00      	nop
 80003ee:	e002      	b.n	80003f6 <fsm_automatic_run+0x266>
		break;
 80003f0:	bf00      	nop
 80003f2:	e000      	b.n	80003f6 <fsm_automatic_run+0x266>
		break;
 80003f4:	bf00      	nop
	}
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000064 	.word	0x20000064
 8000400:	20000068 	.word	0x20000068
 8000404:	20000074 	.word	0x20000074
 8000408:	20000070 	.word	0x20000070
 800040c:	20000078 	.word	0x20000078
 8000410:	2000006c 	.word	0x2000006c
 8000414:	2000007c 	.word	0x2000007c
 8000418:	20000080 	.word	0x20000080
 800041c:	20000084 	.word	0x20000084
 8000420:	20000000 	.word	0x20000000
 8000424:	200000e0 	.word	0x200000e0

08000428 <fsm_manual_run>:
 *      Author: Lenovo
 */

#include "fsm_manual.h"

void fsm_manual_run () {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	switch (status) {
 800042c:	4b56      	ldr	r3, [pc, #344]	@ (8000588 <fsm_manual_run+0x160>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0d      	cmp	r3, #13
 8000432:	d06d      	beq.n	8000510 <fsm_manual_run+0xe8>
 8000434:	2b0d      	cmp	r3, #13
 8000436:	f300 809e 	bgt.w	8000576 <fsm_manual_run+0x14e>
 800043a:	2b0b      	cmp	r3, #11
 800043c:	d002      	beq.n	8000444 <fsm_manual_run+0x1c>
 800043e:	2b0c      	cmp	r3, #12
 8000440:	d033      	beq.n	80004aa <fsm_manual_run+0x82>

			setTimer(LED7SEG, led7seg_duration);
		}
		break;
	default:
		break;
 8000442:	e098      	b.n	8000576 <fsm_manual_run+0x14e>
		check_timer_and_display_mode(2, red_duration);
 8000444:	4b51      	ldr	r3, [pc, #324]	@ (800058c <fsm_manual_run+0x164>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	2002      	movs	r0, #2
 800044c:	f000 f960 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {
 8000450:	2000      	movs	r0, #0
 8000452:	f000 fa49 	bl	80008e8 <is_button_pressed>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00a      	beq.n	8000472 <fsm_manual_run+0x4a>
			status = MAN_YELLOW;
 800045c:	4b4a      	ldr	r3, [pc, #296]	@ (8000588 <fsm_manual_run+0x160>)
 800045e:	220c      	movs	r2, #12
 8000460:	601a      	str	r2, [r3, #0]
			clear_all_light();
 8000462:	f000 fd19 	bl	8000e98 <clear_all_light>
			setTimer(LED7SEG, led7seg_duration);
 8000466:	4b4a      	ldr	r3, [pc, #296]	@ (8000590 <fsm_manual_run+0x168>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4619      	mov	r1, r3
 800046c:	2007      	movs	r0, #7
 800046e:	f000 ff13 	bl	8001298 <setTimer>
		if (is_button_pressed(1)) {
 8000472:	2001      	movs	r0, #1
 8000474:	f000 fa38 	bl	80008e8 <is_button_pressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d07d      	beq.n	800057a <fsm_manual_run+0x152>
			status = EDIT_RED;
 800047e:	4b42      	ldr	r3, [pc, #264]	@ (8000588 <fsm_manual_run+0x160>)
 8000480:	2215      	movs	r2, #21
 8000482:	601a      	str	r2, [r3, #0]
			red_edit++;
 8000484:	4b43      	ldr	r3, [pc, #268]	@ (8000594 <fsm_manual_run+0x16c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	4a42      	ldr	r2, [pc, #264]	@ (8000594 <fsm_manual_run+0x16c>)
 800048c:	6013      	str	r3, [r2, #0]
			if (red_edit > 99) {
 800048e:	4b41      	ldr	r3, [pc, #260]	@ (8000594 <fsm_manual_run+0x16c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b63      	cmp	r3, #99	@ 0x63
 8000494:	dd02      	ble.n	800049c <fsm_manual_run+0x74>
				red_edit = 1;
 8000496:	4b3f      	ldr	r3, [pc, #252]	@ (8000594 <fsm_manual_run+0x16c>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 800049c:	4b3c      	ldr	r3, [pc, #240]	@ (8000590 <fsm_manual_run+0x168>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2007      	movs	r0, #7
 80004a4:	f000 fef8 	bl	8001298 <setTimer>
		break;
 80004a8:	e067      	b.n	800057a <fsm_manual_run+0x152>
		check_timer_and_display_mode(3, yellow_duration);
 80004aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000598 <fsm_manual_run+0x170>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f92d 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 fa16 	bl	80008e8 <is_button_pressed>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d00a      	beq.n	80004d8 <fsm_manual_run+0xb0>
			status = MAN_GREEN;
 80004c2:	4b31      	ldr	r3, [pc, #196]	@ (8000588 <fsm_manual_run+0x160>)
 80004c4:	220d      	movs	r2, #13
 80004c6:	601a      	str	r2, [r3, #0]
			clear_all_light();
 80004c8:	f000 fce6 	bl	8000e98 <clear_all_light>
			setTimer(LED7SEG, led7seg_duration);
 80004cc:	4b30      	ldr	r3, [pc, #192]	@ (8000590 <fsm_manual_run+0x168>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 fee0 	bl	8001298 <setTimer>
		if (is_button_pressed(1)) {
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 fa05 	bl	80008e8 <is_button_pressed>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d04c      	beq.n	800057e <fsm_manual_run+0x156>
			status = EDIT_YELLOW;
 80004e4:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <fsm_manual_run+0x160>)
 80004e6:	2216      	movs	r2, #22
 80004e8:	601a      	str	r2, [r3, #0]
			yellow_edit++;
 80004ea:	4b2c      	ldr	r3, [pc, #176]	@ (800059c <fsm_manual_run+0x174>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a2a      	ldr	r2, [pc, #168]	@ (800059c <fsm_manual_run+0x174>)
 80004f2:	6013      	str	r3, [r2, #0]
			if (yellow_edit > 99) {
 80004f4:	4b29      	ldr	r3, [pc, #164]	@ (800059c <fsm_manual_run+0x174>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b63      	cmp	r3, #99	@ 0x63
 80004fa:	dd02      	ble.n	8000502 <fsm_manual_run+0xda>
				yellow_edit = 1;
 80004fc:	4b27      	ldr	r3, [pc, #156]	@ (800059c <fsm_manual_run+0x174>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 8000502:	4b23      	ldr	r3, [pc, #140]	@ (8000590 <fsm_manual_run+0x168>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	2007      	movs	r0, #7
 800050a:	f000 fec5 	bl	8001298 <setTimer>
		break;
 800050e:	e036      	b.n	800057e <fsm_manual_run+0x156>
		check_timer_and_display_mode(4, green_duration);
 8000510:	4b23      	ldr	r3, [pc, #140]	@ (80005a0 <fsm_manual_run+0x178>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	2004      	movs	r0, #4
 8000518:	f000 f8fa 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {
 800051c:	2000      	movs	r0, #0
 800051e:	f000 f9e3 	bl	80008e8 <is_button_pressed>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00a      	beq.n	800053e <fsm_manual_run+0x116>
			status = INIT;
 8000528:	4b17      	ldr	r3, [pc, #92]	@ (8000588 <fsm_manual_run+0x160>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			clear_all_light();
 800052e:	f000 fcb3 	bl	8000e98 <clear_all_light>
			setTimer(LED7SEG, led7seg_duration);
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <fsm_manual_run+0x168>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4619      	mov	r1, r3
 8000538:	2007      	movs	r0, #7
 800053a:	f000 fead 	bl	8001298 <setTimer>
		if (is_button_pressed(1)) {
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f9d2 	bl	80008e8 <is_button_pressed>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d01b      	beq.n	8000582 <fsm_manual_run+0x15a>
			status = EDIT_GREEN;
 800054a:	4b0f      	ldr	r3, [pc, #60]	@ (8000588 <fsm_manual_run+0x160>)
 800054c:	2217      	movs	r2, #23
 800054e:	601a      	str	r2, [r3, #0]
			green_edit++;
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <fsm_manual_run+0x17c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <fsm_manual_run+0x17c>)
 8000558:	6013      	str	r3, [r2, #0]
			if(green_edit > 99) {
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <fsm_manual_run+0x17c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b63      	cmp	r3, #99	@ 0x63
 8000560:	dd02      	ble.n	8000568 <fsm_manual_run+0x140>
				green_edit = 1;
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <fsm_manual_run+0x17c>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <fsm_manual_run+0x168>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	2007      	movs	r0, #7
 8000570:	f000 fe92 	bl	8001298 <setTimer>
		break;
 8000574:	e005      	b.n	8000582 <fsm_manual_run+0x15a>
		break;
 8000576:	bf00      	nop
 8000578:	e004      	b.n	8000584 <fsm_manual_run+0x15c>
		break;
 800057a:	bf00      	nop
 800057c:	e002      	b.n	8000584 <fsm_manual_run+0x15c>
		break;
 800057e:	bf00      	nop
 8000580:	e000      	b.n	8000584 <fsm_manual_run+0x15c>
		break;
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000064 	.word	0x20000064
 800058c:	20000068 	.word	0x20000068
 8000590:	20000000 	.word	0x20000000
 8000594:	20000074 	.word	0x20000074
 8000598:	20000070 	.word	0x20000070
 800059c:	20000078 	.word	0x20000078
 80005a0:	2000006c 	.word	0x2000006c
 80005a4:	2000007c 	.word	0x2000007c

080005a8 <fsm_setting_run>:
 *      Author: Lenovo
 */

#include "fsm_setting.h"

void fsm_setting_run() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	switch (status) {
 80005ac:	4b50      	ldr	r3, [pc, #320]	@ (80006f0 <fsm_setting_run+0x148>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b17      	cmp	r3, #23
 80005b2:	d065      	beq.n	8000680 <fsm_setting_run+0xd8>
 80005b4:	2b17      	cmp	r3, #23
 80005b6:	f300 8092 	bgt.w	80006de <fsm_setting_run+0x136>
 80005ba:	2b15      	cmp	r3, #21
 80005bc:	d002      	beq.n	80005c4 <fsm_setting_run+0x1c>
 80005be:	2b16      	cmp	r3, #22
 80005c0:	d02f      	beq.n	8000622 <fsm_setting_run+0x7a>
			setTimer(LED7SEG, led7seg_duration);
		}
		break;

	default:
		break;
 80005c2:	e08c      	b.n	80006de <fsm_setting_run+0x136>
		check_timer_and_display_mode(2, red_edit);
 80005c4:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <fsm_setting_run+0x14c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	2002      	movs	r0, #2
 80005cc:	f000 f8a0 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {};
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f989 	bl	80008e8 <is_button_pressed>
		if (is_button_pressed(1)) {
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 f986 	bl	80008e8 <is_button_pressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00b      	beq.n	80005fa <fsm_setting_run+0x52>
			red_edit++;
 80005e2:	4b44      	ldr	r3, [pc, #272]	@ (80006f4 <fsm_setting_run+0x14c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a42      	ldr	r2, [pc, #264]	@ (80006f4 <fsm_setting_run+0x14c>)
 80005ea:	6013      	str	r3, [r2, #0]
			if (red_edit > 99) red_edit = 1;
 80005ec:	4b41      	ldr	r3, [pc, #260]	@ (80006f4 <fsm_setting_run+0x14c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b63      	cmp	r3, #99	@ 0x63
 80005f2:	dd02      	ble.n	80005fa <fsm_setting_run+0x52>
 80005f4:	4b3f      	ldr	r3, [pc, #252]	@ (80006f4 <fsm_setting_run+0x14c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f974 	bl	80008e8 <is_button_pressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d06d      	beq.n	80006e2 <fsm_setting_run+0x13a>
			red_duration = red_edit;
 8000606:	4b3b      	ldr	r3, [pc, #236]	@ (80006f4 <fsm_setting_run+0x14c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a3b      	ldr	r2, [pc, #236]	@ (80006f8 <fsm_setting_run+0x150>)
 800060c:	6013      	str	r3, [r2, #0]
			status = MAN_RED;
 800060e:	4b38      	ldr	r3, [pc, #224]	@ (80006f0 <fsm_setting_run+0x148>)
 8000610:	220b      	movs	r2, #11
 8000612:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 8000614:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <fsm_setting_run+0x154>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	2007      	movs	r0, #7
 800061c:	f000 fe3c 	bl	8001298 <setTimer>
		break;
 8000620:	e05f      	b.n	80006e2 <fsm_setting_run+0x13a>
		check_timer_and_display_mode(3, yellow_edit);
 8000622:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <fsm_setting_run+0x158>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f871 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {};
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f95a 	bl	80008e8 <is_button_pressed>
		if (is_button_pressed(1)) {
 8000634:	2001      	movs	r0, #1
 8000636:	f000 f957 	bl	80008e8 <is_button_pressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00b      	beq.n	8000658 <fsm_setting_run+0xb0>
			yellow_edit++;
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <fsm_setting_run+0x158>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	4a2e      	ldr	r2, [pc, #184]	@ (8000700 <fsm_setting_run+0x158>)
 8000648:	6013      	str	r3, [r2, #0]
			if (yellow_edit > 99) yellow_edit = 1;
 800064a:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <fsm_setting_run+0x158>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b63      	cmp	r3, #99	@ 0x63
 8000650:	dd02      	ble.n	8000658 <fsm_setting_run+0xb0>
 8000652:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <fsm_setting_run+0x158>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 8000658:	2002      	movs	r0, #2
 800065a:	f000 f945 	bl	80008e8 <is_button_pressed>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d040      	beq.n	80006e6 <fsm_setting_run+0x13e>
			yellow_duration = yellow_edit;
 8000664:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <fsm_setting_run+0x158>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <fsm_setting_run+0x15c>)
 800066a:	6013      	str	r3, [r2, #0]
			status = MAN_YELLOW;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <fsm_setting_run+0x148>)
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <fsm_setting_run+0x154>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	2007      	movs	r0, #7
 800067a:	f000 fe0d 	bl	8001298 <setTimer>
		break;
 800067e:	e032      	b.n	80006e6 <fsm_setting_run+0x13e>
		check_timer_and_display_mode(4, green_edit);
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <fsm_setting_run+0x160>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	2004      	movs	r0, #4
 8000688:	f000 f842 	bl	8000710 <check_timer_and_display_mode>
		if (is_button_pressed(0)) {};
 800068c:	2000      	movs	r0, #0
 800068e:	f000 f92b 	bl	80008e8 <is_button_pressed>
		if (is_button_pressed(1)) {
 8000692:	2001      	movs	r0, #1
 8000694:	f000 f928 	bl	80008e8 <is_button_pressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00b      	beq.n	80006b6 <fsm_setting_run+0x10e>
			green_edit++;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <fsm_setting_run+0x160>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a18      	ldr	r2, [pc, #96]	@ (8000708 <fsm_setting_run+0x160>)
 80006a6:	6013      	str	r3, [r2, #0]
			if (green_edit > 99) green_edit = 1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <fsm_setting_run+0x160>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b63      	cmp	r3, #99	@ 0x63
 80006ae:	dd02      	ble.n	80006b6 <fsm_setting_run+0x10e>
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <fsm_setting_run+0x160>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 80006b6:	2002      	movs	r0, #2
 80006b8:	f000 f916 	bl	80008e8 <is_button_pressed>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d013      	beq.n	80006ea <fsm_setting_run+0x142>
			green_duration = green_edit;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <fsm_setting_run+0x160>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <fsm_setting_run+0x164>)
 80006c8:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <fsm_setting_run+0x148>)
 80006cc:	220d      	movs	r2, #13
 80006ce:	601a      	str	r2, [r3, #0]
			setTimer(LED7SEG, led7seg_duration);
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <fsm_setting_run+0x154>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	2007      	movs	r0, #7
 80006d8:	f000 fdde 	bl	8001298 <setTimer>
		break;
 80006dc:	e005      	b.n	80006ea <fsm_setting_run+0x142>
		break;
 80006de:	bf00      	nop
 80006e0:	e004      	b.n	80006ec <fsm_setting_run+0x144>
		break;
 80006e2:	bf00      	nop
 80006e4:	e002      	b.n	80006ec <fsm_setting_run+0x144>
		break;
 80006e6:	bf00      	nop
 80006e8:	e000      	b.n	80006ec <fsm_setting_run+0x144>
		break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000064 	.word	0x20000064
 80006f4:	20000074 	.word	0x20000074
 80006f8:	20000068 	.word	0x20000068
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000078 	.word	0x20000078
 8000704:	20000070 	.word	0x20000070
 8000708:	2000007c 	.word	0x2000007c
 800070c:	2000006c 	.word	0x2000006c

08000710 <check_timer_and_display_mode>:
int light_countdown_Y = 0;

int count_for_led7seg = 0;
int led7seg_duration = 250;

void check_timer_and_display_mode(int mode, int duration) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	if (flag_timer[LED7SEG]) {
 800071a:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <check_timer_and_display_mode+0x78>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d02e      	beq.n	8000780 <check_timer_and_display_mode+0x70>
		count_for_led7seg++;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <check_timer_and_display_mode+0x7c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	4a18      	ldr	r2, [pc, #96]	@ (800078c <check_timer_and_display_mode+0x7c>)
 800072a:	6013      	str	r3, [r2, #0]
		if (count_for_led7seg >= 4)  count_for_led7seg = 0;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <check_timer_and_display_mode+0x7c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b03      	cmp	r3, #3
 8000732:	dd02      	ble.n	800073a <check_timer_and_display_mode+0x2a>
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <check_timer_and_display_mode+0x7c>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		if (count_for_led7seg % 2 == 0) {
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <check_timer_and_display_mode+0x7c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d110      	bne.n	8000768 <check_timer_and_display_mode+0x58>
			if (mode == 2) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d102      	bne.n	8000752 <check_timer_and_display_mode+0x42>
				blink_red();
 800074c:	f000 fb74 	bl	8000e38 <blink_red>
 8000750:	e00a      	b.n	8000768 <check_timer_and_display_mode+0x58>
			}
			else if (mode == 3) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d102      	bne.n	800075e <check_timer_and_display_mode+0x4e>
				blink_yellow();
 8000758:	f000 fb7e 	bl	8000e58 <blink_yellow>
 800075c:	e004      	b.n	8000768 <check_timer_and_display_mode+0x58>
			}
			else if (mode == 4) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d101      	bne.n	8000768 <check_timer_and_display_mode+0x58>
				blink_green();
 8000764:	f000 fb88 	bl	8000e78 <blink_green>
			}
		}

		display7SEG_X(mode);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 fafd 	bl	8000d68 <display7SEG_X>
		display7SEG_Y(duration);
 800076e:	6838      	ldr	r0, [r7, #0]
 8000770:	f000 fb2e 	bl	8000dd0 <display7SEG_Y>

		setTimer(LED7SEG, led7seg_duration);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <check_timer_and_display_mode+0x80>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	2007      	movs	r0, #7
 800077c:	f000 fd8c 	bl	8001298 <setTimer>
	}
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000e0 	.word	0x200000e0
 800078c:	20000088 	.word	0x20000088
 8000790:	20000000 	.word	0x20000000

08000794 <getKeyInput>:
int keyReg0[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg1[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg2[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

void getKeyInput() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	uint8_t index;
	for (index = 0; index < BTN_COUNT; index++) {
 800079a:	2300      	movs	r3, #0
 800079c:	71fb      	strb	r3, [r7, #7]
 800079e:	e08c      	b.n	80008ba <getKeyInput+0x126>
		keyReg2[index] = keyReg1[index];
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4949      	ldr	r1, [pc, #292]	@ (80008cc <getKeyInput+0x138>)
 80007a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007aa:	4949      	ldr	r1, [pc, #292]	@ (80008d0 <getKeyInput+0x13c>)
 80007ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[index] = keyReg0[index];
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4947      	ldr	r1, [pc, #284]	@ (80008d4 <getKeyInput+0x140>)
 80007b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007ba:	4944      	ldr	r1, [pc, #272]	@ (80008cc <getKeyInput+0x138>)
 80007bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (index == 0) {
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10b      	bne.n	80007de <getKeyInput+0x4a>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80007c6:	2110      	movs	r1, #16
 80007c8:	4843      	ldr	r0, [pc, #268]	@ (80008d8 <getKeyInput+0x144>)
 80007ca:	f001 f963 	bl	8001a94 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a3f      	ldr	r2, [pc, #252]	@ (80008d4 <getKeyInput+0x140>)
 80007d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007dc:	e01c      	b.n	8000818 <getKeyInput+0x84>
		}
		else if (index == 1) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10b      	bne.n	80007fc <getKeyInput+0x68>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80007e4:	2120      	movs	r1, #32
 80007e6:	483c      	ldr	r0, [pc, #240]	@ (80008d8 <getKeyInput+0x144>)
 80007e8:	f001 f954 	bl	8001a94 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <getKeyInput+0x140>)
 80007f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007fa:	e00d      	b.n	8000818 <getKeyInput+0x84>
		}
		else if (index == 2) {
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d10a      	bne.n	8000818 <getKeyInput+0x84>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000802:	2140      	movs	r1, #64	@ 0x40
 8000804:	4834      	ldr	r0, [pc, #208]	@ (80008d8 <getKeyInput+0x144>)
 8000806:	f001 f945 	bl	8001a94 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4611      	mov	r1, r2
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <getKeyInput+0x140>)
 8000814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (keyReg0[index] == keyReg1[index] && keyReg1[index] == keyReg2[index]) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <getKeyInput+0x140>)
 800081c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	492a      	ldr	r1, [pc, #168]	@ (80008cc <getKeyInput+0x138>)
 8000824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000828:	429a      	cmp	r2, r3
 800082a:	d143      	bne.n	80008b4 <getKeyInput+0x120>
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a27      	ldr	r2, [pc, #156]	@ (80008cc <getKeyInput+0x138>)
 8000830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4926      	ldr	r1, [pc, #152]	@ (80008d0 <getKeyInput+0x13c>)
 8000838:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800083c:	429a      	cmp	r2, r3
 800083e:	d139      	bne.n	80008b4 <getKeyInput+0x120>
			if (keyReg0[index] != keyReg3[index]) {
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a24      	ldr	r2, [pc, #144]	@ (80008d4 <getKeyInput+0x140>)
 8000844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4924      	ldr	r1, [pc, #144]	@ (80008dc <getKeyInput+0x148>)
 800084c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000850:	429a      	cmp	r2, r3
 8000852:	d02f      	beq.n	80008b4 <getKeyInput+0x120>
				keyReg3[index] = keyReg0[index];
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	491e      	ldr	r1, [pc, #120]	@ (80008d4 <getKeyInput+0x140>)
 800085a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800085e:	491f      	ldr	r1, [pc, #124]	@ (80008dc <getKeyInput+0x148>)
 8000860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg0[index] == PRESSED_STATE) {
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <getKeyInput+0x140>)
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <getKeyInput+0xf0>
					TimeOutForKeyPress = 500;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <getKeyInput+0x14c>)
 8000872:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000876:	601a      	str	r2, [r3, #0]
					button_flag[index] = 1;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4a1a      	ldr	r2, [pc, #104]	@ (80008e4 <getKeyInput+0x150>)
 800087c:	2101      	movs	r1, #1
 800087e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000882:	e017      	b.n	80008b4 <getKeyInput+0x120>
				}
				else {
					TimeOutForKeyPress--;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <getKeyInput+0x14c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <getKeyInput+0x14c>)
 800088c:	6013      	str	r3, [r2, #0]
					if (TimeOutForKeyPress == 0) {
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <getKeyInput+0x14c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10e      	bne.n	80008b4 <getKeyInput+0x120>
						TimeOutForKeyPress = 500;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <getKeyInput+0x14c>)
 8000898:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800089c:	601a      	str	r2, [r3, #0]
						if (keyReg0[index] == PRESSED_STATE) {
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4a0c      	ldr	r2, [pc, #48]	@ (80008d4 <getKeyInput+0x140>)
 80008a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d104      	bne.n	80008b4 <getKeyInput+0x120>
							button_flag[index] = 1;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <getKeyInput+0x150>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; index < BTN_COUNT; index++) {
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	3301      	adds	r3, #1
 80008b8:	71fb      	strb	r3, [r7, #7]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	f67f af6f 	bls.w	80007a0 <getKeyInput+0xc>
				}
			}
		}
	}

}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000014 	.word	0x20000014
 80008d0:	20000020 	.word	0x20000020
 80008d4:	20000008 	.word	0x20000008
 80008d8:	40010800 	.word	0x40010800
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	20000004 	.word	0x20000004
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <is_button_pressed>:


int is_button_pressed(int index) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 80008f0:	4a09      	ldr	r2, [pc, #36]	@ (8000918 <is_button_pressed+0x30>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d106      	bne.n	800090a <is_button_pressed+0x22>
		button_flag[index] = 0;
 80008fc:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <is_button_pressed+0x30>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2100      	movs	r1, #0
 8000902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <is_button_pressed+0x24>
	}
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2000008c 	.word	0x2000008c

0800091c <display7SEG>:
 *  Created on: Jul 1, 2025
 *      Author: Lenovo
 */
#include "led_7SEG.h"

void display7SEG(int num) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b09      	cmp	r3, #9
 8000928:	f200 8180 	bhi.w	8000c2c <display7SEG+0x310>
 800092c:	a201      	add	r2, pc, #4	@ (adr r2, 8000934 <display7SEG+0x18>)
 800092e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000932:	bf00      	nop
 8000934:	0800095d 	.word	0x0800095d
 8000938:	080009a5 	.word	0x080009a5
 800093c:	080009ed 	.word	0x080009ed
 8000940:	08000a35 	.word	0x08000a35
 8000944:	08000a7d 	.word	0x08000a7d
 8000948:	08000ac5 	.word	0x08000ac5
 800094c:	08000b0d 	.word	0x08000b0d
 8000950:	08000b55 	.word	0x08000b55
 8000954:	08000b9d 	.word	0x08000b9d
 8000958:	08000be5 	.word	0x08000be5
		case 0:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	48b5      	ldr	r0, [pc, #724]	@ (8000c38 <display7SEG+0x31c>)
 8000962:	f001 f8ae 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2102      	movs	r1, #2
 800096a:	48b3      	ldr	r0, [pc, #716]	@ (8000c38 <display7SEG+0x31c>)
 800096c:	f001 f8a9 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2104      	movs	r1, #4
 8000974:	48b0      	ldr	r0, [pc, #704]	@ (8000c38 <display7SEG+0x31c>)
 8000976:	f001 f8a4 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	48ae      	ldr	r0, [pc, #696]	@ (8000c38 <display7SEG+0x31c>)
 8000980:	f001 f89f 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2110      	movs	r1, #16
 8000988:	48ab      	ldr	r0, [pc, #684]	@ (8000c38 <display7SEG+0x31c>)
 800098a:	f001 f89a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	48a9      	ldr	r0, [pc, #676]	@ (8000c38 <display7SEG+0x31c>)
 8000994:	f001 f895 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	@ 0x40
 800099c:	48a6      	ldr	r0, [pc, #664]	@ (8000c38 <display7SEG+0x31c>)
 800099e:	f001 f890 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 80009a2:	e144      	b.n	8000c2e <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	48a3      	ldr	r0, [pc, #652]	@ (8000c38 <display7SEG+0x31c>)
 80009aa:	f001 f88a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2102      	movs	r1, #2
 80009b2:	48a1      	ldr	r0, [pc, #644]	@ (8000c38 <display7SEG+0x31c>)
 80009b4:	f001 f885 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2104      	movs	r1, #4
 80009bc:	489e      	ldr	r0, [pc, #632]	@ (8000c38 <display7SEG+0x31c>)
 80009be:	f001 f880 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	489c      	ldr	r0, [pc, #624]	@ (8000c38 <display7SEG+0x31c>)
 80009c8:	f001 f87b 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	4899      	ldr	r0, [pc, #612]	@ (8000c38 <display7SEG+0x31c>)
 80009d2:	f001 f876 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2120      	movs	r1, #32
 80009da:	4897      	ldr	r0, [pc, #604]	@ (8000c38 <display7SEG+0x31c>)
 80009dc:	f001 f871 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	@ 0x40
 80009e4:	4894      	ldr	r0, [pc, #592]	@ (8000c38 <display7SEG+0x31c>)
 80009e6:	f001 f86c 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 80009ea:	e120      	b.n	8000c2e <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2101      	movs	r1, #1
 80009f0:	4891      	ldr	r0, [pc, #580]	@ (8000c38 <display7SEG+0x31c>)
 80009f2:	f001 f866 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	488f      	ldr	r0, [pc, #572]	@ (8000c38 <display7SEG+0x31c>)
 80009fc:	f001 f861 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2104      	movs	r1, #4
 8000a04:	488c      	ldr	r0, [pc, #560]	@ (8000c38 <display7SEG+0x31c>)
 8000a06:	f001 f85c 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	488a      	ldr	r0, [pc, #552]	@ (8000c38 <display7SEG+0x31c>)
 8000a10:	f001 f857 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4887      	ldr	r0, [pc, #540]	@ (8000c38 <display7SEG+0x31c>)
 8000a1a:	f001 f852 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2120      	movs	r1, #32
 8000a22:	4885      	ldr	r0, [pc, #532]	@ (8000c38 <display7SEG+0x31c>)
 8000a24:	f001 f84d 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	@ 0x40
 8000a2c:	4882      	ldr	r0, [pc, #520]	@ (8000c38 <display7SEG+0x31c>)
 8000a2e:	f001 f848 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000a32:	e0fc      	b.n	8000c2e <display7SEG+0x312>
		case 3:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	487f      	ldr	r0, [pc, #508]	@ (8000c38 <display7SEG+0x31c>)
 8000a3a:	f001 f842 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2102      	movs	r1, #2
 8000a42:	487d      	ldr	r0, [pc, #500]	@ (8000c38 <display7SEG+0x31c>)
 8000a44:	f001 f83d 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	487a      	ldr	r0, [pc, #488]	@ (8000c38 <display7SEG+0x31c>)
 8000a4e:	f001 f838 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2108      	movs	r1, #8
 8000a56:	4878      	ldr	r0, [pc, #480]	@ (8000c38 <display7SEG+0x31c>)
 8000a58:	f001 f833 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4875      	ldr	r0, [pc, #468]	@ (8000c38 <display7SEG+0x31c>)
 8000a62:	f001 f82e 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4873      	ldr	r0, [pc, #460]	@ (8000c38 <display7SEG+0x31c>)
 8000a6c:	f001 f829 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	@ 0x40
 8000a74:	4870      	ldr	r0, [pc, #448]	@ (8000c38 <display7SEG+0x31c>)
 8000a76:	f001 f824 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000a7a:	e0d8      	b.n	8000c2e <display7SEG+0x312>
		case 4:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	486d      	ldr	r0, [pc, #436]	@ (8000c38 <display7SEG+0x31c>)
 8000a82:	f001 f81e 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	486b      	ldr	r0, [pc, #428]	@ (8000c38 <display7SEG+0x31c>)
 8000a8c:	f001 f819 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	4868      	ldr	r0, [pc, #416]	@ (8000c38 <display7SEG+0x31c>)
 8000a96:	f001 f814 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4866      	ldr	r0, [pc, #408]	@ (8000c38 <display7SEG+0x31c>)
 8000aa0:	f001 f80f 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4863      	ldr	r0, [pc, #396]	@ (8000c38 <display7SEG+0x31c>)
 8000aaa:	f001 f80a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4861      	ldr	r0, [pc, #388]	@ (8000c38 <display7SEG+0x31c>)
 8000ab4:	f001 f805 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	485e      	ldr	r0, [pc, #376]	@ (8000c38 <display7SEG+0x31c>)
 8000abe:	f001 f800 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000ac2:	e0b4      	b.n	8000c2e <display7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	485b      	ldr	r0, [pc, #364]	@ (8000c38 <display7SEG+0x31c>)
 8000aca:	f000 fffa 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4859      	ldr	r0, [pc, #356]	@ (8000c38 <display7SEG+0x31c>)
 8000ad4:	f000 fff5 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	4856      	ldr	r0, [pc, #344]	@ (8000c38 <display7SEG+0x31c>)
 8000ade:	f000 fff0 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	4854      	ldr	r0, [pc, #336]	@ (8000c38 <display7SEG+0x31c>)
 8000ae8:	f000 ffeb 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2110      	movs	r1, #16
 8000af0:	4851      	ldr	r0, [pc, #324]	@ (8000c38 <display7SEG+0x31c>)
 8000af2:	f000 ffe6 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2120      	movs	r1, #32
 8000afa:	484f      	ldr	r0, [pc, #316]	@ (8000c38 <display7SEG+0x31c>)
 8000afc:	f000 ffe1 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2140      	movs	r1, #64	@ 0x40
 8000b04:	484c      	ldr	r0, [pc, #304]	@ (8000c38 <display7SEG+0x31c>)
 8000b06:	f000 ffdc 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000b0a:	e090      	b.n	8000c2e <display7SEG+0x312>
		case 6:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4849      	ldr	r0, [pc, #292]	@ (8000c38 <display7SEG+0x31c>)
 8000b12:	f000 ffd6 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4847      	ldr	r0, [pc, #284]	@ (8000c38 <display7SEG+0x31c>)
 8000b1c:	f000 ffd1 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2104      	movs	r1, #4
 8000b24:	4844      	ldr	r0, [pc, #272]	@ (8000c38 <display7SEG+0x31c>)
 8000b26:	f000 ffcc 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	4842      	ldr	r0, [pc, #264]	@ (8000c38 <display7SEG+0x31c>)
 8000b30:	f000 ffc7 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	483f      	ldr	r0, [pc, #252]	@ (8000c38 <display7SEG+0x31c>)
 8000b3a:	f000 ffc2 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	483d      	ldr	r0, [pc, #244]	@ (8000c38 <display7SEG+0x31c>)
 8000b44:	f000 ffbd 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	@ 0x40
 8000b4c:	483a      	ldr	r0, [pc, #232]	@ (8000c38 <display7SEG+0x31c>)
 8000b4e:	f000 ffb8 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000b52:	e06c      	b.n	8000c2e <display7SEG+0x312>
		case 7:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	4837      	ldr	r0, [pc, #220]	@ (8000c38 <display7SEG+0x31c>)
 8000b5a:	f000 ffb2 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	4835      	ldr	r0, [pc, #212]	@ (8000c38 <display7SEG+0x31c>)
 8000b64:	f000 ffad 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	4832      	ldr	r0, [pc, #200]	@ (8000c38 <display7SEG+0x31c>)
 8000b6e:	f000 ffa8 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2108      	movs	r1, #8
 8000b76:	4830      	ldr	r0, [pc, #192]	@ (8000c38 <display7SEG+0x31c>)
 8000b78:	f000 ffa3 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <display7SEG+0x31c>)
 8000b82:	f000 ff9e 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	482b      	ldr	r0, [pc, #172]	@ (8000c38 <display7SEG+0x31c>)
 8000b8c:	f000 ff99 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2140      	movs	r1, #64	@ 0x40
 8000b94:	4828      	ldr	r0, [pc, #160]	@ (8000c38 <display7SEG+0x31c>)
 8000b96:	f000 ff94 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000b9a:	e048      	b.n	8000c2e <display7SEG+0x312>
		case 8:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4825      	ldr	r0, [pc, #148]	@ (8000c38 <display7SEG+0x31c>)
 8000ba2:	f000 ff8e 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4823      	ldr	r0, [pc, #140]	@ (8000c38 <display7SEG+0x31c>)
 8000bac:	f000 ff89 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4820      	ldr	r0, [pc, #128]	@ (8000c38 <display7SEG+0x31c>)
 8000bb6:	f000 ff84 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	481e      	ldr	r0, [pc, #120]	@ (8000c38 <display7SEG+0x31c>)
 8000bc0:	f000 ff7f 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	481b      	ldr	r0, [pc, #108]	@ (8000c38 <display7SEG+0x31c>)
 8000bca:	f000 ff7a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <display7SEG+0x31c>)
 8000bd4:	f000 ff75 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	4816      	ldr	r0, [pc, #88]	@ (8000c38 <display7SEG+0x31c>)
 8000bde:	f000 ff70 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000be2:	e024      	b.n	8000c2e <display7SEG+0x312>
		case 9:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <display7SEG+0x31c>)
 8000bea:	f000 ff6a 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <display7SEG+0x31c>)
 8000bf4:	f000 ff65 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <display7SEG+0x31c>)
 8000bfe:	f000 ff60 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <display7SEG+0x31c>)
 8000c08:	f000 ff5b 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <display7SEG+0x31c>)
 8000c12:	f000 ff56 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <display7SEG+0x31c>)
 8000c1c:	f000 ff51 	bl	8001ac2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	@ 0x40
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <display7SEG+0x31c>)
 8000c26:	f000 ff4c 	bl	8001ac2 <HAL_GPIO_WritePin>
			break;
 8000c2a:	e000      	b.n	8000c2e <display7SEG+0x312>
		default:
			break;
 8000c2c:	bf00      	nop
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <clearAll>:

void clearAll() {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <clearAll+0x38>)
 8000c46:	f000 ff3c 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <clearAll+0x38>)
 8000c52:	f000 ff36 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <clearAll+0x38>)
 8000c5e:	f000 ff30 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <clearAll+0x38>)
 8000c6a:	f000 ff2a 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <turnOn_0>:

void turnOn_0 () {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <turnOn_0+0x38>)
 8000c82:	f000 ff1e 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c8c:	4808      	ldr	r0, [pc, #32]	@ (8000cb0 <turnOn_0+0x38>)
 8000c8e:	f000 ff18 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <turnOn_0+0x38>)
 8000c9a:	f000 ff12 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <turnOn_0+0x38>)
 8000ca6:	f000 ff0c 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010c00 	.word	0x40010c00

08000cb4 <turnOn_1>:

void turnOn_1 () {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <turnOn_1+0x38>)
 8000cbe:	f000 ff00 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc8:	4808      	ldr	r0, [pc, #32]	@ (8000cec <turnOn_1+0x38>)
 8000cca:	f000 fefa 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <turnOn_1+0x38>)
 8000cd6:	f000 fef4 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <turnOn_1+0x38>)
 8000ce2:	f000 feee 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <turnOn_2>:

void turnOn_2 () {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2180      	movs	r1, #128	@ 0x80
 8000cf8:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <turnOn_2+0x38>)
 8000cfa:	f000 fee2 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d04:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <turnOn_2+0x38>)
 8000d06:	f000 fedc 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <turnOn_2+0x38>)
 8000d12:	f000 fed6 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <turnOn_2+0x38>)
 8000d1e:	f000 fed0 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010c00 	.word	0x40010c00

08000d2c <turnOn_3>:

void turnOn_3 () {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	480b      	ldr	r0, [pc, #44]	@ (8000d64 <turnOn_3+0x38>)
 8000d36:	f000 fec4 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <turnOn_3+0x38>)
 8000d42:	f000 febe 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <turnOn_3+0x38>)
 8000d4e:	f000 feb8 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <turnOn_3+0x38>)
 8000d5a:	f000 feb2 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <display7SEG_X>:

void display7SEG_X(int num) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	int led_1 = num / 10;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <display7SEG_X+0x60>)
 8000d74:	fb82 1203 	smull	r1, r2, r2, r3
 8000d78:	1092      	asrs	r2, r2, #2
 8000d7a:	17db      	asrs	r3, r3, #31
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	60fb      	str	r3, [r7, #12]
	int led_2 = num % 10;
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <display7SEG_X+0x60>)
 8000d84:	fb83 1302 	smull	r1, r3, r3, r2
 8000d88:	1099      	asrs	r1, r3, #2
 8000d8a:	17d3      	asrs	r3, r2, #31
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	460b      	mov	r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	60bb      	str	r3, [r7, #8]

	if (count_for_led7seg == 0) {
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <display7SEG_X+0x64>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d104      	bne.n	8000dac <display7SEG_X+0x44>
		display7SEG(led_1);
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff fdba 	bl	800091c <display7SEG>
		turnOn_0();
 8000da8:	f7ff ff66 	bl	8000c78 <turnOn_0>
	}
	if (count_for_led7seg == 1) {
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <display7SEG_X+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d104      	bne.n	8000dbe <display7SEG_X+0x56>
		display7SEG(led_2);
 8000db4:	68b8      	ldr	r0, [r7, #8]
 8000db6:	f7ff fdb1 	bl	800091c <display7SEG>
		turnOn_1();
 8000dba:	f7ff ff7b 	bl	8000cb4 <turnOn_1>
	}

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	66666667 	.word	0x66666667
 8000dcc:	20000088 	.word	0x20000088

08000dd0 <display7SEG_Y>:

void display7SEG_Y(int num) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	int led_1 = num / 10;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a15      	ldr	r2, [pc, #84]	@ (8000e30 <display7SEG_Y+0x60>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	1092      	asrs	r2, r2, #2
 8000de2:	17db      	asrs	r3, r3, #31
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	60fb      	str	r3, [r7, #12]
	int led_2 = num % 10;
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <display7SEG_Y+0x60>)
 8000dec:	fb83 1302 	smull	r1, r3, r3, r2
 8000df0:	1099      	asrs	r1, r3, #2
 8000df2:	17d3      	asrs	r3, r2, #31
 8000df4:	1ac9      	subs	r1, r1, r3
 8000df6:	460b      	mov	r3, r1
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	60bb      	str	r3, [r7, #8]

	if (count_for_led7seg == 2) {
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <display7SEG_Y+0x64>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d104      	bne.n	8000e14 <display7SEG_Y+0x44>
		display7SEG(led_1);
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f7ff fd86 	bl	800091c <display7SEG>
		turnOn_2();
 8000e10:	f7ff ff6e 	bl	8000cf0 <turnOn_2>
	}
	if (count_for_led7seg == 3) {
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <display7SEG_Y+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d104      	bne.n	8000e26 <display7SEG_Y+0x56>
		display7SEG(led_2);
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f7ff fd7d 	bl	800091c <display7SEG>
		turnOn_3();
 8000e22:	f7ff ff83 	bl	8000d2c <turnOn_3>
	}

}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	66666667 	.word	0x66666667
 8000e34:	20000088 	.word	0x20000088

08000e38 <blink_red>:
#include "light_control.h"

void blink_red(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin);
 8000e3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <blink_red+0x1c>)
 8000e42:	f000 fe56 	bl	8001af2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin);
 8000e46:	2180      	movs	r1, #128	@ 0x80
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <blink_red+0x1c>)
 8000e4a:	f000 fe52 	bl	8001af2 <HAL_GPIO_TogglePin>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800

08000e58 <blink_yellow>:

void blink_yellow(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin);
 8000e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <blink_yellow+0x1c>)
 8000e62:	f000 fe46 	bl	8001af2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin);
 8000e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6a:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <blink_yellow+0x1c>)
 8000e6c:	f000 fe41 	bl	8001af2 <HAL_GPIO_TogglePin>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010800 	.word	0x40010800

08000e78 <blink_green>:

void blink_green(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin);
 8000e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <blink_green+0x1c>)
 8000e82:	f000 fe36 	bl	8001af2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin);
 8000e86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8a:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <blink_green+0x1c>)
 8000e8c:	f000 fe31 	bl	8001af2 <HAL_GPIO_TogglePin>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010800 	.word	0x40010800

08000e98 <clear_all_light>:

void clear_all_light(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea2:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <clear_all_light+0x50>)
 8000ea4:	f000 fe0d 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	480e      	ldr	r0, [pc, #56]	@ (8000ee8 <clear_all_light+0x50>)
 8000eae:	f000 fe08 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <clear_all_light+0x50>)
 8000eba:	f000 fe02 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <clear_all_light+0x50>)
 8000ec6:	f000 fdfc 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_X_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <clear_all_light+0x50>)
 8000ed2:	f000 fdf6 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <clear_all_light+0x50>)
 8000ede:	f000 fdf0 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010800 	.word	0x40010800

08000eec <red_light_X>:

void red_light_X(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <red_light_X+0x2c>)
 8000ef8:	f000 fde3 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <red_light_X+0x2c>)
 8000f04:	f000 fddd 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_X_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0e:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <red_light_X+0x2c>)
 8000f10:	f000 fdd7 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40010800 	.word	0x40010800

08000f1c <red_light_Y>:

void red_light_Y(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2180      	movs	r1, #128	@ 0x80
 8000f24:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <red_light_Y+0x2c>)
 8000f26:	f000 fdcc 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <red_light_Y+0x2c>)
 8000f32:	f000 fdc6 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <red_light_Y+0x2c>)
 8000f3e:	f000 fdc0 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010800 	.word	0x40010800

08000f4c <yellow_light_X>:

void yellow_light_X(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f56:	4808      	ldr	r0, [pc, #32]	@ (8000f78 <yellow_light_X+0x2c>)
 8000f58:	f000 fdb3 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <yellow_light_X+0x2c>)
 8000f64:	f000 fdad 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_X_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <yellow_light_X+0x2c>)
 8000f70:	f000 fda7 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40010800 	.word	0x40010800

08000f7c <yellow_light_Y>:

void yellow_light_Y(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	4808      	ldr	r0, [pc, #32]	@ (8000fa8 <yellow_light_Y+0x2c>)
 8000f86:	f000 fd9c 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <yellow_light_Y+0x2c>)
 8000f92:	f000 fd96 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <yellow_light_Y+0x2c>)
 8000f9e:	f000 fd90 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <green_light_X>:

void green_light_X(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb6:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <green_light_X+0x2c>)
 8000fb8:	f000 fd83 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <green_light_X+0x2c>)
 8000fc4:	f000 fd7d 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_X_Pin, SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fce:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <green_light_X+0x2c>)
 8000fd0:	f000 fd77 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010800 	.word	0x40010800

08000fdc <green_light_Y>:

void green_light_Y(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <green_light_Y+0x2c>)
 8000fe6:	f000 fd6c 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <green_light_Y+0x2c>)
 8000ff2:	f000 fd66 	bl	8001ac2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <green_light_Y+0x2c>)
 8000ffe:	f000 fd60 	bl	8001ac2 <HAL_GPIO_WritePin>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40010800 	.word	0x40010800

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fa4c 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f836 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 f8bc 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 800101c:	f000 f86e 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001020:	4812      	ldr	r0, [pc, #72]	@ (800106c <main+0x60>)
 8001022:	f001 f9ad 	bl	8002380 <HAL_TIM_Base_Start_IT>

  setTimer(BLINK, 500);
 8001026:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800102a:	2005      	movs	r0, #5
 800102c:	f000 f934 	bl	8001298 <setTimer>

  status = INIT;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <main+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
  red_duration = 5;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <main+0x68>)
 8001038:	2205      	movs	r2, #5
 800103a:	601a      	str	r2, [r3, #0]
  yellow_duration = 2;
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <main+0x6c>)
 800103e:	2202      	movs	r2, #2
 8001040:	601a      	str	r2, [r3, #0]
  green_duration = 3;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <main+0x70>)
 8001044:	2203      	movs	r2, #3
 8001046:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag_timer[BLINK]) {
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <main+0x74>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <main+0x52>
		  unittest_blink();
 8001050:	f000 f9fa 	bl	8001448 <unittest_blink>
		  setTimer(BLINK, 500);
 8001054:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001058:	2005      	movs	r0, #5
 800105a:	f000 f91d 	bl	8001298 <setTimer>
	  }
	  fsm_automatic_run();
 800105e:	f7ff f897 	bl	8000190 <fsm_automatic_run>
	  fsm_manual_run();
 8001062:	f7ff f9e1 	bl	8000428 <fsm_manual_run>
	  fsm_setting_run();
 8001066:	f7ff fa9f 	bl	80005a8 <fsm_setting_run>
	  if (flag_timer[BLINK]) {
 800106a:	e7ed      	b.n	8001048 <main+0x3c>
 800106c:	20000098 	.word	0x20000098
 8001070:	20000064 	.word	0x20000064
 8001074:	20000068 	.word	0x20000068
 8001078:	20000070 	.word	0x20000070
 800107c:	2000006c 	.word	0x2000006c
 8001080:	200000e0 	.word	0x200000e0

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	@ 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fd16 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fd32 	bl	8001b24 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8e1 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ffa0 	bl	8002028 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8cd 	bl	800128c <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	@ 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 f8cd 	bl	80022e0 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f89e 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f001 fa51 	bl	8002604 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f890 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f001 fc33 	bl	80029e4 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f882 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000098 	.word	0x20000098

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a21      	ldr	r2, [pc, #132]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_GPIO_Init+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_Led_Y_Pin|Yellow_Led_Y_Pin|Green_Led_Y_Pin|Red_Led_X_Pin
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 80011de:	481c      	ldr	r0, [pc, #112]	@ (8001250 <MX_GPIO_Init+0xbc>)
 80011e0:	f000 fc6f 	bl	8001ac2 <HAL_GPIO_WritePin>
                          |Yellow_Led_X_Pin|Green_Led_X_Pin|Blink_Led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_H_Pin|B_H_Pin|C_H_Pin|EN3_Pin
 80011e4:	2200      	movs	r2, #0
 80011e6:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80011ea:	481a      	ldr	r0, [pc, #104]	@ (8001254 <MX_GPIO_Init+0xc0>)
 80011ec:	f000 fc69 	bl	8001ac2 <HAL_GPIO_WritePin>
                          |D_H_Pin|E_H_Pin|F_H_Pin|G_H_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80011f0:	2370      	movs	r3, #112	@ 0x70
 80011f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4619      	mov	r1, r3
 8001202:	4813      	ldr	r0, [pc, #76]	@ (8001250 <MX_GPIO_Init+0xbc>)
 8001204:	f000 fac2 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Led_Y_Pin Yellow_Led_Y_Pin Green_Led_Y_Pin Red_Led_X_Pin
                           Yellow_Led_X_Pin Green_Led_X_Pin Blink_Led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Y_Pin|Yellow_Led_Y_Pin|Green_Led_Y_Pin|Red_Led_X_Pin
 8001208:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800120c:	60bb      	str	r3, [r7, #8]
                          |Yellow_Led_X_Pin|Green_Led_X_Pin|Blink_Led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2302      	movs	r3, #2
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480b      	ldr	r0, [pc, #44]	@ (8001250 <MX_GPIO_Init+0xbc>)
 8001222:	f000 fab3 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_H_Pin B_H_Pin C_H_Pin EN3_Pin
                           D_H_Pin E_H_Pin F_H_Pin G_H_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = A_H_Pin|B_H_Pin|C_H_Pin|EN3_Pin
 8001226:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800122a:	60bb      	str	r3, [r7, #8]
                          |D_H_Pin|E_H_Pin|F_H_Pin|G_H_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_GPIO_Init+0xc0>)
 8001240:	f000 faa4 	bl	800178c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800
 8001254:	40010c00 	.word	0x40010c00

08001258 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	runTimer(BLINK);
 8001260:	2005      	movs	r0, #5
 8001262:	f000 f837 	bl	80012d4 <runTimer>
	runTimer(LED7SEG);
 8001266:	2007      	movs	r0, #7
 8001268:	f000 f834 	bl	80012d4 <runTimer>
	for (int i = 0; i < 3; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e004      	b.n	800127c <HAL_TIM_PeriodElapsedCallback+0x24>
		getKeyInput();
 8001272:	f7ff fa8f 	bl	8000794 <getKeyInput>
	for (int i = 0; i < 3; i++) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3301      	adds	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b02      	cmp	r3, #2
 8001280:	ddf7      	ble.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x1a>
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <setTimer>:

int flag_timer[SIZE];
int timer_count[SIZE];
int CYCLE_TIMER = 10;

void setTimer(int index, int duration) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	timer_count[index] = duration / CYCLE_TIMER;
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <setTimer+0x30>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <setTimer+0x34>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 80012b4:	4a06      	ldr	r2, [pc, #24]	@ (80012d0 <setTimer+0x38>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2100      	movs	r1, #0
 80012ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	20000038 	.word	0x20000038
 80012cc:	20000108 	.word	0x20000108
 80012d0:	200000e0 	.word	0x200000e0

080012d4 <runTimer>:
void runTimer(int index) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if (timer_count[index] > 0) {
 80012dc:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <runTimer+0x48>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd13      	ble.n	8001310 <runTimer+0x3c>
		timer_count[index]--;
 80012e8:	4a0c      	ldr	r2, [pc, #48]	@ (800131c <runTimer+0x48>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	490a      	ldr	r1, [pc, #40]	@ (800131c <runTimer+0x48>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (timer_count[index] <= 0) {
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <runTimer+0x48>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	2b00      	cmp	r3, #0
 8001304:	dc04      	bgt.n	8001310 <runTimer+0x3c>
			flag_timer[index] = 1;
 8001306:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <runTimer+0x4c>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2101      	movs	r1, #1
 800130c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000108 	.word	0x20000108
 8001320:	200000e0 	.word	0x200000e0

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <HAL_MspInit+0x5c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <HAL_MspInit+0x5c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_MspInit+0x60>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_MspInit+0x60>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_TIM_Base_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 f9b1 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 f9ca 	bl	8001756 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <NMI_Handler+0x4>

080013d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <MemManage_Handler+0x4>

080013e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f88a 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <TIM2_IRQHandler+0x10>)
 800142e:	f000 fff9 	bl	8002424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000098 	.word	0x20000098

0800143c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <unittest_blink>:
 *      Author: Lenovo
 */

#include "unittest.h"

void unittest_blink(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Blink_Led_GPIO_Port, Blink_Led_Pin);
 800144c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <unittest_blink+0x14>)
 8001452:	f000 fb4e 	bl	8001af2 <HAL_GPIO_TogglePin>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010800 	.word	0x40010800

08001460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001460:	f7ff ffec 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480b      	ldr	r0, [pc, #44]	@ (8001494 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001466:	490c      	ldr	r1, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001468:	4a0c      	ldr	r2, [pc, #48]	@ (800149c <LoopFillZerobss+0x16>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800147c:	4c09      	ldr	r4, [pc, #36]	@ (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f001 fb23 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148e:	f7ff fdbd 	bl	800100c <main>
  bx lr
 8001492:	4770      	bx	lr
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800149c:	08002b60 	.word	0x08002b60
  ldr r2, =_sbss
 80014a0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80014a4:	20000134 	.word	0x20000134

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>
	...

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_Init+0x28>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_Init+0x28>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f923 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff ff2c 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f93b 	bl	8001772 <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f903 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000003c 	.word	0x2000003c
 8001530:	20000044 	.word	0x20000044
 8001534:	20000040 	.word	0x20000040

08001538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_IncTick+0x1c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_IncTick+0x20>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a03      	ldr	r2, [pc, #12]	@ (8001558 <HAL_IncTick+0x20>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000044 	.word	0x20000044
 8001558:	20000130 	.word	0x20000130

0800155c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <HAL_GetTick+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000130 	.word	0x20000130

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4906      	ldr	r1, [pc, #24]	@ (8001608 <__NVIC_EnableIRQ+0x34>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff90 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2d 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff42 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff35 	bl	80015d4 <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b08b      	sub	sp, #44	@ 0x2c
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e169      	b.n	8001a74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017a0:	2201      	movs	r2, #1
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8158 	bne.w	8001a6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a2c <HAL_GPIO_Init+0x2a0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d05e      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
 80017c8:	4a98      	ldr	r2, [pc, #608]	@ (8001a2c <HAL_GPIO_Init+0x2a0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d875      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 80017ce:	4a98      	ldr	r2, [pc, #608]	@ (8001a30 <HAL_GPIO_Init+0x2a4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d058      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
 80017d4:	4a96      	ldr	r2, [pc, #600]	@ (8001a30 <HAL_GPIO_Init+0x2a4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d86f      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 80017da:	4a96      	ldr	r2, [pc, #600]	@ (8001a34 <HAL_GPIO_Init+0x2a8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d052      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
 80017e0:	4a94      	ldr	r2, [pc, #592]	@ (8001a34 <HAL_GPIO_Init+0x2a8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d869      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 80017e6:	4a94      	ldr	r2, [pc, #592]	@ (8001a38 <HAL_GPIO_Init+0x2ac>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d04c      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
 80017ec:	4a92      	ldr	r2, [pc, #584]	@ (8001a38 <HAL_GPIO_Init+0x2ac>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d863      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 80017f2:	4a92      	ldr	r2, [pc, #584]	@ (8001a3c <HAL_GPIO_Init+0x2b0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d046      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
 80017f8:	4a90      	ldr	r2, [pc, #576]	@ (8001a3c <HAL_GPIO_Init+0x2b0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d85d      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 80017fe:	2b12      	cmp	r3, #18
 8001800:	d82a      	bhi.n	8001858 <HAL_GPIO_Init+0xcc>
 8001802:	2b12      	cmp	r3, #18
 8001804:	d859      	bhi.n	80018ba <HAL_GPIO_Init+0x12e>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <HAL_GPIO_Init+0x80>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001887 	.word	0x08001887
 8001810:	08001861 	.word	0x08001861
 8001814:	08001873 	.word	0x08001873
 8001818:	080018b5 	.word	0x080018b5
 800181c:	080018bb 	.word	0x080018bb
 8001820:	080018bb 	.word	0x080018bb
 8001824:	080018bb 	.word	0x080018bb
 8001828:	080018bb 	.word	0x080018bb
 800182c:	080018bb 	.word	0x080018bb
 8001830:	080018bb 	.word	0x080018bb
 8001834:	080018bb 	.word	0x080018bb
 8001838:	080018bb 	.word	0x080018bb
 800183c:	080018bb 	.word	0x080018bb
 8001840:	080018bb 	.word	0x080018bb
 8001844:	080018bb 	.word	0x080018bb
 8001848:	080018bb 	.word	0x080018bb
 800184c:	080018bb 	.word	0x080018bb
 8001850:	08001869 	.word	0x08001869
 8001854:	0800187d 	.word	0x0800187d
 8001858:	4a79      	ldr	r2, [pc, #484]	@ (8001a40 <HAL_GPIO_Init+0x2b4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800185e:	e02c      	b.n	80018ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	623b      	str	r3, [r7, #32]
          break;
 8001866:	e029      	b.n	80018bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	3304      	adds	r3, #4
 800186e:	623b      	str	r3, [r7, #32]
          break;
 8001870:	e024      	b.n	80018bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	3308      	adds	r3, #8
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e01f      	b.n	80018bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	330c      	adds	r3, #12
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e01a      	b.n	80018bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800188e:	2304      	movs	r3, #4
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e013      	b.n	80018bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d105      	bne.n	80018a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	611a      	str	r2, [r3, #16]
          break;
 80018a6:	e009      	b.n	80018bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	615a      	str	r2, [r3, #20]
          break;
 80018b2:	e003      	b.n	80018bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x130>
          break;
 80018ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	@ 0xff
 80018c0:	d801      	bhi.n	80018c6 <HAL_GPIO_Init+0x13a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	e001      	b.n	80018ca <HAL_GPIO_Init+0x13e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3304      	adds	r3, #4
 80018ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2bff      	cmp	r3, #255	@ 0xff
 80018d0:	d802      	bhi.n	80018d8 <HAL_GPIO_Init+0x14c>
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x152>
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	3b08      	subs	r3, #8
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	210f      	movs	r1, #15
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	6a39      	ldr	r1, [r7, #32]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80b1 	beq.w	8001a6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800190c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <HAL_GPIO_Init+0x2b8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a4c      	ldr	r2, [pc, #304]	@ (8001a44 <HAL_GPIO_Init+0x2b8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_GPIO_Init+0x2b8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001924:	4a48      	ldr	r2, [pc, #288]	@ (8001a48 <HAL_GPIO_Init+0x2bc>)
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a40      	ldr	r2, [pc, #256]	@ (8001a4c <HAL_GPIO_Init+0x2c0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x1ec>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3f      	ldr	r2, [pc, #252]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1e8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a54 <HAL_GPIO_Init+0x2c8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1e4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a3d      	ldr	r2, [pc, #244]	@ (8001a58 <HAL_GPIO_Init+0x2cc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1e0>
 8001968:	2303      	movs	r3, #3
 800196a:	e006      	b.n	800197a <HAL_GPIO_Init+0x1ee>
 800196c:	2304      	movs	r3, #4
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1ee>
 8001970:	2302      	movs	r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1ee>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1ee>
 8001978:	2300      	movs	r3, #0
 800197a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198a:	492f      	ldr	r1, [pc, #188]	@ (8001a48 <HAL_GPIO_Init+0x2bc>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	492c      	ldr	r1, [pc, #176]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4928      	ldr	r1, [pc, #160]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019cc:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4922      	ldr	r1, [pc, #136]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	491e      	ldr	r1, [pc, #120]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4918      	ldr	r1, [pc, #96]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4914      	ldr	r1, [pc, #80]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d021      	beq.n	8001a60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	490e      	ldr	r1, [pc, #56]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e021      	b.n	8001a6e <HAL_GPIO_Init+0x2e2>
 8001a2a:	bf00      	nop
 8001a2c:	10320000 	.word	0x10320000
 8001a30:	10310000 	.word	0x10310000
 8001a34:	10220000 	.word	0x10220000
 8001a38:	10210000 	.word	0x10210000
 8001a3c:	10120000 	.word	0x10120000
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40011000 	.word	0x40011000
 8001a58:	40011400 	.word	0x40011400
 8001a5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_GPIO_Init+0x304>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	4909      	ldr	r1, [pc, #36]	@ (8001a90 <HAL_GPIO_Init+0x304>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	3301      	adds	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f ae8e 	bne.w	80017a0 <HAL_GPIO_Init+0x14>
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	372c      	adds	r7, #44	@ 0x2c
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad2:	787b      	ldrb	r3, [r7, #1]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	611a      	str	r2, [r3, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b04:	887a      	ldrh	r2, [r7, #2]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	041a      	lsls	r2, r3, #16
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	400b      	ands	r3, r1
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	611a      	str	r2, [r3, #16]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e272      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8087 	beq.w	8001c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b44:	4b92      	ldr	r3, [pc, #584]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d00c      	beq.n	8001b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b50:	4b8f      	ldr	r3, [pc, #572]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d112      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6a:	4b89      	ldr	r3, [pc, #548]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d06c      	beq.n	8001c50 <HAL_RCC_OscConfig+0x12c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d168      	bne.n	8001c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e24c      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x76>
 8001b8c:	4b80      	ldr	r3, [pc, #512]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a7f      	ldr	r2, [pc, #508]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e02e      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7a      	ldr	r2, [pc, #488]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b78      	ldr	r3, [pc, #480]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a77      	ldr	r2, [pc, #476]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0xbc>
 8001bc6:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a71      	ldr	r2, [pc, #452]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xd4>
 8001be0:	4b6b      	ldr	r3, [pc, #428]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b68      	ldr	r3, [pc, #416]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff fcac 	bl	800155c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fca8 	bl	800155c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e200      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xe4>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc98 	bl	800155c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc94 	bl	800155c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	@ 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1ec      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	4b53      	ldr	r3, [pc, #332]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x10c>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6a:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d11c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
 8001c76:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d116      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e1c0      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4939      	ldr	r1, [pc, #228]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e03a      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d020      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b36      	ldr	r3, [pc, #216]	@ (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fc4d 	bl	800155c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fc49 	bl	800155c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1a1      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4927      	ldr	r1, [pc, #156]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fc2c 	bl	800155c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7ff fc28 	bl	800155c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e180      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d019      	beq.n	8001d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fc0c 	bl	800155c <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fc08 	bl	800155c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e160      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fa9c 	bl	80022a4 <RCC_Delay>
 8001d6c:	e01c      	b.n	8001da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_RCC_OscConfig+0x274>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff fbf2 	bl	800155c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00f      	b.n	8001d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fbee 	bl	800155c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e146      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	42420000 	.word	0x42420000
 8001d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e9      	bne.n	8001d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80a6 	beq.w	8001f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10d      	bne.n	8001de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b88      	ldr	r3, [pc, #544]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a87      	ldr	r2, [pc, #540]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b85      	ldr	r3, [pc, #532]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	4b82      	ldr	r3, [pc, #520]	@ (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dee:	4b7f      	ldr	r3, [pc, #508]	@ (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fbaf 	bl	800155c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e02:	f7ff fbab 	bl	800155c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	@ 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e103      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	4b75      	ldr	r3, [pc, #468]	@ (8001fec <HAL_RCC_OscConfig+0x4c8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x312>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e02d      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a69      	ldr	r2, [pc, #420]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a66      	ldr	r2, [pc, #408]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	e01c      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x356>
 8001e60:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a60      	ldr	r2, [pc, #384]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b58      	ldr	r3, [pc, #352]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a57      	ldr	r2, [pc, #348]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fb5f 	bl	800155c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff fb5b 	bl	800155c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0b1      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x37e>
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb49 	bl	800155c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff fb45 	bl	800155c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e09b      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	4b40      	ldr	r3, [pc, #256]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a3b      	ldr	r2, [pc, #236]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	4b36      	ldr	r3, [pc, #216]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d061      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d146      	bne.n	8001fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fb19 	bl	800155c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7ff fb15 	bl	800155c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e06d      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f56:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4921      	ldr	r1, [pc, #132]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a19      	ldr	r1, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	491b      	ldr	r1, [pc, #108]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fae9 	bl	800155c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff fae5 	bl	800155c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e03d      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46a>
 8001fac:	e035      	b.n	800201a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_RCC_OscConfig+0x4cc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fad2 	bl	800155c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff face 	bl	800155c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e026      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x498>
 8001fda:	e01e      	b.n	800201a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e019      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_RCC_OscConfig+0x500>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000

08002028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0d0      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b67      	ldr	r3, [pc, #412]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4965      	ldr	r1, [pc, #404]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a58      	ldr	r2, [pc, #352]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800208e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a52      	ldr	r2, [pc, #328]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d040      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b41      	ldr	r3, [pc, #260]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e073      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4936      	ldr	r1, [pc, #216]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7ff fa20 	bl	800155c <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7ff fa1c 	bl	800155c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e053      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d210      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4922      	ldr	r1, [pc, #136]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f821 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <HAL_RCC_ClockConfig+0x1cc>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1d0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f97e 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08002b34 	.word	0x08002b34
 80021f4:	2000003c 	.word	0x2000003c
 80021f8:	20000040 	.word	0x20000040

080021fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x94>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b04      	cmp	r3, #4
 8002224:	d002      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x30>
 8002226:	2b08      	cmp	r3, #8
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x36>
 800222a:	e027      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800222c:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x98>)
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	e027      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d010      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x94>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0c5b      	lsrs	r3, r3, #17
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	4a11      	ldr	r2, [pc, #68]	@ (800229c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x98>)
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e004      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	613b      	str	r3, [r7, #16]
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x98>)
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	693b      	ldr	r3, [r7, #16]
}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	007a1200 	.word	0x007a1200
 8002298:	08002b44 	.word	0x08002b44
 800229c:	08002b54 	.word	0x08002b54
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <RCC_Delay+0x34>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <RCC_Delay+0x38>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c0:	bf00      	nop
  }
  while (Delay --);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <RCC_Delay+0x1c>
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	2000003c 	.word	0x2000003c
 80022dc:	10624dd3 	.word	0x10624dd3

080022e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e041      	b.n	8002376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff f83e 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 fa5c 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e03a      	b.n	800240e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_TIM_Base_Start_IT+0x98>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <HAL_TIM_Base_Start_IT+0x9c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x58>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <HAL_TIM_Base_Start_IT+0xa0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d010      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e007      	b.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40000400 	.word	0x40000400
 8002420:	40000800 	.word	0x40000800

08002424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0202 	mvn.w	r2, #2
 8002458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f998 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f98b 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f99a 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0204 	mvn.w	r2, #4
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f972 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f965 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f974 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d020      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0208 	mvn.w	r2, #8
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f94c 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f93f 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f94e 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f926 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f919 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f928 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0201 	mvn.w	r2, #1
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fe64 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa7f 	bl	8002ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8f8 	bl	80027c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0220 	mvn.w	r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa52 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIM_ConfigClockSource+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e0b4      	b.n	800278a <HAL_TIM_ConfigClockSource+0x186>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800263e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002658:	d03e      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xd4>
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265e:	f200 8087 	bhi.w	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002666:	f000 8086 	beq.w	8002776 <HAL_TIM_ConfigClockSource+0x172>
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266e:	d87f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b70      	cmp	r3, #112	@ 0x70
 8002672:	d01a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xa6>
 8002674:	2b70      	cmp	r3, #112	@ 0x70
 8002676:	d87b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b60      	cmp	r3, #96	@ 0x60
 800267a:	d050      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x11a>
 800267c:	2b60      	cmp	r3, #96	@ 0x60
 800267e:	d877      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b50      	cmp	r3, #80	@ 0x50
 8002682:	d03c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xfa>
 8002684:	2b50      	cmp	r3, #80	@ 0x50
 8002686:	d873      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b40      	cmp	r3, #64	@ 0x40
 800268a:	d058      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x13a>
 800268c:	2b40      	cmp	r3, #64	@ 0x40
 800268e:	d86f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b30      	cmp	r3, #48	@ 0x30
 8002692:	d064      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 8002694:	2b30      	cmp	r3, #48	@ 0x30
 8002696:	d86b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d060      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d867      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05c      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d05a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a8:	e062      	b.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	f000 f974 	bl	80029a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
      break;
 80026d6:	e04f      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	f000 f95d 	bl	80029a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e03c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f8d4 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2150      	movs	r1, #80	@ 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f92b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800271c:	e02c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f8f2 	bl	8002914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2160      	movs	r1, #96	@ 0x60
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f91b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800273c:	e01c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274a:	461a      	mov	r2, r3
 800274c:	f000 f8b4 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2140      	movs	r1, #64	@ 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f90b 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800275c:	e00c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 f902 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800276e:	e003      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e000      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a2f      	ldr	r2, [pc, #188]	@ (80028ac <TIM_Base_SetConfig+0xd0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00b      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fa:	d007      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <TIM_Base_SetConfig+0xd4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a2b      	ldr	r2, [pc, #172]	@ (80028b4 <TIM_Base_SetConfig+0xd8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <TIM_Base_SetConfig+0xd0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <TIM_Base_SetConfig+0xd4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <TIM_Base_SetConfig+0xd8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <TIM_Base_SetConfig+0xd0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f023 0201 	bic.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
  }
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800

080028b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 030a 	bic.w	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 0210 	bic.w	r2, r3, #16
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800293e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002950:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 0307 	orr.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e046      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a16      	ldr	r2, [pc, #88]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a48:	d009      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a12      	ldr	r2, [pc, #72]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <memset>:
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4402      	add	r2, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	@ (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	@ (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 f81a 	bl	8002b1c <_init>
 8002ae8:	2600      	movs	r6, #0
 8002aea:	4d0a      	ldr	r5, [pc, #40]	@ (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	@ (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b58 	.word	0x08002b58
 8002b10:	08002b58 	.word	0x08002b58
 8002b14:	08002b58 	.word	0x08002b58
 8002b18:	08002b5c 	.word	0x08002b5c

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
