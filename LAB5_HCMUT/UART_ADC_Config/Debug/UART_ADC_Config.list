
UART_ADC_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800371c  0800371c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800371c  0800371c  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800371c  0800371c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800371c  0800371c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003724  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003780  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003780  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e9  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c72  00000000  00000000  0000e56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  000101e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000666  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017971  00000000  00000000  000110a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acc6  00000000  00000000  00028a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000874f7  00000000  00000000  000336dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000babd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  000bac18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000bd1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800369c 	.word	0x0800369c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800369c 	.word	0x0800369c

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t response[30];

uint8_t temp = 0; // buffer

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a08      	ldr	r2, [pc, #32]	@ (800017c <HAL_UART_RxCpltCallback+0x30>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d10a      	bne.n	8000174 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 800015e:	2332      	movs	r3, #50	@ 0x32
 8000160:	2201      	movs	r2, #1
 8000162:	4907      	ldr	r1, [pc, #28]	@ (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000164:	4807      	ldr	r0, [pc, #28]	@ (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000166:	f001 ffbb 	bl	80020e0 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	4904      	ldr	r1, [pc, #16]	@ (8000180 <HAL_UART_RxCpltCallback+0x34>)
 800016e:	4805      	ldr	r0, [pc, #20]	@ (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000170:	f002 f841 	bl	80021f6 <HAL_UART_Receive_IT>
	}
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40004400 	.word	0x40004400
 8000180:	2000010e 	.word	0x2000010e
 8000184:	200000a8 	.word	0x200000a8

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 fa95 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f839 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f8ef 	bl	8000378 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f8c3 	bl	8000324 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800019e:	f000 f883 	bl	80002a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001a2:	2201      	movs	r2, #1
 80001a4:	4912      	ldr	r1, [pc, #72]	@ (80001f0 <main+0x68>)
 80001a6:	4813      	ldr	r0, [pc, #76]	@ (80001f4 <main+0x6c>)
 80001a8:	f002 f825 	bl	80021f6 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 80001ac:	4812      	ldr	r0, [pc, #72]	@ (80001f8 <main+0x70>)
 80001ae:	f000 fbe3 	bl	8000978 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int ADC_value = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(Blink_Led_GPIO_Port, Blink_Led_Pin);
 80001b6:	2120      	movs	r1, #32
 80001b8:	4810      	ldr	r0, [pc, #64]	@ (80001fc <main+0x74>)
 80001ba:	f001 fa61 	bl	8001680 <HAL_GPIO_TogglePin>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 80001be:	480e      	ldr	r0, [pc, #56]	@ (80001f8 <main+0x70>)
 80001c0:	f000 fc88 	bl	8000ad4 <HAL_ADC_GetValue>
 80001c4:	4603      	mov	r3, r0
 80001c6:	607b      	str	r3, [r7, #4]
	  snprintf((char*)response, sizeof(response), "%lu \r\n",(uint32_t) ADC_value);
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000200 <main+0x78>)
 80001cc:	211e      	movs	r1, #30
 80001ce:	480d      	ldr	r0, [pc, #52]	@ (8000204 <main+0x7c>)
 80001d0:	f002 fda0 	bl	8002d14 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) response, sizeof(response), 1000);
 80001d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d8:	221e      	movs	r2, #30
 80001da:	490a      	ldr	r1, [pc, #40]	@ (8000204 <main+0x7c>)
 80001dc:	4805      	ldr	r0, [pc, #20]	@ (80001f4 <main+0x6c>)
 80001de:	f001 ff7f 	bl	80020e0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80001e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e6:	f000 facb 	bl	8000780 <HAL_Delay>
	  HAL_GPIO_TogglePin(Blink_Led_GPIO_Port, Blink_Led_Pin);
 80001ea:	bf00      	nop
 80001ec:	e7e3      	b.n	80001b6 <main+0x2e>
 80001ee:	bf00      	nop
 80001f0:	2000010e 	.word	0x2000010e
 80001f4:	200000a8 	.word	0x200000a8
 80001f8:	20000078 	.word	0x20000078
 80001fc:	40010800 	.word	0x40010800
 8000200:	080036b4 	.word	0x080036b4
 8000204:	200000f0 	.word	0x200000f0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	@ 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fdb2 	bl	8002d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2302      	movs	r3, #2
 800023a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000240:	2310      	movs	r3, #16
 8000242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000244:	2300      	movs	r3, #0
 8000246:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800024c:	4618      	mov	r0, r3
 800024e:	f001 fa31 	bl	80016b4 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000258:	f000 f8c0 	bl	80003dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000260:	2300      	movs	r3, #0
 8000262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fc9e 	bl	8001bb8 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000282:	f000 f8ab 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000286:	2302      	movs	r3, #2
 8000288:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fe1f 	bl	8001ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800029c:	f000 f89e 	bl	80003dc <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3750      	adds	r7, #80	@ 0x50
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b8:	4b18      	ldr	r3, [pc, #96]	@ (800031c <MX_ADC1_Init+0x74>)
 80002ba:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <MX_ADC1_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002be:	4b17      	ldr	r3, [pc, #92]	@ (800031c <MX_ADC1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <MX_ADC1_Init+0x74>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ca:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_ADC1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_ADC1_Init+0x74>)
 80002d2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d8:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_ADC1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_ADC1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e4:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_ADC1_Init+0x74>)
 80002e6:	f000 fa6f 	bl	80007c8 <HAL_ADC_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f000 f874 	bl	80003dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_ADC1_Init+0x74>)
 8000306:	f000 fcc3 	bl	8000c90 <HAL_ADC_ConfigChannel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000310:	f000 f864 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000078 	.word	0x20000078
 8000320:	40012400 	.word	0x40012400

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	@ (8000374 <MX_USART2_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 8000330:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <MX_USART2_UART_Init+0x4c>)
 800035c:	f001 fe70 	bl	8002040 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f839 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000a8 	.word	0x200000a8
 8000374:	40004400 	.word	0x40004400

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <MX_GPIO_Init+0x5c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a10      	ldr	r2, [pc, #64]	@ (80003d4 <MX_GPIO_Init+0x5c>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <MX_GPIO_Init+0x5c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_Led_GPIO_Port, Blink_Led_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2120      	movs	r1, #32
 80003a8:	480b      	ldr	r0, [pc, #44]	@ (80003d8 <MX_GPIO_Init+0x60>)
 80003aa:	f001 f951 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Led_Pin */
  GPIO_InitStruct.Pin = Blink_Led_Pin;
 80003ae:	2320      	movs	r3, #32
 80003b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Blink_Led_GPIO_Port, &GPIO_InitStruct);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <MX_GPIO_Init+0x60>)
 80003c6:	f000 ffbf 	bl	8001348 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <Error_Handler+0x8>

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	@ (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <HAL_ADC_MspInit+0x7c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d129      	bne.n	80004c0 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800046c:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a16      	ldr	r2, [pc, #88]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <HAL_ADC_MspInit+0x80>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4809      	ldr	r0, [pc, #36]	@ (80004d0 <HAL_ADC_MspInit+0x84>)
 80004ac:	f000 ff4c 	bl	8001348 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2012      	movs	r0, #18
 80004b6:	f000 fe5e 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004ba:	2012      	movs	r0, #18
 80004bc:	f000 fe77 	bl	80011ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012400 	.word	0x40012400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <HAL_UART_MspInit+0x98>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d137      	bne.n	8000564 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004fe:	61d3      	str	r3, [r2, #28]
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <HAL_UART_MspInit+0x9c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000524:	2304      	movs	r3, #4
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	480f      	ldr	r0, [pc, #60]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 8000538:	f000 ff06 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800053c:	2308      	movs	r3, #8
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	@ (8000574 <HAL_UART_MspInit+0xa0>)
 8000550:	f000 fefa 	bl	8001348 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2026      	movs	r0, #38	@ 0x26
 800055a:	f000 fe0c 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800055e:	2026      	movs	r0, #38	@ 0x26
 8000560:	f000 fe25 	bl	80011ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40004400 	.word	0x40004400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <NMI_Handler+0x4>

08000580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <HardFault_Handler+0x4>

08000588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <MemManage_Handler+0x4>

08000590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <UsageFault_Handler+0x4>

080005a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c8:	f000 f8be 	bl	8000748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005d4:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <ADC1_2_IRQHandler+0x10>)
 80005d6:	f000 fa89 	bl	8000aec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000078 	.word	0x20000078

080005e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <USART2_IRQHandler+0x10>)
 80005ea:	f001 fe29 	bl	8002240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000a8 	.word	0x200000a8

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f002 fbb2 	bl	8002d90 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	@ (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20005000 	.word	0x20005000
 8000658:	00000400 	.word	0x00000400
 800065c:	20000110 	.word	0x20000110
 8000660:	20000260 	.word	0x20000260

08000664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff fff8 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800068c:	4c09      	ldr	r4, [pc, #36]	@ (80006b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fb7f 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fd73 	bl	8000188 <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006ac:	08003724 	.word	0x08003724
  ldr r2, =_sbss
 80006b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b4:	20000260 	.word	0x20000260

080006b8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <CAN1_RX1_IRQHandler>
	...

080006bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_Init+0x28>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <HAL_Init+0x28>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 fd47 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f808 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d8:	f7ff fe86 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <HAL_InitTick+0x54>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <HAL_InitTick+0x58>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000702:	fbb2 f3f3 	udiv	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fd5f 	bl	80011ca <HAL_SYSTICK_Config>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e00e      	b.n	8000734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d80a      	bhi.n	8000732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	f04f 30ff 	mov.w	r0, #4294967295
 8000724:	f000 fd27 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000728:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <HAL_InitTick+0x5c>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	e000      	b.n	8000734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000000 	.word	0x20000000
 8000740:	20000008 	.word	0x20000008
 8000744:	20000004 	.word	0x20000004

08000748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_IncTick+0x1c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_IncTick+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4413      	add	r3, r2
 8000758:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <HAL_IncTick+0x20>)
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000008 	.word	0x20000008
 8000768:	20000114 	.word	0x20000114

0800076c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return uwTick;
 8000770:	4b02      	ldr	r3, [pc, #8]	@ (800077c <HAL_GetTick+0x10>)
 8000772:	681b      	ldr	r3, [r3, #0]
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000114 	.word	0x20000114

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff fff0 	bl	800076c <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_Delay+0x44>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffe0 	bl	800076c <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008

080007c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e0be      	b.n	8000968 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d109      	bne.n	800080c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe20 	bl	800044c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 fb91 	bl	8000f34 <ADC_ConversionStop_Disable>
 8000812:	4603      	mov	r3, r0
 8000814:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8099 	bne.w	8000956 <HAL_ADC_Init+0x18e>
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b00      	cmp	r3, #0
 8000828:	f040 8095 	bne.w	8000956 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000830:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000834:	f023 0302 	bic.w	r3, r3, #2
 8000838:	f043 0202 	orr.w	r2, r3, #2
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000848:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7b1b      	ldrb	r3, [r3, #12]
 800084e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000850:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	4313      	orrs	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000860:	d003      	beq.n	800086a <HAL_ADC_Init+0xa2>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d102      	bne.n	8000870 <HAL_ADC_Init+0xa8>
 800086a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800086e:	e000      	b.n	8000872 <HAL_ADC_Init+0xaa>
 8000870:	2300      	movs	r3, #0
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7d1b      	ldrb	r3, [r3, #20]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d119      	bne.n	80008b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7b1b      	ldrb	r3, [r3, #12]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d109      	bne.n	800089c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	3b01      	subs	r3, #1
 800088e:	035a      	lsls	r2, r3, #13
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	e00b      	b.n	80008b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a0:	f043 0220 	orr.w	r2, r3, #32
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ac:	f043 0201 	orr.w	r2, r3, #1
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	430a      	orrs	r2, r1
 80008c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <HAL_ADC_Init+0x1a8>)
 80008d0:	4013      	ands	r3, r2
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	68b9      	ldr	r1, [r7, #8]
 80008d8:	430b      	orrs	r3, r1
 80008da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008e4:	d003      	beq.n	80008ee <HAL_ADC_Init+0x126>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d104      	bne.n	80008f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	051b      	lsls	r3, r3, #20
 80008f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	430a      	orrs	r2, r1
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_ADC_Init+0x1ac>)
 8000914:	4013      	ands	r3, r2
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	429a      	cmp	r2, r3
 800091a:	d10b      	bne.n	8000934 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000926:	f023 0303 	bic.w	r3, r3, #3
 800092a:	f043 0201 	orr.w	r2, r3, #1
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000932:	e018      	b.n	8000966 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000938:	f023 0312 	bic.w	r3, r3, #18
 800093c:	f043 0210 	orr.w	r2, r3, #16
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000948:	f043 0201 	orr.w	r2, r3, #1
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000954:	e007      	b.n	8000966 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800095a:	f043 0210 	orr.w	r2, r3, #16
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000966:	7dfb      	ldrb	r3, [r7, #23]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	ffe1f7fd 	.word	0xffe1f7fd
 8000974:	ff1f0efe 	.word	0xff1f0efe

08000978 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800098a:	2b01      	cmp	r3, #1
 800098c:	d101      	bne.n	8000992 <HAL_ADC_Start+0x1a>
 800098e:	2302      	movs	r3, #2
 8000990:	e098      	b.n	8000ac4 <HAL_ADC_Start+0x14c>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 fa70 	bl	8000e80 <ADC_Enable>
 80009a0:	4603      	mov	r3, r0
 80009a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8087 	bne.w	8000aba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009b4:	f023 0301 	bic.w	r3, r3, #1
 80009b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a41      	ldr	r2, [pc, #260]	@ (8000acc <HAL_ADC_Start+0x154>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d105      	bne.n	80009d6 <HAL_ADC_Start+0x5e>
 80009ca:	4b41      	ldr	r3, [pc, #260]	@ (8000ad0 <HAL_ADC_Start+0x158>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d115      	bne.n	8000a02 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009da:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d026      	beq.n	8000a3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a00:	e01d      	b.n	8000a3e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad0 <HAL_ADC_Start+0x158>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d004      	beq.n	8000a22 <HAL_ADC_Start+0xaa>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8000acc <HAL_ADC_Start+0x154>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10d      	bne.n	8000a3e <HAL_ADC_Start+0xc6>
 8000a22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <HAL_ADC_Start+0x158>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	f023 0206 	bic.w	r2, r3, #6
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a56:	e002      	b.n	8000a5e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f06f 0202 	mvn.w	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a7e:	d113      	bne.n	8000aa8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a84:	4a11      	ldr	r2, [pc, #68]	@ (8000acc <HAL_ADC_Start+0x154>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d105      	bne.n	8000a96 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_ADC_Start+0x158>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d108      	bne.n	8000aa8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	e00c      	b.n	8000ac2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	e003      	b.n	8000ac2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40012800 	.word	0x40012800
 8000ad0:	40012400 	.word	0x40012400

08000ad4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d03e      	beq.n	8000b8c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d039      	beq.n	8000b8c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d105      	bne.n	8000b30 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b3e:	d11d      	bne.n	8000b7c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d119      	bne.n	8000b7c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 0220 	bic.w	r2, r2, #32
 8000b56:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d105      	bne.n	8000b7c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b74:	f043 0201 	orr.w	r2, r3, #1
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f874 	bl	8000c6a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f06f 0212 	mvn.w	r2, #18
 8000b8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d04d      	beq.n	8000c32 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d048      	beq.n	8000c32 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000bc2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000bc6:	d012      	beq.n	8000bee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d125      	bne.n	8000c22 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000be0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000be4:	d11d      	bne.n	8000c22 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d119      	bne.n	8000c22 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bfc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d105      	bne.n	8000c22 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1a:	f043 0201 	orr.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f9c7 	bl	8000fb6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f06f 020c 	mvn.w	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d012      	beq.n	8000c62 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00d      	beq.n	8000c62 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f812 	bl	8000c7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f06f 0201 	mvn.w	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d101      	bne.n	8000cb0 <HAL_ADC_ConfigChannel+0x20>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e0dc      	b.n	8000e6a <HAL_ADC_ConfigChannel+0x1da>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b06      	cmp	r3, #6
 8000cbe:	d81c      	bhi.n	8000cfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b05      	subs	r3, #5
 8000cd2:	221f      	movs	r2, #31
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4019      	ands	r1, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b05      	subs	r3, #5
 8000cec:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf8:	e03c      	b.n	8000d74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b0c      	cmp	r3, #12
 8000d00:	d81c      	bhi.n	8000d3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	3b23      	subs	r3, #35	@ 0x23
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	4019      	ands	r1, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b23      	subs	r3, #35	@ 0x23
 8000d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	430a      	orrs	r2, r1
 8000d38:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d3a:	e01b      	b.n	8000d74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3b41      	subs	r3, #65	@ 0x41
 8000d4e:	221f      	movs	r2, #31
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4019      	ands	r1, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	3b41      	subs	r3, #65	@ 0x41
 8000d68:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b09      	cmp	r3, #9
 8000d7a:	d91c      	bls.n	8000db6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68d9      	ldr	r1, [r3, #12]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b1e      	subs	r3, #30
 8000d8e:	2207      	movs	r2, #7
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4019      	ands	r1, r3
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	6898      	ldr	r0, [r3, #8]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	3b1e      	subs	r3, #30
 8000da8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	e019      	b.n	8000dea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6919      	ldr	r1, [r3, #16]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4019      	ands	r1, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	fa00 f203 	lsl.w	r2, r0, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b10      	cmp	r3, #16
 8000df0:	d003      	beq.n	8000dfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df6:	2b11      	cmp	r3, #17
 8000df8:	d132      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000e74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d125      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d126      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d11a      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a13      	ldr	r2, [pc, #76]	@ (8000e7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9a      	lsrs	r2, r3, #18
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e40:	e002      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f9      	bne.n	8000e42 <HAL_ADC_ConfigChannel+0x1b2>
 8000e4e:	e007      	b.n	8000e60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e54:	f043 0220 	orr.w	r2, r3, #32
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40012400 	.word	0x40012400
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	431bde83 	.word	0x431bde83

08000e80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d040      	beq.n	8000f20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <ADC_Enable+0xac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f30 <ADC_Enable+0xb0>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ebc:	e002      	b.n	8000ec4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f9      	bne.n	8000ebe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eca:	f7ff fc4f 	bl	800076c <HAL_GetTick>
 8000ece:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ed0:	e01f      	b.n	8000f12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ed2:	f7ff fc4b 	bl	800076c <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d918      	bls.n	8000f12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d011      	beq.n	8000f12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef2:	f043 0210 	orr.w	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e007      	b.n	8000f22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d1d8      	bne.n	8000ed2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	431bde83 	.word	0x431bde83

08000f34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d12e      	bne.n	8000fac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f5e:	f7ff fc05 	bl	800076c <HAL_GetTick>
 8000f62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f64:	e01b      	b.n	8000f9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f66:	f7ff fc01 	bl	800076c <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d914      	bls.n	8000f9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10d      	bne.n	8000f9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f86:	f043 0210 	orr.w	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f92:	f043 0201 	orr.w	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e007      	b.n	8000fae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d0dc      	beq.n	8000f66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4906      	ldr	r1, [pc, #24]	@ (8001060 <__NVIC_EnableIRQ+0x34>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	@ (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff90 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff2d 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff42 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff35 	bl	800102c <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d008      	beq.n	800120c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2204      	movs	r2, #4
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e020      	b.n	800124e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 020e 	bic.w	r2, r2, #14
 800121a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d005      	beq.n	800127c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2204      	movs	r2, #4
 8001274:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e051      	b.n	8001320 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 020e 	bic.w	r2, r2, #14
 800128a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a22      	ldr	r2, [pc, #136]	@ (800132c <HAL_DMA_Abort_IT+0xd4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d029      	beq.n	80012fa <HAL_DMA_Abort_IT+0xa2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <HAL_DMA_Abort_IT+0xd8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d022      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x9e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001334 <HAL_DMA_Abort_IT+0xdc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01a      	beq.n	80012f0 <HAL_DMA_Abort_IT+0x98>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1e      	ldr	r2, [pc, #120]	@ (8001338 <HAL_DMA_Abort_IT+0xe0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d012      	beq.n	80012ea <HAL_DMA_Abort_IT+0x92>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HAL_DMA_Abort_IT+0xe4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00a      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x8c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001340 <HAL_DMA_Abort_IT+0xe8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d102      	bne.n	80012de <HAL_DMA_Abort_IT+0x86>
 80012d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012dc:	e00e      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012e2:	e00b      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012e8:	e008      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ee:	e005      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f4:	e002      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012f6:	2310      	movs	r3, #16
 80012f8:	e000      	b.n	80012fc <HAL_DMA_Abort_IT+0xa4>
 80012fa:	2301      	movs	r3, #1
 80012fc:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_DMA_Abort_IT+0xec>)
 80012fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
    } 
  }
  return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40020008 	.word	0x40020008
 8001330:	4002001c 	.word	0x4002001c
 8001334:	40020030 	.word	0x40020030
 8001338:	40020044 	.word	0x40020044
 800133c:	40020058 	.word	0x40020058
 8001340:	4002006c 	.word	0x4002006c
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e169      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8158 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a9a      	ldr	r2, [pc, #616]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4a98      	ldr	r2, [pc, #608]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4a98      	ldr	r2, [pc, #608]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a96      	ldr	r2, [pc, #600]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a94      	ldr	r2, [pc, #592]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a92      	ldr	r2, [pc, #584]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a90      	ldr	r2, [pc, #576]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a79      	ldr	r2, [pc, #484]	@ (80015fc <HAL_GPIO_Init+0x2b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	@ 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	@ 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b1 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a48      	ldr	r2, [pc, #288]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_GPIO_Init+0x2c0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3f      	ldr	r2, [pc, #252]	@ (800160c <HAL_GPIO_Init+0x2c4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1e8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3e      	ldr	r2, [pc, #248]	@ (8001610 <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3d      	ldr	r2, [pc, #244]	@ (8001614 <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1e0>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001528:	2304      	movs	r3, #4
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492c      	ldr	r1, [pc, #176]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4928      	ldr	r1, [pc, #160]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491e      	ldr	r1, [pc, #120]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4918      	ldr	r1, [pc, #96]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4914      	ldr	r1, [pc, #80]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x2e2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_GPIO_Init+0x304>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	@ (800164c <HAL_GPIO_Init+0x304>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae8e 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	@ 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4013      	ands	r3, r2
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43d9      	mvns	r1, r3
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	400b      	ands	r3, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e272      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d00c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
 80016ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x12c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d168      	bne.n	80017e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e24c      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
 800171c:	4b80      	ldr	r3, [pc, #512]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7f      	ldr	r2, [pc, #508]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b7b      	ldr	r3, [pc, #492]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7a      	ldr	r2, [pc, #488]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a77      	ldr	r2, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a71      	ldr	r2, [pc, #452]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 8001770:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a67      	ldr	r2, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7fe ffec 	bl	800076c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7fe ffe8 	bl	800076c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e200      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xe4>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7fe ffd8 	bl	800076c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7fe ffd4 	bl	800076c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1ec      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x10c>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fa:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
 8001806:	4b46      	ldr	r3, [pc, #280]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c0      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4939      	ldr	r1, [pc, #228]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7fe ff8d 	bl	800076c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7fe ff89 	bl	800076c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4927      	ldr	r1, [pc, #156]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7fe ff6c 	bl	800076c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7fe ff68 	bl	800076c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e180      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03a      	beq.n	8001938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7fe ff4c 	bl	800076c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7fe ff48 	bl	800076c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e160      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 face 	bl	8001e98 <RCC_Delay>
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7fe ff32 	bl	800076c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7fe ff2e 	bl	800076c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d908      	bls.n	800192c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e146      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	42420000 	.word	0x42420000
 8001928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e9      	bne.n	800190c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a6 	beq.w	8001a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a87      	ldr	r2, [pc, #540]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b82      	ldr	r3, [pc, #520]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7fe feef 	bl	800076c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7fe feeb 	bl	800076c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e103      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e02d      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x334>
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	e01c      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x356>
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a60      	ldr	r2, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe fe9f 	bl	800076c <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe fe9b 	bl	800076c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0b1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCC_OscConfig+0x37e>
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7fe fe89 	bl	800076c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7fe fe85 	bl	800076c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e09b      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d061      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d146      	bne.n	8001b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe fe59 	bl	800076c <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7fe fe55 	bl	800076c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e06d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4921      	ldr	r1, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a19      	ldr	r1, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	491b      	ldr	r1, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe fe29 	bl	800076c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fe25 	bl	800076c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46a>
 8001b3c:	e035      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fe12 	bl	800076c <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe fe0e 	bl	800076c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e026      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x498>
 8001b6a:	e01e      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e019      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_OscConfig+0x500>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7fe fd60 	bl	800076c <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7fe fd5c 	bl	800076c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fcbe 	bl	80006e8 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080036bc 	.word	0x080036bc
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb03 f202 	mul.w	r2, r3, r2
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	080036d4 	.word	0x080036d4
 8001e2c:	080036e4 	.word	0x080036e4
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	080036cc 	.word	0x080036cc

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	080036cc 	.word	0x080036cc

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d07d      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef4:	4b4f      	ldr	r3, [pc, #316]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a4b      	ldr	r2, [pc, #300]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	61d3      	str	r3, [r2, #28]
 8001f0c:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b46      	ldr	r3, [pc, #280]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d118      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a42      	ldr	r2, [pc, #264]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f34:	f7fe fc1a 	bl	800076c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	e008      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3c:	f7fe fc16 	bl	800076c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e06d      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02e      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d027      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f82:	4b2e      	ldr	r3, [pc, #184]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f88:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f8e:	4a29      	ldr	r2, [pc, #164]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d014      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fbe5 	bl	800076c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7fe fbe1 	bl	800076c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e036      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4917      	ldr	r1, [pc, #92]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	4a13      	ldr	r2, [pc, #76]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	490b      	ldr	r1, [pc, #44]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4904      	ldr	r1, [pc, #16]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	42420440 	.word	0x42420440

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fa34 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fdb7 	bl	8002bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d175      	bne.n	80021ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UART_Transmit+0x2c>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e06e      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2221      	movs	r2, #33	@ 0x21
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800211e:	f7fe fb25 	bl	800076c <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	88fa      	ldrh	r2, [r7, #6]
 8002128:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002138:	d108      	bne.n	800214c <HAL_UART_Transmit+0x6c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d104      	bne.n	800214c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e003      	b.n	8002154 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002154:	e02e      	b.n	80021b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fb1c 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e03a      	b.n	80021ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800218c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3302      	adds	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e007      	b.n	80021a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1cb      	bne.n	8002156 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fae8 	bl	800279e <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	d112      	bne.n	8002236 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Receive_IT+0x26>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e00b      	b.n	8002238 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	461a      	mov	r2, r3
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 fb0f 	bl	8002850 <UART_Start_Receive_IT>
 8002232:	4603      	mov	r3, r0
 8002234:	e000      	b.n	8002238 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b0ba      	sub	sp, #232	@ 0xe8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800227e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_UART_IRQHandler+0x66>
 8002292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fbec 	bl	8002a7c <UART_Receive_IT>
      return;
 80022a4:	e25b      	b.n	800275e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80022a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80de 	beq.w	800246c <HAL_UART_IRQHandler+0x22c>
 80022b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80d1 	beq.w	800246c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0xae>
 80022d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0xd2>
 80022fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f043 0202 	orr.w	r2, r3, #2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_UART_IRQHandler+0xf6>
 800231e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f043 0204 	orr.w	r2, r3, #4
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d011      	beq.n	8002366 <HAL_UART_IRQHandler+0x126>
 8002342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800234e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f043 0208 	orr.w	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 81f2 	beq.w	8002754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_UART_IRQHandler+0x14e>
 800237c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fb77 	bl	8002a7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_UART_IRQHandler+0x17a>
 80023b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04f      	beq.n	800245a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa81 	bl	80028c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d041      	beq.n	8002452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3314      	adds	r3, #20
 80023d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023dc:	e853 3f00 	ldrex	r3, [r3]
 80023e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3314      	adds	r3, #20
 80023f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800240a:	e841 2300 	strex	r3, r2, [r1]
 800240e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1d9      	bne.n	80023ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002426:	4a7e      	ldr	r2, [pc, #504]	@ (8002620 <HAL_UART_IRQHandler+0x3e0>)
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe ff12 	bl	8001258 <HAL_DMA_Abort_IT>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002444:	4610      	mov	r0, r2
 8002446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	e00e      	b.n	8002468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f993 	bl	8002776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002450:	e00a      	b.n	8002468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f98f 	bl	8002776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002458:	e006      	b.n	8002468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f98b 	bl	8002776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002466:	e175      	b.n	8002754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002468:	bf00      	nop
    return;
 800246a:	e173      	b.n	8002754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002470:	2b01      	cmp	r3, #1
 8002472:	f040 814f 	bne.w	8002714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8148 	beq.w	8002714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8141 	beq.w	8002714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80b6 	beq.w	8002624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8145 	beq.w	8002758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f080 813e 	bcs.w	8002758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f000 8088 	beq.w	8002600 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002506:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800250a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800250e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800251c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002524:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002528:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800252c:	e841 2300 	strex	r3, r2, [r1]
 8002530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1d9      	bne.n	80024f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800254c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002560:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002564:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002568:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002572:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e1      	bne.n	800253c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800258a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3314      	adds	r3, #20
 8002598:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800259c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800259e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80025aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e3      	bne.n	8002578 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025d0:	f023 0310 	bic.w	r3, r3, #16
 80025d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e3      	bne.n	80025be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fdf1 	bl	80011e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800260e:	b29b      	uxth	r3, r3
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	b29b      	uxth	r3, r3
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8b6 	bl	8002788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800261c:	e09c      	b.n	8002758 <HAL_UART_IRQHandler+0x518>
 800261e:	bf00      	nop
 8002620:	08002987 	.word	0x08002987
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800262c:	b29b      	uxth	r3, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808e 	beq.w	800275c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8089 	beq.w	800275c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	330c      	adds	r3, #12
 8002650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800266e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002676:	e841 2300 	strex	r3, r2, [r1]
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800267c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e3      	bne.n	800264a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3314      	adds	r3, #20
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	623b      	str	r3, [r7, #32]
   return(result);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3314      	adds	r3, #20
 80026a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e3      	bne.n	8002682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	e853 3f00 	ldrex	r3, [r3]
 80026d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0310 	bic.w	r3, r3, #16
 80026de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026ec:	61fa      	str	r2, [r7, #28]
 80026ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	e841 2300 	strex	r3, r2, [r1]
 80026f8:	617b      	str	r3, [r7, #20]
   return(result);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e3      	bne.n	80026c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f83b 	bl	8002788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002712:	e023      	b.n	800275c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_UART_IRQHandler+0x4f4>
 8002720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f93e 	bl	80029ae <UART_Transmit_IT>
    return;
 8002732:	e014      	b.n	800275e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <HAL_UART_IRQHandler+0x51e>
 8002740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f97d 	bl	8002a4c <UART_EndTransmit_IT>
    return;
 8002752:	e004      	b.n	800275e <HAL_UART_IRQHandler+0x51e>
    return;
 8002754:	bf00      	nop
 8002756:	e002      	b.n	800275e <HAL_UART_IRQHandler+0x51e>
      return;
 8002758:	bf00      	nop
 800275a:	e000      	b.n	800275e <HAL_UART_IRQHandler+0x51e>
      return;
 800275c:	bf00      	nop
  }
}
 800275e:	37e8      	adds	r7, #232	@ 0xe8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	e03b      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d037      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b8:	f7fd ffd8 	bl	800076c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <UART_WaitOnFlagUntilTimeout+0x30>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e03a      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d023      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b80      	cmp	r3, #128	@ 0x80
 80027e4:	d020      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d01d      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d116      	bne.n	8002828 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f856 	bl	80028c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2208      	movs	r2, #8
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00f      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d0b4      	beq.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2222      	movs	r2, #34	@ 0x22
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002894:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b095      	sub	sp, #84	@ 0x54
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80028ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e5      	bne.n	80028ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	61fb      	str	r3, [r7, #28]
   return(result);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800291e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	2b01      	cmp	r3, #1
 8002938:	d119      	bne.n	800296e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	60bb      	str	r3, [r7, #8]
   return(result);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 0310 	bic.w	r3, r3, #16
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800295a:	61ba      	str	r2, [r7, #24]
 800295c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	613b      	str	r3, [r7, #16]
   return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800297c:	bf00      	nop
 800297e:	3754      	adds	r7, #84	@ 0x54
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fee8 	bl	8002776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b21      	cmp	r3, #33	@ 0x21
 80029c0:	d13e      	bne.n	8002a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	d114      	bne.n	80029f6 <UART_Transmit_IT+0x48>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d110      	bne.n	80029f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	621a      	str	r2, [r3, #32]
 80029f4:	e008      	b.n	8002a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6211      	str	r1, [r2, #32]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe79 	bl	8002764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	@ 0x22
 8002a8e:	f040 80ae 	bne.w	8002bee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9a:	d117      	bne.n	8002acc <UART_Receive_IT+0x50>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d113      	bne.n	8002acc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	1c9a      	adds	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aca:	e026      	b.n	8002b1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ade:	d007      	beq.n	8002af0 <UART_Receive_IT+0x74>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <UART_Receive_IT+0x82>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e008      	b.n	8002b10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4619      	mov	r1, r3
 8002b28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d15d      	bne.n	8002bea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0220 	bic.w	r2, r2, #32
 8002b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d135      	bne.n	8002be0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f023 0310 	bic.w	r3, r3, #16
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	623a      	str	r2, [r7, #32]
 8002b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e5      	bne.n	8002b7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d10a      	bne.n	8002bd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fdd5 	bl	8002788 <HAL_UARTEx_RxEventCallback>
 8002bde:	e002      	b.n	8002be6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd fab3 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e002      	b.n	8002bf0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3730      	adds	r7, #48	@ 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c32:	f023 030c 	bic.w	r3, r3, #12
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d0c <UART_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c60:	f7ff f906 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	e002      	b.n	8002c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7ff f8ee 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <UART_SetConfig+0x118>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	0119      	lsls	r1, r3, #4
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <UART_SetConfig+0x118>)
 8002ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2064      	movs	r0, #100	@ 0x64
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	@ 0x32
 8002cb8:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc4:	4419      	add	r1, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	@ 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	@ 0x32
 8002cf0:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	440a      	add	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	51eb851f 	.word	0x51eb851f

08002d14 <sniprintf>:
 8002d14:	b40c      	push	{r2, r3}
 8002d16:	b530      	push	{r4, r5, lr}
 8002d18:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <sniprintf+0x68>)
 8002d1a:	1e0c      	subs	r4, r1, #0
 8002d1c:	681d      	ldr	r5, [r3, #0]
 8002d1e:	b09d      	sub	sp, #116	@ 0x74
 8002d20:	da08      	bge.n	8002d34 <sniprintf+0x20>
 8002d22:	238b      	movs	r3, #139	@ 0x8b
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	602b      	str	r3, [r5, #0]
 8002d2a:	b01d      	add	sp, #116	@ 0x74
 8002d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d30:	b002      	add	sp, #8
 8002d32:	4770      	bx	lr
 8002d34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002d38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002d42:	bf0c      	ite	eq
 8002d44:	4623      	moveq	r3, r4
 8002d46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	9307      	str	r3, [sp, #28]
 8002d4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d52:	9002      	str	r0, [sp, #8]
 8002d54:	9006      	str	r0, [sp, #24]
 8002d56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	ab21      	add	r3, sp, #132	@ 0x84
 8002d5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002d60:	a902      	add	r1, sp, #8
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	f000 f992 	bl	800308c <_svfiprintf_r>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	bfbc      	itt	lt
 8002d6c:	238b      	movlt	r3, #139	@ 0x8b
 8002d6e:	602b      	strlt	r3, [r5, #0]
 8002d70:	2c00      	cmp	r4, #0
 8002d72:	d0da      	beq.n	8002d2a <sniprintf+0x16>
 8002d74:	2200      	movs	r2, #0
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e7d6      	b.n	8002d2a <sniprintf+0x16>
 8002d7c:	2000000c 	.word	0x2000000c

08002d80 <memset>:
 8002d80:	4603      	mov	r3, r0
 8002d82:	4402      	add	r2, r0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d100      	bne.n	8002d8a <memset+0xa>
 8002d88:	4770      	bx	lr
 8002d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d8e:	e7f9      	b.n	8002d84 <memset+0x4>

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	@ (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000000c 	.word	0x2000000c

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	2600      	movs	r6, #0
 8002da0:	4d0c      	ldr	r5, [pc, #48]	@ (8002dd4 <__libc_init_array+0x38>)
 8002da2:	4c0d      	ldr	r4, [pc, #52]	@ (8002dd8 <__libc_init_array+0x3c>)
 8002da4:	1b64      	subs	r4, r4, r5
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	f000 fc76 	bl	800369c <_init>
 8002db0:	2600      	movs	r6, #0
 8002db2:	4d0a      	ldr	r5, [pc, #40]	@ (8002ddc <__libc_init_array+0x40>)
 8002db4:	4c0a      	ldr	r4, [pc, #40]	@ (8002de0 <__libc_init_array+0x44>)
 8002db6:	1b64      	subs	r4, r4, r5
 8002db8:	10a4      	asrs	r4, r4, #2
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	0800371c 	.word	0x0800371c
 8002dd8:	0800371c 	.word	0x0800371c
 8002ddc:	0800371c 	.word	0x0800371c
 8002de0:	08003720 	.word	0x08003720

08002de4 <__retarget_lock_acquire_recursive>:
 8002de4:	4770      	bx	lr

08002de6 <__retarget_lock_release_recursive>:
 8002de6:	4770      	bx	lr

08002de8 <_free_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4605      	mov	r5, r0
 8002dec:	2900      	cmp	r1, #0
 8002dee:	d040      	beq.n	8002e72 <_free_r+0x8a>
 8002df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df4:	1f0c      	subs	r4, r1, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bfb8      	it	lt
 8002dfa:	18e4      	addlt	r4, r4, r3
 8002dfc:	f000 f8de 	bl	8002fbc <__malloc_lock>
 8002e00:	4a1c      	ldr	r2, [pc, #112]	@ (8002e74 <_free_r+0x8c>)
 8002e02:	6813      	ldr	r3, [r2, #0]
 8002e04:	b933      	cbnz	r3, 8002e14 <_free_r+0x2c>
 8002e06:	6063      	str	r3, [r4, #4]
 8002e08:	6014      	str	r4, [r2, #0]
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e10:	f000 b8da 	b.w	8002fc8 <__malloc_unlock>
 8002e14:	42a3      	cmp	r3, r4
 8002e16:	d908      	bls.n	8002e2a <_free_r+0x42>
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	1821      	adds	r1, r4, r0
 8002e1c:	428b      	cmp	r3, r1
 8002e1e:	bf01      	itttt	eq
 8002e20:	6819      	ldreq	r1, [r3, #0]
 8002e22:	685b      	ldreq	r3, [r3, #4]
 8002e24:	1809      	addeq	r1, r1, r0
 8002e26:	6021      	streq	r1, [r4, #0]
 8002e28:	e7ed      	b.n	8002e06 <_free_r+0x1e>
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	b10b      	cbz	r3, 8002e34 <_free_r+0x4c>
 8002e30:	42a3      	cmp	r3, r4
 8002e32:	d9fa      	bls.n	8002e2a <_free_r+0x42>
 8002e34:	6811      	ldr	r1, [r2, #0]
 8002e36:	1850      	adds	r0, r2, r1
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d10b      	bne.n	8002e54 <_free_r+0x6c>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	4401      	add	r1, r0
 8002e40:	1850      	adds	r0, r2, r1
 8002e42:	4283      	cmp	r3, r0
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	d1e0      	bne.n	8002e0a <_free_r+0x22>
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4408      	add	r0, r1
 8002e4e:	6010      	str	r0, [r2, #0]
 8002e50:	6053      	str	r3, [r2, #4]
 8002e52:	e7da      	b.n	8002e0a <_free_r+0x22>
 8002e54:	d902      	bls.n	8002e5c <_free_r+0x74>
 8002e56:	230c      	movs	r3, #12
 8002e58:	602b      	str	r3, [r5, #0]
 8002e5a:	e7d6      	b.n	8002e0a <_free_r+0x22>
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	1821      	adds	r1, r4, r0
 8002e60:	428b      	cmp	r3, r1
 8002e62:	bf01      	itttt	eq
 8002e64:	6819      	ldreq	r1, [r3, #0]
 8002e66:	685b      	ldreq	r3, [r3, #4]
 8002e68:	1809      	addeq	r1, r1, r0
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	6063      	str	r3, [r4, #4]
 8002e6e:	6054      	str	r4, [r2, #4]
 8002e70:	e7cb      	b.n	8002e0a <_free_r+0x22>
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
 8002e74:	2000025c 	.word	0x2000025c

08002e78 <sbrk_aligned>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002eb8 <sbrk_aligned+0x40>)
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	4605      	mov	r5, r0
 8002e82:	b911      	cbnz	r1, 8002e8a <sbrk_aligned+0x12>
 8002e84:	f000 fba8 	bl	80035d8 <_sbrk_r>
 8002e88:	6030      	str	r0, [r6, #0]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 fba3 	bl	80035d8 <_sbrk_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d103      	bne.n	8002e9e <sbrk_aligned+0x26>
 8002e96:	f04f 34ff 	mov.w	r4, #4294967295
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	1cc4      	adds	r4, r0, #3
 8002ea0:	f024 0403 	bic.w	r4, r4, #3
 8002ea4:	42a0      	cmp	r0, r4
 8002ea6:	d0f8      	beq.n	8002e9a <sbrk_aligned+0x22>
 8002ea8:	1a21      	subs	r1, r4, r0
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f000 fb94 	bl	80035d8 <_sbrk_r>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	d1f2      	bne.n	8002e9a <sbrk_aligned+0x22>
 8002eb4:	e7ef      	b.n	8002e96 <sbrk_aligned+0x1e>
 8002eb6:	bf00      	nop
 8002eb8:	20000258 	.word	0x20000258

08002ebc <_malloc_r>:
 8002ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ec0:	1ccd      	adds	r5, r1, #3
 8002ec2:	f025 0503 	bic.w	r5, r5, #3
 8002ec6:	3508      	adds	r5, #8
 8002ec8:	2d0c      	cmp	r5, #12
 8002eca:	bf38      	it	cc
 8002ecc:	250c      	movcc	r5, #12
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	4606      	mov	r6, r0
 8002ed2:	db01      	blt.n	8002ed8 <_malloc_r+0x1c>
 8002ed4:	42a9      	cmp	r1, r5
 8002ed6:	d904      	bls.n	8002ee2 <_malloc_r+0x26>
 8002ed8:	230c      	movs	r3, #12
 8002eda:	6033      	str	r3, [r6, #0]
 8002edc:	2000      	movs	r0, #0
 8002ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fb8 <_malloc_r+0xfc>
 8002ee6:	f000 f869 	bl	8002fbc <__malloc_lock>
 8002eea:	f8d8 3000 	ldr.w	r3, [r8]
 8002eee:	461c      	mov	r4, r3
 8002ef0:	bb44      	cbnz	r4, 8002f44 <_malloc_r+0x88>
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f7ff ffbf 	bl	8002e78 <sbrk_aligned>
 8002efa:	1c43      	adds	r3, r0, #1
 8002efc:	4604      	mov	r4, r0
 8002efe:	d158      	bne.n	8002fb2 <_malloc_r+0xf6>
 8002f00:	f8d8 4000 	ldr.w	r4, [r8]
 8002f04:	4627      	mov	r7, r4
 8002f06:	2f00      	cmp	r7, #0
 8002f08:	d143      	bne.n	8002f92 <_malloc_r+0xd6>
 8002f0a:	2c00      	cmp	r4, #0
 8002f0c:	d04b      	beq.n	8002fa6 <_malloc_r+0xea>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	4639      	mov	r1, r7
 8002f12:	4630      	mov	r0, r6
 8002f14:	eb04 0903 	add.w	r9, r4, r3
 8002f18:	f000 fb5e 	bl	80035d8 <_sbrk_r>
 8002f1c:	4581      	cmp	r9, r0
 8002f1e:	d142      	bne.n	8002fa6 <_malloc_r+0xea>
 8002f20:	6821      	ldr	r1, [r4, #0]
 8002f22:	4630      	mov	r0, r6
 8002f24:	1a6d      	subs	r5, r5, r1
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7ff ffa6 	bl	8002e78 <sbrk_aligned>
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d03a      	beq.n	8002fa6 <_malloc_r+0xea>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	442b      	add	r3, r5
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	f8d8 3000 	ldr.w	r3, [r8]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	bb62      	cbnz	r2, 8002f98 <_malloc_r+0xdc>
 8002f3e:	f8c8 7000 	str.w	r7, [r8]
 8002f42:	e00f      	b.n	8002f64 <_malloc_r+0xa8>
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	1b52      	subs	r2, r2, r5
 8002f48:	d420      	bmi.n	8002f8c <_malloc_r+0xd0>
 8002f4a:	2a0b      	cmp	r2, #11
 8002f4c:	d917      	bls.n	8002f7e <_malloc_r+0xc2>
 8002f4e:	1961      	adds	r1, r4, r5
 8002f50:	42a3      	cmp	r3, r4
 8002f52:	6025      	str	r5, [r4, #0]
 8002f54:	bf18      	it	ne
 8002f56:	6059      	strne	r1, [r3, #4]
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	bf08      	it	eq
 8002f5c:	f8c8 1000 	streq.w	r1, [r8]
 8002f60:	5162      	str	r2, [r4, r5]
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f82f 	bl	8002fc8 <__malloc_unlock>
 8002f6a:	f104 000b 	add.w	r0, r4, #11
 8002f6e:	1d23      	adds	r3, r4, #4
 8002f70:	f020 0007 	bic.w	r0, r0, #7
 8002f74:	1ac2      	subs	r2, r0, r3
 8002f76:	bf1c      	itt	ne
 8002f78:	1a1b      	subne	r3, r3, r0
 8002f7a:	50a3      	strne	r3, [r4, r2]
 8002f7c:	e7af      	b.n	8002ede <_malloc_r+0x22>
 8002f7e:	6862      	ldr	r2, [r4, #4]
 8002f80:	42a3      	cmp	r3, r4
 8002f82:	bf0c      	ite	eq
 8002f84:	f8c8 2000 	streq.w	r2, [r8]
 8002f88:	605a      	strne	r2, [r3, #4]
 8002f8a:	e7eb      	b.n	8002f64 <_malloc_r+0xa8>
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	6864      	ldr	r4, [r4, #4]
 8002f90:	e7ae      	b.n	8002ef0 <_malloc_r+0x34>
 8002f92:	463c      	mov	r4, r7
 8002f94:	687f      	ldr	r7, [r7, #4]
 8002f96:	e7b6      	b.n	8002f06 <_malloc_r+0x4a>
 8002f98:	461a      	mov	r2, r3
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	42a3      	cmp	r3, r4
 8002f9e:	d1fb      	bne.n	8002f98 <_malloc_r+0xdc>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6053      	str	r3, [r2, #4]
 8002fa4:	e7de      	b.n	8002f64 <_malloc_r+0xa8>
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	4630      	mov	r0, r6
 8002faa:	6033      	str	r3, [r6, #0]
 8002fac:	f000 f80c 	bl	8002fc8 <__malloc_unlock>
 8002fb0:	e794      	b.n	8002edc <_malloc_r+0x20>
 8002fb2:	6005      	str	r5, [r0, #0]
 8002fb4:	e7d6      	b.n	8002f64 <_malloc_r+0xa8>
 8002fb6:	bf00      	nop
 8002fb8:	2000025c 	.word	0x2000025c

08002fbc <__malloc_lock>:
 8002fbc:	4801      	ldr	r0, [pc, #4]	@ (8002fc4 <__malloc_lock+0x8>)
 8002fbe:	f7ff bf11 	b.w	8002de4 <__retarget_lock_acquire_recursive>
 8002fc2:	bf00      	nop
 8002fc4:	20000254 	.word	0x20000254

08002fc8 <__malloc_unlock>:
 8002fc8:	4801      	ldr	r0, [pc, #4]	@ (8002fd0 <__malloc_unlock+0x8>)
 8002fca:	f7ff bf0c 	b.w	8002de6 <__retarget_lock_release_recursive>
 8002fce:	bf00      	nop
 8002fd0:	20000254 	.word	0x20000254

08002fd4 <__ssputs_r>:
 8002fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd8:	461f      	mov	r7, r3
 8002fda:	688e      	ldr	r6, [r1, #8]
 8002fdc:	4682      	mov	sl, r0
 8002fde:	42be      	cmp	r6, r7
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	4690      	mov	r8, r2
 8002fe4:	680b      	ldr	r3, [r1, #0]
 8002fe6:	d82d      	bhi.n	8003044 <__ssputs_r+0x70>
 8002fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ff0:	d026      	beq.n	8003040 <__ssputs_r+0x6c>
 8002ff2:	6965      	ldr	r5, [r4, #20]
 8002ff4:	6909      	ldr	r1, [r1, #16]
 8002ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ffa:	eba3 0901 	sub.w	r9, r3, r1
 8002ffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003002:	1c7b      	adds	r3, r7, #1
 8003004:	444b      	add	r3, r9
 8003006:	106d      	asrs	r5, r5, #1
 8003008:	429d      	cmp	r5, r3
 800300a:	bf38      	it	cc
 800300c:	461d      	movcc	r5, r3
 800300e:	0553      	lsls	r3, r2, #21
 8003010:	d527      	bpl.n	8003062 <__ssputs_r+0x8e>
 8003012:	4629      	mov	r1, r5
 8003014:	f7ff ff52 	bl	8002ebc <_malloc_r>
 8003018:	4606      	mov	r6, r0
 800301a:	b360      	cbz	r0, 8003076 <__ssputs_r+0xa2>
 800301c:	464a      	mov	r2, r9
 800301e:	6921      	ldr	r1, [r4, #16]
 8003020:	f000 faf8 	bl	8003614 <memcpy>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800302a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	6126      	str	r6, [r4, #16]
 8003032:	444e      	add	r6, r9
 8003034:	6026      	str	r6, [r4, #0]
 8003036:	463e      	mov	r6, r7
 8003038:	6165      	str	r5, [r4, #20]
 800303a:	eba5 0509 	sub.w	r5, r5, r9
 800303e:	60a5      	str	r5, [r4, #8]
 8003040:	42be      	cmp	r6, r7
 8003042:	d900      	bls.n	8003046 <__ssputs_r+0x72>
 8003044:	463e      	mov	r6, r7
 8003046:	4632      	mov	r2, r6
 8003048:	4641      	mov	r1, r8
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	f000 faaa 	bl	80035a4 <memmove>
 8003050:	2000      	movs	r0, #0
 8003052:	68a3      	ldr	r3, [r4, #8]
 8003054:	1b9b      	subs	r3, r3, r6
 8003056:	60a3      	str	r3, [r4, #8]
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	4433      	add	r3, r6
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003062:	462a      	mov	r2, r5
 8003064:	f000 fae4 	bl	8003630 <_realloc_r>
 8003068:	4606      	mov	r6, r0
 800306a:	2800      	cmp	r0, #0
 800306c:	d1e0      	bne.n	8003030 <__ssputs_r+0x5c>
 800306e:	4650      	mov	r0, sl
 8003070:	6921      	ldr	r1, [r4, #16]
 8003072:	f7ff feb9 	bl	8002de8 <_free_r>
 8003076:	230c      	movs	r3, #12
 8003078:	f8ca 3000 	str.w	r3, [sl]
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	f04f 30ff 	mov.w	r0, #4294967295
 8003082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003086:	81a3      	strh	r3, [r4, #12]
 8003088:	e7e9      	b.n	800305e <__ssputs_r+0x8a>
	...

0800308c <_svfiprintf_r>:
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	4698      	mov	r8, r3
 8003092:	898b      	ldrh	r3, [r1, #12]
 8003094:	4607      	mov	r7, r0
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	460d      	mov	r5, r1
 800309a:	4614      	mov	r4, r2
 800309c:	b09d      	sub	sp, #116	@ 0x74
 800309e:	d510      	bpl.n	80030c2 <_svfiprintf_r+0x36>
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	b973      	cbnz	r3, 80030c2 <_svfiprintf_r+0x36>
 80030a4:	2140      	movs	r1, #64	@ 0x40
 80030a6:	f7ff ff09 	bl	8002ebc <_malloc_r>
 80030aa:	6028      	str	r0, [r5, #0]
 80030ac:	6128      	str	r0, [r5, #16]
 80030ae:	b930      	cbnz	r0, 80030be <_svfiprintf_r+0x32>
 80030b0:	230c      	movs	r3, #12
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	b01d      	add	sp, #116	@ 0x74
 80030ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030be:	2340      	movs	r3, #64	@ 0x40
 80030c0:	616b      	str	r3, [r5, #20]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80030c6:	2320      	movs	r3, #32
 80030c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030cc:	2330      	movs	r3, #48	@ 0x30
 80030ce:	f04f 0901 	mov.w	r9, #1
 80030d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003270 <_svfiprintf_r+0x1e4>
 80030da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030de:	4623      	mov	r3, r4
 80030e0:	469a      	mov	sl, r3
 80030e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030e6:	b10a      	cbz	r2, 80030ec <_svfiprintf_r+0x60>
 80030e8:	2a25      	cmp	r2, #37	@ 0x25
 80030ea:	d1f9      	bne.n	80030e0 <_svfiprintf_r+0x54>
 80030ec:	ebba 0b04 	subs.w	fp, sl, r4
 80030f0:	d00b      	beq.n	800310a <_svfiprintf_r+0x7e>
 80030f2:	465b      	mov	r3, fp
 80030f4:	4622      	mov	r2, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	4638      	mov	r0, r7
 80030fa:	f7ff ff6b 	bl	8002fd4 <__ssputs_r>
 80030fe:	3001      	adds	r0, #1
 8003100:	f000 80a7 	beq.w	8003252 <_svfiprintf_r+0x1c6>
 8003104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003106:	445a      	add	r2, fp
 8003108:	9209      	str	r2, [sp, #36]	@ 0x24
 800310a:	f89a 3000 	ldrb.w	r3, [sl]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 809f 	beq.w	8003252 <_svfiprintf_r+0x1c6>
 8003114:	2300      	movs	r3, #0
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800311e:	f10a 0a01 	add.w	sl, sl, #1
 8003122:	9304      	str	r3, [sp, #16]
 8003124:	9307      	str	r3, [sp, #28]
 8003126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800312a:	931a      	str	r3, [sp, #104]	@ 0x68
 800312c:	4654      	mov	r4, sl
 800312e:	2205      	movs	r2, #5
 8003130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003134:	484e      	ldr	r0, [pc, #312]	@ (8003270 <_svfiprintf_r+0x1e4>)
 8003136:	f000 fa5f 	bl	80035f8 <memchr>
 800313a:	9a04      	ldr	r2, [sp, #16]
 800313c:	b9d8      	cbnz	r0, 8003176 <_svfiprintf_r+0xea>
 800313e:	06d0      	lsls	r0, r2, #27
 8003140:	bf44      	itt	mi
 8003142:	2320      	movmi	r3, #32
 8003144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003148:	0711      	lsls	r1, r2, #28
 800314a:	bf44      	itt	mi
 800314c:	232b      	movmi	r3, #43	@ 0x2b
 800314e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003152:	f89a 3000 	ldrb.w	r3, [sl]
 8003156:	2b2a      	cmp	r3, #42	@ 0x2a
 8003158:	d015      	beq.n	8003186 <_svfiprintf_r+0xfa>
 800315a:	4654      	mov	r4, sl
 800315c:	2000      	movs	r0, #0
 800315e:	f04f 0c0a 	mov.w	ip, #10
 8003162:	9a07      	ldr	r2, [sp, #28]
 8003164:	4621      	mov	r1, r4
 8003166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800316a:	3b30      	subs	r3, #48	@ 0x30
 800316c:	2b09      	cmp	r3, #9
 800316e:	d94b      	bls.n	8003208 <_svfiprintf_r+0x17c>
 8003170:	b1b0      	cbz	r0, 80031a0 <_svfiprintf_r+0x114>
 8003172:	9207      	str	r2, [sp, #28]
 8003174:	e014      	b.n	80031a0 <_svfiprintf_r+0x114>
 8003176:	eba0 0308 	sub.w	r3, r0, r8
 800317a:	fa09 f303 	lsl.w	r3, r9, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	46a2      	mov	sl, r4
 8003182:	9304      	str	r3, [sp, #16]
 8003184:	e7d2      	b.n	800312c <_svfiprintf_r+0xa0>
 8003186:	9b03      	ldr	r3, [sp, #12]
 8003188:	1d19      	adds	r1, r3, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	9103      	str	r1, [sp, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	bfbb      	ittet	lt
 8003192:	425b      	neglt	r3, r3
 8003194:	f042 0202 	orrlt.w	r2, r2, #2
 8003198:	9307      	strge	r3, [sp, #28]
 800319a:	9307      	strlt	r3, [sp, #28]
 800319c:	bfb8      	it	lt
 800319e:	9204      	strlt	r2, [sp, #16]
 80031a0:	7823      	ldrb	r3, [r4, #0]
 80031a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80031a4:	d10a      	bne.n	80031bc <_svfiprintf_r+0x130>
 80031a6:	7863      	ldrb	r3, [r4, #1]
 80031a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80031aa:	d132      	bne.n	8003212 <_svfiprintf_r+0x186>
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	3402      	adds	r4, #2
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031ba:	9305      	str	r3, [sp, #20]
 80031bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003274 <_svfiprintf_r+0x1e8>
 80031c0:	2203      	movs	r2, #3
 80031c2:	4650      	mov	r0, sl
 80031c4:	7821      	ldrb	r1, [r4, #0]
 80031c6:	f000 fa17 	bl	80035f8 <memchr>
 80031ca:	b138      	cbz	r0, 80031dc <_svfiprintf_r+0x150>
 80031cc:	2240      	movs	r2, #64	@ 0x40
 80031ce:	9b04      	ldr	r3, [sp, #16]
 80031d0:	eba0 000a 	sub.w	r0, r0, sl
 80031d4:	4082      	lsls	r2, r0
 80031d6:	4313      	orrs	r3, r2
 80031d8:	3401      	adds	r4, #1
 80031da:	9304      	str	r3, [sp, #16]
 80031dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e0:	2206      	movs	r2, #6
 80031e2:	4825      	ldr	r0, [pc, #148]	@ (8003278 <_svfiprintf_r+0x1ec>)
 80031e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031e8:	f000 fa06 	bl	80035f8 <memchr>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d036      	beq.n	800325e <_svfiprintf_r+0x1d2>
 80031f0:	4b22      	ldr	r3, [pc, #136]	@ (800327c <_svfiprintf_r+0x1f0>)
 80031f2:	bb1b      	cbnz	r3, 800323c <_svfiprintf_r+0x1b0>
 80031f4:	9b03      	ldr	r3, [sp, #12]
 80031f6:	3307      	adds	r3, #7
 80031f8:	f023 0307 	bic.w	r3, r3, #7
 80031fc:	3308      	adds	r3, #8
 80031fe:	9303      	str	r3, [sp, #12]
 8003200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003202:	4433      	add	r3, r6
 8003204:	9309      	str	r3, [sp, #36]	@ 0x24
 8003206:	e76a      	b.n	80030de <_svfiprintf_r+0x52>
 8003208:	460c      	mov	r4, r1
 800320a:	2001      	movs	r0, #1
 800320c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003210:	e7a8      	b.n	8003164 <_svfiprintf_r+0xd8>
 8003212:	2300      	movs	r3, #0
 8003214:	f04f 0c0a 	mov.w	ip, #10
 8003218:	4619      	mov	r1, r3
 800321a:	3401      	adds	r4, #1
 800321c:	9305      	str	r3, [sp, #20]
 800321e:	4620      	mov	r0, r4
 8003220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003224:	3a30      	subs	r2, #48	@ 0x30
 8003226:	2a09      	cmp	r2, #9
 8003228:	d903      	bls.n	8003232 <_svfiprintf_r+0x1a6>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0c6      	beq.n	80031bc <_svfiprintf_r+0x130>
 800322e:	9105      	str	r1, [sp, #20]
 8003230:	e7c4      	b.n	80031bc <_svfiprintf_r+0x130>
 8003232:	4604      	mov	r4, r0
 8003234:	2301      	movs	r3, #1
 8003236:	fb0c 2101 	mla	r1, ip, r1, r2
 800323a:	e7f0      	b.n	800321e <_svfiprintf_r+0x192>
 800323c:	ab03      	add	r3, sp, #12
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	462a      	mov	r2, r5
 8003242:	4638      	mov	r0, r7
 8003244:	4b0e      	ldr	r3, [pc, #56]	@ (8003280 <_svfiprintf_r+0x1f4>)
 8003246:	a904      	add	r1, sp, #16
 8003248:	f3af 8000 	nop.w
 800324c:	1c42      	adds	r2, r0, #1
 800324e:	4606      	mov	r6, r0
 8003250:	d1d6      	bne.n	8003200 <_svfiprintf_r+0x174>
 8003252:	89ab      	ldrh	r3, [r5, #12]
 8003254:	065b      	lsls	r3, r3, #25
 8003256:	f53f af2d 	bmi.w	80030b4 <_svfiprintf_r+0x28>
 800325a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800325c:	e72c      	b.n	80030b8 <_svfiprintf_r+0x2c>
 800325e:	ab03      	add	r3, sp, #12
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	462a      	mov	r2, r5
 8003264:	4638      	mov	r0, r7
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <_svfiprintf_r+0x1f4>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	f000 f87d 	bl	8003368 <_printf_i>
 800326e:	e7ed      	b.n	800324c <_svfiprintf_r+0x1c0>
 8003270:	080036e6 	.word	0x080036e6
 8003274:	080036ec 	.word	0x080036ec
 8003278:	080036f0 	.word	0x080036f0
 800327c:	00000000 	.word	0x00000000
 8003280:	08002fd5 	.word	0x08002fd5

08003284 <_printf_common>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	4616      	mov	r6, r2
 800328a:	4698      	mov	r8, r3
 800328c:	688a      	ldr	r2, [r1, #8]
 800328e:	690b      	ldr	r3, [r1, #16]
 8003290:	4607      	mov	r7, r0
 8003292:	4293      	cmp	r3, r2
 8003294:	bfb8      	it	lt
 8003296:	4613      	movlt	r3, r2
 8003298:	6033      	str	r3, [r6, #0]
 800329a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800329e:	460c      	mov	r4, r1
 80032a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032a4:	b10a      	cbz	r2, 80032aa <_printf_common+0x26>
 80032a6:	3301      	adds	r3, #1
 80032a8:	6033      	str	r3, [r6, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	0699      	lsls	r1, r3, #26
 80032ae:	bf42      	ittt	mi
 80032b0:	6833      	ldrmi	r3, [r6, #0]
 80032b2:	3302      	addmi	r3, #2
 80032b4:	6033      	strmi	r3, [r6, #0]
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	f015 0506 	ands.w	r5, r5, #6
 80032bc:	d106      	bne.n	80032cc <_printf_common+0x48>
 80032be:	f104 0a19 	add.w	sl, r4, #25
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	6832      	ldr	r2, [r6, #0]
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dc2b      	bgt.n	8003324 <_printf_common+0xa0>
 80032cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	3b00      	subs	r3, #0
 80032d4:	bf18      	it	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	0692      	lsls	r2, r2, #26
 80032da:	d430      	bmi.n	800333e <_printf_common+0xba>
 80032dc:	4641      	mov	r1, r8
 80032de:	4638      	mov	r0, r7
 80032e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032e4:	47c8      	blx	r9
 80032e6:	3001      	adds	r0, #1
 80032e8:	d023      	beq.n	8003332 <_printf_common+0xae>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	6922      	ldr	r2, [r4, #16]
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf14      	ite	ne
 80032f6:	2500      	movne	r5, #0
 80032f8:	6833      	ldreq	r3, [r6, #0]
 80032fa:	f04f 0600 	mov.w	r6, #0
 80032fe:	bf08      	it	eq
 8003300:	68e5      	ldreq	r5, [r4, #12]
 8003302:	f104 041a 	add.w	r4, r4, #26
 8003306:	bf08      	it	eq
 8003308:	1aed      	subeq	r5, r5, r3
 800330a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800330e:	bf08      	it	eq
 8003310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003314:	4293      	cmp	r3, r2
 8003316:	bfc4      	itt	gt
 8003318:	1a9b      	subgt	r3, r3, r2
 800331a:	18ed      	addgt	r5, r5, r3
 800331c:	42b5      	cmp	r5, r6
 800331e:	d11a      	bne.n	8003356 <_printf_common+0xd2>
 8003320:	2000      	movs	r0, #0
 8003322:	e008      	b.n	8003336 <_printf_common+0xb2>
 8003324:	2301      	movs	r3, #1
 8003326:	4652      	mov	r2, sl
 8003328:	4641      	mov	r1, r8
 800332a:	4638      	mov	r0, r7
 800332c:	47c8      	blx	r9
 800332e:	3001      	adds	r0, #1
 8003330:	d103      	bne.n	800333a <_printf_common+0xb6>
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333a:	3501      	adds	r5, #1
 800333c:	e7c1      	b.n	80032c2 <_printf_common+0x3e>
 800333e:	2030      	movs	r0, #48	@ 0x30
 8003340:	18e1      	adds	r1, r4, r3
 8003342:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800334c:	4422      	add	r2, r4
 800334e:	3302      	adds	r3, #2
 8003350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003354:	e7c2      	b.n	80032dc <_printf_common+0x58>
 8003356:	2301      	movs	r3, #1
 8003358:	4622      	mov	r2, r4
 800335a:	4641      	mov	r1, r8
 800335c:	4638      	mov	r0, r7
 800335e:	47c8      	blx	r9
 8003360:	3001      	adds	r0, #1
 8003362:	d0e6      	beq.n	8003332 <_printf_common+0xae>
 8003364:	3601      	adds	r6, #1
 8003366:	e7d9      	b.n	800331c <_printf_common+0x98>

08003368 <_printf_i>:
 8003368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	7e0f      	ldrb	r7, [r1, #24]
 800336e:	4691      	mov	r9, r2
 8003370:	2f78      	cmp	r7, #120	@ 0x78
 8003372:	4680      	mov	r8, r0
 8003374:	460c      	mov	r4, r1
 8003376:	469a      	mov	sl, r3
 8003378:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800337a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800337e:	d807      	bhi.n	8003390 <_printf_i+0x28>
 8003380:	2f62      	cmp	r7, #98	@ 0x62
 8003382:	d80a      	bhi.n	800339a <_printf_i+0x32>
 8003384:	2f00      	cmp	r7, #0
 8003386:	f000 80d1 	beq.w	800352c <_printf_i+0x1c4>
 800338a:	2f58      	cmp	r7, #88	@ 0x58
 800338c:	f000 80b8 	beq.w	8003500 <_printf_i+0x198>
 8003390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003394:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003398:	e03a      	b.n	8003410 <_printf_i+0xa8>
 800339a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800339e:	2b15      	cmp	r3, #21
 80033a0:	d8f6      	bhi.n	8003390 <_printf_i+0x28>
 80033a2:	a101      	add	r1, pc, #4	@ (adr r1, 80033a8 <_printf_i+0x40>)
 80033a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003415 	.word	0x08003415
 80033b0:	08003391 	.word	0x08003391
 80033b4:	08003391 	.word	0x08003391
 80033b8:	08003391 	.word	0x08003391
 80033bc:	08003391 	.word	0x08003391
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003391 	.word	0x08003391
 80033c8:	08003391 	.word	0x08003391
 80033cc:	08003391 	.word	0x08003391
 80033d0:	08003391 	.word	0x08003391
 80033d4:	08003513 	.word	0x08003513
 80033d8:	0800343f 	.word	0x0800343f
 80033dc:	080034cd 	.word	0x080034cd
 80033e0:	08003391 	.word	0x08003391
 80033e4:	08003391 	.word	0x08003391
 80033e8:	08003535 	.word	0x08003535
 80033ec:	08003391 	.word	0x08003391
 80033f0:	0800343f 	.word	0x0800343f
 80033f4:	08003391 	.word	0x08003391
 80033f8:	08003391 	.word	0x08003391
 80033fc:	080034d5 	.word	0x080034d5
 8003400:	6833      	ldr	r3, [r6, #0]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6032      	str	r2, [r6, #0]
 8003408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800340c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003410:	2301      	movs	r3, #1
 8003412:	e09c      	b.n	800354e <_printf_i+0x1e6>
 8003414:	6833      	ldr	r3, [r6, #0]
 8003416:	6820      	ldr	r0, [r4, #0]
 8003418:	1d19      	adds	r1, r3, #4
 800341a:	6031      	str	r1, [r6, #0]
 800341c:	0606      	lsls	r6, r0, #24
 800341e:	d501      	bpl.n	8003424 <_printf_i+0xbc>
 8003420:	681d      	ldr	r5, [r3, #0]
 8003422:	e003      	b.n	800342c <_printf_i+0xc4>
 8003424:	0645      	lsls	r5, r0, #25
 8003426:	d5fb      	bpl.n	8003420 <_printf_i+0xb8>
 8003428:	f9b3 5000 	ldrsh.w	r5, [r3]
 800342c:	2d00      	cmp	r5, #0
 800342e:	da03      	bge.n	8003438 <_printf_i+0xd0>
 8003430:	232d      	movs	r3, #45	@ 0x2d
 8003432:	426d      	negs	r5, r5
 8003434:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003438:	230a      	movs	r3, #10
 800343a:	4858      	ldr	r0, [pc, #352]	@ (800359c <_printf_i+0x234>)
 800343c:	e011      	b.n	8003462 <_printf_i+0xfa>
 800343e:	6821      	ldr	r1, [r4, #0]
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	0608      	lsls	r0, r1, #24
 8003444:	f853 5b04 	ldr.w	r5, [r3], #4
 8003448:	d402      	bmi.n	8003450 <_printf_i+0xe8>
 800344a:	0649      	lsls	r1, r1, #25
 800344c:	bf48      	it	mi
 800344e:	b2ad      	uxthmi	r5, r5
 8003450:	2f6f      	cmp	r7, #111	@ 0x6f
 8003452:	6033      	str	r3, [r6, #0]
 8003454:	bf14      	ite	ne
 8003456:	230a      	movne	r3, #10
 8003458:	2308      	moveq	r3, #8
 800345a:	4850      	ldr	r0, [pc, #320]	@ (800359c <_printf_i+0x234>)
 800345c:	2100      	movs	r1, #0
 800345e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003462:	6866      	ldr	r6, [r4, #4]
 8003464:	2e00      	cmp	r6, #0
 8003466:	60a6      	str	r6, [r4, #8]
 8003468:	db05      	blt.n	8003476 <_printf_i+0x10e>
 800346a:	6821      	ldr	r1, [r4, #0]
 800346c:	432e      	orrs	r6, r5
 800346e:	f021 0104 	bic.w	r1, r1, #4
 8003472:	6021      	str	r1, [r4, #0]
 8003474:	d04b      	beq.n	800350e <_printf_i+0x1a6>
 8003476:	4616      	mov	r6, r2
 8003478:	fbb5 f1f3 	udiv	r1, r5, r3
 800347c:	fb03 5711 	mls	r7, r3, r1, r5
 8003480:	5dc7      	ldrb	r7, [r0, r7]
 8003482:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003486:	462f      	mov	r7, r5
 8003488:	42bb      	cmp	r3, r7
 800348a:	460d      	mov	r5, r1
 800348c:	d9f4      	bls.n	8003478 <_printf_i+0x110>
 800348e:	2b08      	cmp	r3, #8
 8003490:	d10b      	bne.n	80034aa <_printf_i+0x142>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	07df      	lsls	r7, r3, #31
 8003496:	d508      	bpl.n	80034aa <_printf_i+0x142>
 8003498:	6923      	ldr	r3, [r4, #16]
 800349a:	6861      	ldr	r1, [r4, #4]
 800349c:	4299      	cmp	r1, r3
 800349e:	bfde      	ittt	le
 80034a0:	2330      	movle	r3, #48	@ 0x30
 80034a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034aa:	1b92      	subs	r2, r2, r6
 80034ac:	6122      	str	r2, [r4, #16]
 80034ae:	464b      	mov	r3, r9
 80034b0:	4621      	mov	r1, r4
 80034b2:	4640      	mov	r0, r8
 80034b4:	f8cd a000 	str.w	sl, [sp]
 80034b8:	aa03      	add	r2, sp, #12
 80034ba:	f7ff fee3 	bl	8003284 <_printf_common>
 80034be:	3001      	adds	r0, #1
 80034c0:	d14a      	bne.n	8003558 <_printf_i+0x1f0>
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295
 80034c6:	b004      	add	sp, #16
 80034c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f043 0320 	orr.w	r3, r3, #32
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	2778      	movs	r7, #120	@ 0x78
 80034d6:	4832      	ldr	r0, [pc, #200]	@ (80035a0 <_printf_i+0x238>)
 80034d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	6831      	ldr	r1, [r6, #0]
 80034e0:	061f      	lsls	r7, r3, #24
 80034e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80034e6:	d402      	bmi.n	80034ee <_printf_i+0x186>
 80034e8:	065f      	lsls	r7, r3, #25
 80034ea:	bf48      	it	mi
 80034ec:	b2ad      	uxthmi	r5, r5
 80034ee:	6031      	str	r1, [r6, #0]
 80034f0:	07d9      	lsls	r1, r3, #31
 80034f2:	bf44      	itt	mi
 80034f4:	f043 0320 	orrmi.w	r3, r3, #32
 80034f8:	6023      	strmi	r3, [r4, #0]
 80034fa:	b11d      	cbz	r5, 8003504 <_printf_i+0x19c>
 80034fc:	2310      	movs	r3, #16
 80034fe:	e7ad      	b.n	800345c <_printf_i+0xf4>
 8003500:	4826      	ldr	r0, [pc, #152]	@ (800359c <_printf_i+0x234>)
 8003502:	e7e9      	b.n	80034d8 <_printf_i+0x170>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	f023 0320 	bic.w	r3, r3, #32
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	e7f6      	b.n	80034fc <_printf_i+0x194>
 800350e:	4616      	mov	r6, r2
 8003510:	e7bd      	b.n	800348e <_printf_i+0x126>
 8003512:	6833      	ldr	r3, [r6, #0]
 8003514:	6825      	ldr	r5, [r4, #0]
 8003516:	1d18      	adds	r0, r3, #4
 8003518:	6961      	ldr	r1, [r4, #20]
 800351a:	6030      	str	r0, [r6, #0]
 800351c:	062e      	lsls	r6, r5, #24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	d501      	bpl.n	8003526 <_printf_i+0x1be>
 8003522:	6019      	str	r1, [r3, #0]
 8003524:	e002      	b.n	800352c <_printf_i+0x1c4>
 8003526:	0668      	lsls	r0, r5, #25
 8003528:	d5fb      	bpl.n	8003522 <_printf_i+0x1ba>
 800352a:	8019      	strh	r1, [r3, #0]
 800352c:	2300      	movs	r3, #0
 800352e:	4616      	mov	r6, r2
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	e7bc      	b.n	80034ae <_printf_i+0x146>
 8003534:	6833      	ldr	r3, [r6, #0]
 8003536:	2100      	movs	r1, #0
 8003538:	1d1a      	adds	r2, r3, #4
 800353a:	6032      	str	r2, [r6, #0]
 800353c:	681e      	ldr	r6, [r3, #0]
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	4630      	mov	r0, r6
 8003542:	f000 f859 	bl	80035f8 <memchr>
 8003546:	b108      	cbz	r0, 800354c <_printf_i+0x1e4>
 8003548:	1b80      	subs	r0, r0, r6
 800354a:	6060      	str	r0, [r4, #4]
 800354c:	6863      	ldr	r3, [r4, #4]
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	2300      	movs	r3, #0
 8003552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003556:	e7aa      	b.n	80034ae <_printf_i+0x146>
 8003558:	4632      	mov	r2, r6
 800355a:	4649      	mov	r1, r9
 800355c:	4640      	mov	r0, r8
 800355e:	6923      	ldr	r3, [r4, #16]
 8003560:	47d0      	blx	sl
 8003562:	3001      	adds	r0, #1
 8003564:	d0ad      	beq.n	80034c2 <_printf_i+0x15a>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	079b      	lsls	r3, r3, #30
 800356a:	d413      	bmi.n	8003594 <_printf_i+0x22c>
 800356c:	68e0      	ldr	r0, [r4, #12]
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	4298      	cmp	r0, r3
 8003572:	bfb8      	it	lt
 8003574:	4618      	movlt	r0, r3
 8003576:	e7a6      	b.n	80034c6 <_printf_i+0x15e>
 8003578:	2301      	movs	r3, #1
 800357a:	4632      	mov	r2, r6
 800357c:	4649      	mov	r1, r9
 800357e:	4640      	mov	r0, r8
 8003580:	47d0      	blx	sl
 8003582:	3001      	adds	r0, #1
 8003584:	d09d      	beq.n	80034c2 <_printf_i+0x15a>
 8003586:	3501      	adds	r5, #1
 8003588:	68e3      	ldr	r3, [r4, #12]
 800358a:	9903      	ldr	r1, [sp, #12]
 800358c:	1a5b      	subs	r3, r3, r1
 800358e:	42ab      	cmp	r3, r5
 8003590:	dcf2      	bgt.n	8003578 <_printf_i+0x210>
 8003592:	e7eb      	b.n	800356c <_printf_i+0x204>
 8003594:	2500      	movs	r5, #0
 8003596:	f104 0619 	add.w	r6, r4, #25
 800359a:	e7f5      	b.n	8003588 <_printf_i+0x220>
 800359c:	080036f7 	.word	0x080036f7
 80035a0:	08003708 	.word	0x08003708

080035a4 <memmove>:
 80035a4:	4288      	cmp	r0, r1
 80035a6:	b510      	push	{r4, lr}
 80035a8:	eb01 0402 	add.w	r4, r1, r2
 80035ac:	d902      	bls.n	80035b4 <memmove+0x10>
 80035ae:	4284      	cmp	r4, r0
 80035b0:	4623      	mov	r3, r4
 80035b2:	d807      	bhi.n	80035c4 <memmove+0x20>
 80035b4:	1e43      	subs	r3, r0, #1
 80035b6:	42a1      	cmp	r1, r4
 80035b8:	d008      	beq.n	80035cc <memmove+0x28>
 80035ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035c2:	e7f8      	b.n	80035b6 <memmove+0x12>
 80035c4:	4601      	mov	r1, r0
 80035c6:	4402      	add	r2, r0
 80035c8:	428a      	cmp	r2, r1
 80035ca:	d100      	bne.n	80035ce <memmove+0x2a>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035d6:	e7f7      	b.n	80035c8 <memmove+0x24>

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	2300      	movs	r3, #0
 80035dc:	4d05      	ldr	r5, [pc, #20]	@ (80035f4 <_sbrk_r+0x1c>)
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	602b      	str	r3, [r5, #0]
 80035e4:	f7fd f808 	bl	80005f8 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d102      	bne.n	80035f2 <_sbrk_r+0x1a>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b103      	cbz	r3, 80035f2 <_sbrk_r+0x1a>
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000250 	.word	0x20000250

080035f8 <memchr>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	b510      	push	{r4, lr}
 80035fc:	b2c9      	uxtb	r1, r1
 80035fe:	4402      	add	r2, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	4618      	mov	r0, r3
 8003604:	d101      	bne.n	800360a <memchr+0x12>
 8003606:	2000      	movs	r0, #0
 8003608:	e003      	b.n	8003612 <memchr+0x1a>
 800360a:	7804      	ldrb	r4, [r0, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	428c      	cmp	r4, r1
 8003610:	d1f6      	bne.n	8003600 <memchr+0x8>
 8003612:	bd10      	pop	{r4, pc}

08003614 <memcpy>:
 8003614:	440a      	add	r2, r1
 8003616:	4291      	cmp	r1, r2
 8003618:	f100 33ff 	add.w	r3, r0, #4294967295
 800361c:	d100      	bne.n	8003620 <memcpy+0xc>
 800361e:	4770      	bx	lr
 8003620:	b510      	push	{r4, lr}
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	4291      	cmp	r1, r2
 8003628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800362c:	d1f9      	bne.n	8003622 <memcpy+0xe>
 800362e:	bd10      	pop	{r4, pc}

08003630 <_realloc_r>:
 8003630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003634:	4607      	mov	r7, r0
 8003636:	4614      	mov	r4, r2
 8003638:	460d      	mov	r5, r1
 800363a:	b921      	cbnz	r1, 8003646 <_realloc_r+0x16>
 800363c:	4611      	mov	r1, r2
 800363e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	f7ff bc3b 	b.w	8002ebc <_malloc_r>
 8003646:	b92a      	cbnz	r2, 8003654 <_realloc_r+0x24>
 8003648:	f7ff fbce 	bl	8002de8 <_free_r>
 800364c:	4625      	mov	r5, r4
 800364e:	4628      	mov	r0, r5
 8003650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003654:	f000 f81a 	bl	800368c <_malloc_usable_size_r>
 8003658:	4284      	cmp	r4, r0
 800365a:	4606      	mov	r6, r0
 800365c:	d802      	bhi.n	8003664 <_realloc_r+0x34>
 800365e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003662:	d8f4      	bhi.n	800364e <_realloc_r+0x1e>
 8003664:	4621      	mov	r1, r4
 8003666:	4638      	mov	r0, r7
 8003668:	f7ff fc28 	bl	8002ebc <_malloc_r>
 800366c:	4680      	mov	r8, r0
 800366e:	b908      	cbnz	r0, 8003674 <_realloc_r+0x44>
 8003670:	4645      	mov	r5, r8
 8003672:	e7ec      	b.n	800364e <_realloc_r+0x1e>
 8003674:	42b4      	cmp	r4, r6
 8003676:	4622      	mov	r2, r4
 8003678:	4629      	mov	r1, r5
 800367a:	bf28      	it	cs
 800367c:	4632      	movcs	r2, r6
 800367e:	f7ff ffc9 	bl	8003614 <memcpy>
 8003682:	4629      	mov	r1, r5
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff fbaf 	bl	8002de8 <_free_r>
 800368a:	e7f1      	b.n	8003670 <_realloc_r+0x40>

0800368c <_malloc_usable_size_r>:
 800368c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003690:	1f18      	subs	r0, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfbc      	itt	lt
 8003696:	580b      	ldrlt	r3, [r1, r0]
 8003698:	18c0      	addlt	r0, r0, r3
 800369a:	4770      	bx	lr

0800369c <_init>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr

080036a8 <_fini>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr
