
Light_Traffic_FSM_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c1c  08002c1c  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c40  08002c40  0000404c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c40  08002c40  0000404c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c40  08002c40  0000404c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c40  08002c40  00003c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08002c48  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  2000004c  08002c94  0000404c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08002c94  000043fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b1f  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f49  00000000  00000000  0000cb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0000eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000858  00000000  00000000  0000f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106dd  00000000  00000000  0000fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5a8  00000000  00000000  0002052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eba8  00000000  00000000  0002ead5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d67d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  0008d6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000900f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c04 	.word	0x08002c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08002c04 	.word	0x08002c04

0800014c <display7SEG>:
 */

#include "display7SEG.h"


void display7SEG (int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
		case 0:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b5      	ldr	r0, [pc, #724]	@ (8000468 <display7SEG+0x31c>)
 8000192:	f001 fd28 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b3      	ldr	r0, [pc, #716]	@ (8000468 <display7SEG+0x31c>)
 800019c:	f001 fd23 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48b0      	ldr	r0, [pc, #704]	@ (8000468 <display7SEG+0x31c>)
 80001a6:	f001 fd1e 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ae      	ldr	r0, [pc, #696]	@ (8000468 <display7SEG+0x31c>)
 80001b0:	f001 fd19 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48ab      	ldr	r0, [pc, #684]	@ (8000468 <display7SEG+0x31c>)
 80001ba:	f001 fd14 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a9      	ldr	r0, [pc, #676]	@ (8000468 <display7SEG+0x31c>)
 80001c4:	f001 fd0f 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	@ 0x40
 80001cc:	48a6      	ldr	r0, [pc, #664]	@ (8000468 <display7SEG+0x31c>)
 80001ce:	f001 fd0a 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 80001d2:	e144      	b.n	800045e <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a3      	ldr	r0, [pc, #652]	@ (8000468 <display7SEG+0x31c>)
 80001da:	f001 fd04 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a1      	ldr	r0, [pc, #644]	@ (8000468 <display7SEG+0x31c>)
 80001e4:	f001 fcff 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489e      	ldr	r0, [pc, #632]	@ (8000468 <display7SEG+0x31c>)
 80001ee:	f001 fcfa 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489c      	ldr	r0, [pc, #624]	@ (8000468 <display7SEG+0x31c>)
 80001f8:	f001 fcf5 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4899      	ldr	r0, [pc, #612]	@ (8000468 <display7SEG+0x31c>)
 8000202:	f001 fcf0 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4897      	ldr	r0, [pc, #604]	@ (8000468 <display7SEG+0x31c>)
 800020c:	f001 fceb 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4894      	ldr	r0, [pc, #592]	@ (8000468 <display7SEG+0x31c>)
 8000216:	f001 fce6 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 800021a:	e120      	b.n	800045e <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4891      	ldr	r0, [pc, #580]	@ (8000468 <display7SEG+0x31c>)
 8000222:	f001 fce0 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488f      	ldr	r0, [pc, #572]	@ (8000468 <display7SEG+0x31c>)
 800022c:	f001 fcdb 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488c      	ldr	r0, [pc, #560]	@ (8000468 <display7SEG+0x31c>)
 8000236:	f001 fcd6 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	488a      	ldr	r0, [pc, #552]	@ (8000468 <display7SEG+0x31c>)
 8000240:	f001 fcd1 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4887      	ldr	r0, [pc, #540]	@ (8000468 <display7SEG+0x31c>)
 800024a:	f001 fccc 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4885      	ldr	r0, [pc, #532]	@ (8000468 <display7SEG+0x31c>)
 8000254:	f001 fcc7 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	@ 0x40
 800025c:	4882      	ldr	r0, [pc, #520]	@ (8000468 <display7SEG+0x31c>)
 800025e:	f001 fcc2 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 8000262:	e0fc      	b.n	800045e <display7SEG+0x312>
		case 3:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487f      	ldr	r0, [pc, #508]	@ (8000468 <display7SEG+0x31c>)
 800026a:	f001 fcbc 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487d      	ldr	r0, [pc, #500]	@ (8000468 <display7SEG+0x31c>)
 8000274:	f001 fcb7 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	487a      	ldr	r0, [pc, #488]	@ (8000468 <display7SEG+0x31c>)
 800027e:	f001 fcb2 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4878      	ldr	r0, [pc, #480]	@ (8000468 <display7SEG+0x31c>)
 8000288:	f001 fcad 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4875      	ldr	r0, [pc, #468]	@ (8000468 <display7SEG+0x31c>)
 8000292:	f001 fca8 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4873      	ldr	r0, [pc, #460]	@ (8000468 <display7SEG+0x31c>)
 800029c:	f001 fca3 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	4870      	ldr	r0, [pc, #448]	@ (8000468 <display7SEG+0x31c>)
 80002a6:	f001 fc9e 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d8      	b.n	800045e <display7SEG+0x312>
		case 4:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486d      	ldr	r0, [pc, #436]	@ (8000468 <display7SEG+0x31c>)
 80002b2:	f001 fc98 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486b      	ldr	r0, [pc, #428]	@ (8000468 <display7SEG+0x31c>)
 80002bc:	f001 fc93 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4868      	ldr	r0, [pc, #416]	@ (8000468 <display7SEG+0x31c>)
 80002c6:	f001 fc8e 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4866      	ldr	r0, [pc, #408]	@ (8000468 <display7SEG+0x31c>)
 80002d0:	f001 fc89 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4863      	ldr	r0, [pc, #396]	@ (8000468 <display7SEG+0x31c>)
 80002da:	f001 fc84 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4861      	ldr	r0, [pc, #388]	@ (8000468 <display7SEG+0x31c>)
 80002e4:	f001 fc7f 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	485e      	ldr	r0, [pc, #376]	@ (8000468 <display7SEG+0x31c>)
 80002ee:	f001 fc7a 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b4      	b.n	800045e <display7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485b      	ldr	r0, [pc, #364]	@ (8000468 <display7SEG+0x31c>)
 80002fa:	f001 fc74 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4859      	ldr	r0, [pc, #356]	@ (8000468 <display7SEG+0x31c>)
 8000304:	f001 fc6f 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4856      	ldr	r0, [pc, #344]	@ (8000468 <display7SEG+0x31c>)
 800030e:	f001 fc6a 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4854      	ldr	r0, [pc, #336]	@ (8000468 <display7SEG+0x31c>)
 8000318:	f001 fc65 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4851      	ldr	r0, [pc, #324]	@ (8000468 <display7SEG+0x31c>)
 8000322:	f001 fc60 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484f      	ldr	r0, [pc, #316]	@ (8000468 <display7SEG+0x31c>)
 800032c:	f001 fc5b 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	@ 0x40
 8000334:	484c      	ldr	r0, [pc, #304]	@ (8000468 <display7SEG+0x31c>)
 8000336:	f001 fc56 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 800033a:	e090      	b.n	800045e <display7SEG+0x312>
		case 6:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4849      	ldr	r0, [pc, #292]	@ (8000468 <display7SEG+0x31c>)
 8000342:	f001 fc50 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4847      	ldr	r0, [pc, #284]	@ (8000468 <display7SEG+0x31c>)
 800034c:	f001 fc4b 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4844      	ldr	r0, [pc, #272]	@ (8000468 <display7SEG+0x31c>)
 8000356:	f001 fc46 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4842      	ldr	r0, [pc, #264]	@ (8000468 <display7SEG+0x31c>)
 8000360:	f001 fc41 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483f      	ldr	r0, [pc, #252]	@ (8000468 <display7SEG+0x31c>)
 800036a:	f001 fc3c 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483d      	ldr	r0, [pc, #244]	@ (8000468 <display7SEG+0x31c>)
 8000374:	f001 fc37 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	483a      	ldr	r0, [pc, #232]	@ (8000468 <display7SEG+0x31c>)
 800037e:	f001 fc32 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 8000382:	e06c      	b.n	800045e <display7SEG+0x312>
		case 7:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4837      	ldr	r0, [pc, #220]	@ (8000468 <display7SEG+0x31c>)
 800038a:	f001 fc2c 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4835      	ldr	r0, [pc, #212]	@ (8000468 <display7SEG+0x31c>)
 8000394:	f001 fc27 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4832      	ldr	r0, [pc, #200]	@ (8000468 <display7SEG+0x31c>)
 800039e:	f001 fc22 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	4830      	ldr	r0, [pc, #192]	@ (8000468 <display7SEG+0x31c>)
 80003a8:	f001 fc1d 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482d      	ldr	r0, [pc, #180]	@ (8000468 <display7SEG+0x31c>)
 80003b2:	f001 fc18 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482b      	ldr	r0, [pc, #172]	@ (8000468 <display7SEG+0x31c>)
 80003bc:	f001 fc13 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	@ 0x40
 80003c4:	4828      	ldr	r0, [pc, #160]	@ (8000468 <display7SEG+0x31c>)
 80003c6:	f001 fc0e 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 80003ca:	e048      	b.n	800045e <display7SEG+0x312>
		case 8:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4825      	ldr	r0, [pc, #148]	@ (8000468 <display7SEG+0x31c>)
 80003d2:	f001 fc08 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4823      	ldr	r0, [pc, #140]	@ (8000468 <display7SEG+0x31c>)
 80003dc:	f001 fc03 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4820      	ldr	r0, [pc, #128]	@ (8000468 <display7SEG+0x31c>)
 80003e6:	f001 fbfe 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481e      	ldr	r0, [pc, #120]	@ (8000468 <display7SEG+0x31c>)
 80003f0:	f001 fbf9 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481b      	ldr	r0, [pc, #108]	@ (8000468 <display7SEG+0x31c>)
 80003fa:	f001 fbf4 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4819      	ldr	r0, [pc, #100]	@ (8000468 <display7SEG+0x31c>)
 8000404:	f001 fbef 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	@ 0x40
 800040c:	4816      	ldr	r0, [pc, #88]	@ (8000468 <display7SEG+0x31c>)
 800040e:	f001 fbea 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 8000412:	e024      	b.n	800045e <display7SEG+0x312>
		case 9:
			HAL_GPIO_WritePin(A_H_GPIO_Port, A_H_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4813      	ldr	r0, [pc, #76]	@ (8000468 <display7SEG+0x31c>)
 800041a:	f001 fbe4 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_H_GPIO_Port, B_H_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4811      	ldr	r0, [pc, #68]	@ (8000468 <display7SEG+0x31c>)
 8000424:	f001 fbdf 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_H_GPIO_Port, C_H_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480e      	ldr	r0, [pc, #56]	@ (8000468 <display7SEG+0x31c>)
 800042e:	f001 fbda 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_H_GPIO_Port, D_H_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480c      	ldr	r0, [pc, #48]	@ (8000468 <display7SEG+0x31c>)
 8000438:	f001 fbd5 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_H_GPIO_Port, E_H_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4809      	ldr	r0, [pc, #36]	@ (8000468 <display7SEG+0x31c>)
 8000442:	f001 fbd0 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_H_GPIO_Port, F_H_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4807      	ldr	r0, [pc, #28]	@ (8000468 <display7SEG+0x31c>)
 800044c:	f001 fbcb 	bl	8001be6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_H_GPIO_Port, G_H_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <display7SEG+0x31c>)
 8000456:	f001 fbc6 	bl	8001be6 <HAL_GPIO_WritePin>
			break;
 800045a:	e000      	b.n	800045e <display7SEG+0x312>
		default:
			break;
 800045c:	bf00      	nop
	}
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <clearAll>:

void clearAll () {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2180      	movs	r1, #128	@ 0x80
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <clearAll+0x38>)
 8000476:	f001 fbb6 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000480:	4808      	ldr	r0, [pc, #32]	@ (80004a4 <clearAll+0x38>)
 8000482:	f001 fbb0 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800048c:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <clearAll+0x38>)
 800048e:	f001 fbaa 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000498:	4802      	ldr	r0, [pc, #8]	@ (80004a4 <clearAll+0x38>)
 800049a:	f001 fba4 	bl	8001be6 <HAL_GPIO_WritePin>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <turnOn_0>:

void turnOn_0 () {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2180      	movs	r1, #128	@ 0x80
 80004b0:	480b      	ldr	r0, [pc, #44]	@ (80004e0 <turnOn_0+0x38>)
 80004b2:	f001 fb98 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004bc:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <turnOn_0+0x38>)
 80004be:	f001 fb92 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c8:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <turnOn_0+0x38>)
 80004ca:	f001 fb8c 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <turnOn_0+0x38>)
 80004d6:	f001 fb86 	bl	8001be6 <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <turnOn_1>:

void turnOn_1 () {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2180      	movs	r1, #128	@ 0x80
 80004ec:	480b      	ldr	r0, [pc, #44]	@ (800051c <turnOn_1+0x38>)
 80004ee:	f001 fb7a 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f8:	4808      	ldr	r0, [pc, #32]	@ (800051c <turnOn_1+0x38>)
 80004fa:	f001 fb74 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000504:	4805      	ldr	r0, [pc, #20]	@ (800051c <turnOn_1+0x38>)
 8000506:	f001 fb6e 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <turnOn_1+0x38>)
 8000512:	f001 fb68 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40010c00 	.word	0x40010c00

08000520 <turnOn_2>:

void turnOn_2 () {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2180      	movs	r1, #128	@ 0x80
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <turnOn_2+0x38>)
 800052a:	f001 fb5c 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <turnOn_2+0x38>)
 8000536:	f001 fb56 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <turnOn_2+0x38>)
 8000542:	f001 fb50 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800054c:	4802      	ldr	r0, [pc, #8]	@ (8000558 <turnOn_2+0x38>)
 800054e:	f001 fb4a 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010c00 	.word	0x40010c00

0800055c <turnOn_3>:

void turnOn_3 () {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <turnOn_3+0x38>)
 8000566:	f001 fb3e 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000570:	4808      	ldr	r0, [pc, #32]	@ (8000594 <turnOn_3+0x38>)
 8000572:	f001 fb38 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <turnOn_3+0x38>)
 800057e:	f001 fb32 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <turnOn_3+0x38>)
 800058a:	f001 fb2c 	bl	8001be6 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010c00 	.word	0x40010c00

08000598 <display7SEG_H>:

void display7SEG_H(int num) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	int led_1 = num/10;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <display7SEG_H+0x60>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1092      	asrs	r2, r2, #2
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	60fb      	str	r3, [r7, #12]
	int led_2 = num %10;
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <display7SEG_H+0x60>)
 80005b4:	fb83 1302 	smull	r1, r3, r3, r2
 80005b8:	1099      	asrs	r1, r3, #2
 80005ba:	17d3      	asrs	r3, r2, #31
 80005bc:	1ac9      	subs	r1, r1, r3
 80005be:	460b      	mov	r3, r1
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	60bb      	str	r3, [r7, #8]

	if (counter_for_7SEG == 0) {
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <display7SEG_H+0x64>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d104      	bne.n	80005dc <display7SEG_H+0x44>
		display7SEG(led_1);
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff fdba 	bl	800014c <display7SEG>
		turnOn_0();
 80005d8:	f7ff ff66 	bl	80004a8 <turnOn_0>
	}
	if (counter_for_7SEG == 1) {
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <display7SEG_H+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d104      	bne.n	80005ee <display7SEG_H+0x56>
		display7SEG(led_2);
 80005e4:	68b8      	ldr	r0, [r7, #8]
 80005e6:	f7ff fdb1 	bl	800014c <display7SEG>
		turnOn_1();
 80005ea:	f7ff ff7b 	bl	80004e4 <turnOn_1>
	}

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	66666667 	.word	0x66666667
 80005fc:	20000080 	.word	0x20000080

08000600 <display7SEG_V>:

void display7SEG_V(int num) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	int led_1 = num/10;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a15      	ldr	r2, [pc, #84]	@ (8000660 <display7SEG_V+0x60>)
 800060c:	fb82 1203 	smull	r1, r2, r2, r3
 8000610:	1092      	asrs	r2, r2, #2
 8000612:	17db      	asrs	r3, r3, #31
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	60fb      	str	r3, [r7, #12]
	int led_2 = num %10;
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <display7SEG_V+0x60>)
 800061c:	fb83 1302 	smull	r1, r3, r3, r2
 8000620:	1099      	asrs	r1, r3, #2
 8000622:	17d3      	asrs	r3, r2, #31
 8000624:	1ac9      	subs	r1, r1, r3
 8000626:	460b      	mov	r3, r1
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	440b      	add	r3, r1
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	60bb      	str	r3, [r7, #8]

	if (counter_for_7SEG == 2) {
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <display7SEG_V+0x64>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d104      	bne.n	8000644 <display7SEG_V+0x44>
		display7SEG(led_1);
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff fd86 	bl	800014c <display7SEG>
		turnOn_2();
 8000640:	f7ff ff6e 	bl	8000520 <turnOn_2>
	}
	if (counter_for_7SEG == 3) {
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <display7SEG_V+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b03      	cmp	r3, #3
 800064a:	d104      	bne.n	8000656 <display7SEG_V+0x56>
		display7SEG(led_2);
 800064c:	68b8      	ldr	r0, [r7, #8]
 800064e:	f7ff fd7d 	bl	800014c <display7SEG>
		turnOn_3();
 8000652:	f7ff ff83 	bl	800055c <turnOn_3>
	}

}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666667 	.word	0x66666667
 8000664:	20000080 	.word	0x20000080

08000668 <count_second_by_timer7SEG_auto>:
 *      Author: Lenovo
 */

#include "fsm_automatic.h"

void count_second_by_timer7SEG_auto() {
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	counter_for_7SEG++;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <count_second_by_timer7SEG_auto+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <count_second_by_timer7SEG_auto+0x38>)
 8000674:	6013      	str	r3, [r2, #0]
	if (counter_for_7SEG >= 4) {
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <count_second_by_timer7SEG_auto+0x38>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b03      	cmp	r3, #3
 800067c:	dd0c      	ble.n	8000698 <count_second_by_timer7SEG_auto+0x30>
		light_countdown_X--;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <count_second_by_timer7SEG_auto+0x3c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3b01      	subs	r3, #1
 8000684:	4a07      	ldr	r2, [pc, #28]	@ (80006a4 <count_second_by_timer7SEG_auto+0x3c>)
 8000686:	6013      	str	r3, [r2, #0]
		light_countdown_Y--;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <count_second_by_timer7SEG_auto+0x40>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <count_second_by_timer7SEG_auto+0x40>)
 8000690:	6013      	str	r3, [r2, #0]
		counter_for_7SEG = 0;
 8000692:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <count_second_by_timer7SEG_auto+0x38>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
	}
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000080 	.word	0x20000080
 80006a4:	20000078 	.word	0x20000078
 80006a8:	2000007c 	.word	0x2000007c

080006ac <fsm_automatic_run>:

void fsm_automatic_run() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	switch (status) {
 80006b0:	4b75      	ldr	r3, [pc, #468]	@ (8000888 <fsm_automatic_run+0x1dc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	f200 80dc 	bhi.w	8000872 <fsm_automatic_run+0x1c6>
 80006ba:	a201      	add	r2, pc, #4	@ (adr r2, 80006c0 <fsm_automatic_run+0x14>)
 80006bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c0:	080006d5 	.word	0x080006d5
 80006c4:	08000719 	.word	0x08000719
 80006c8:	0800076d 	.word	0x0800076d
 80006cc:	080007c7 	.word	0x080007c7
 80006d0:	08000819 	.word	0x08000819
	case INIT:

		status = AUTO_RED_GREEN;
 80006d4:	4b6c      	ldr	r3, [pc, #432]	@ (8000888 <fsm_automatic_run+0x1dc>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

		//Assign edited value for duration
		red_edit = red_duration;
 80006da:	4b6c      	ldr	r3, [pc, #432]	@ (800088c <fsm_automatic_run+0x1e0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a6c      	ldr	r2, [pc, #432]	@ (8000890 <fsm_automatic_run+0x1e4>)
 80006e0:	6013      	str	r3, [r2, #0]
		yellow_edit = yellow_duration;
 80006e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000894 <fsm_automatic_run+0x1e8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a6c      	ldr	r2, [pc, #432]	@ (8000898 <fsm_automatic_run+0x1ec>)
 80006e8:	6013      	str	r3, [r2, #0]
		green_edit = green_duration;
 80006ea:	4b6c      	ldr	r3, [pc, #432]	@ (800089c <fsm_automatic_run+0x1f0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a6c      	ldr	r2, [pc, #432]	@ (80008a0 <fsm_automatic_run+0x1f4>)
 80006f0:	6013      	str	r3, [r2, #0]


		light_countdown_X = red_duration;
 80006f2:	4b66      	ldr	r3, [pc, #408]	@ (800088c <fsm_automatic_run+0x1e0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a6b      	ldr	r2, [pc, #428]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 80006f8:	6013      	str	r3, [r2, #0]
		light_countdown_Y = green_duration;
 80006fa:	4b68      	ldr	r3, [pc, #416]	@ (800089c <fsm_automatic_run+0x1f0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a6a      	ldr	r2, [pc, #424]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000700:	6013      	str	r3, [r2, #0]

		display7SEG_H(light_countdown_X);
 8000702:	4b68      	ldr	r3, [pc, #416]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff46 	bl	8000598 <display7SEG_H>
		display7SEG_V(light_countdown_Y);
 800070c:	4b66      	ldr	r3, [pc, #408]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff75 	bl	8000600 <display7SEG_V>
//		setTimer(LED7SEG, led7SEG_duration);
		break;
 8000716:	e0b5      	b.n	8000884 <fsm_automatic_run+0x1d8>
	case AUTO_RED_GREEN:
		light_red_X();
 8000718:	f000 fb2a 	bl	8000d70 <light_red_X>
		light_green_Y();
 800071c:	f000 fba0 	bl	8000e60 <light_green_Y>

		count_second_by_timer7SEG_auto(); // only 4 loop * 250ms = 1s, this function implement
 8000720:	f7ff ffa2 	bl	8000668 <count_second_by_timer7SEG_auto>
		if (light_countdown_Y == 0) {
 8000724:	4b60      	ldr	r3, [pc, #384]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d106      	bne.n	800073a <fsm_automatic_run+0x8e>
			status = AUTO_RED_YELLOW;
 800072c:	4b56      	ldr	r3, [pc, #344]	@ (8000888 <fsm_automatic_run+0x1dc>)
 800072e:	2202      	movs	r2, #2
 8000730:	601a      	str	r2, [r3, #0]

			light_countdown_Y = yellow_duration;
 8000732:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <fsm_automatic_run+0x1e8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a5c      	ldr	r2, [pc, #368]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000738:	6013      	str	r3, [r2, #0]
		}

		display7SEG_H(light_countdown_X);
 800073a:	4b5a      	ldr	r3, [pc, #360]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff2a 	bl	8000598 <display7SEG_H>
		display7SEG_V(light_countdown_Y);
 8000744:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff59 	bl	8000600 <display7SEG_V>
		if (is_button_pressed(0)) {
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fac4 	bl	8000cdc <is_button_pressed>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	f000 808d 	beq.w	8000876 <fsm_automatic_run+0x1ca>
			status = MAN_RED;
 800075c:	4b4a      	ldr	r3, [pc, #296]	@ (8000888 <fsm_automatic_run+0x1dc>)
 800075e:	220a      	movs	r2, #10
 8000760:	601a      	str	r2, [r3, #0]

			clear_all_light();
 8000762:	f000 fb95 	bl	8000e90 <clear_all_light>
			clearAll();
 8000766:	f7ff fe81 	bl	800046c <clearAll>

//			setTimer(LED7SEG, led7SEG_duration);
		}

		break;
 800076a:	e084      	b.n	8000876 <fsm_automatic_run+0x1ca>
	case AUTO_RED_YELLOW:
		light_red_X();
 800076c:	f000 fb00 	bl	8000d70 <light_red_X>
		light_yellow_Y();
 8000770:	f000 fb46 	bl	8000e00 <light_yellow_Y>

		count_second_by_timer7SEG_auto();
 8000774:	f7ff ff78 	bl	8000668 <count_second_by_timer7SEG_auto>
		if (light_countdown_X == 0) {
 8000778:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10a      	bne.n	8000796 <fsm_automatic_run+0xea>
			status = AUTO_GREEN_RED;
 8000780:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <fsm_automatic_run+0x1dc>)
 8000782:	2203      	movs	r2, #3
 8000784:	601a      	str	r2, [r3, #0]

			light_countdown_X = green_duration;
 8000786:	4b45      	ldr	r3, [pc, #276]	@ (800089c <fsm_automatic_run+0x1f0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a46      	ldr	r2, [pc, #280]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 800078c:	6013      	str	r3, [r2, #0]
			light_countdown_Y = red_duration;
 800078e:	4b3f      	ldr	r3, [pc, #252]	@ (800088c <fsm_automatic_run+0x1e0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a45      	ldr	r2, [pc, #276]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000794:	6013      	str	r3, [r2, #0]
		}

		display7SEG_H(light_countdown_X);
 8000796:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fefc 	bl	8000598 <display7SEG_H>
		display7SEG_V(light_countdown_Y);
 80007a0:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff2b 	bl	8000600 <display7SEG_V>

		if (is_button_pressed(0)) {
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 fa96 	bl	8000cdc <is_button_pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d061      	beq.n	800087a <fsm_automatic_run+0x1ce>
			status = MAN_RED;
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <fsm_automatic_run+0x1dc>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	601a      	str	r2, [r3, #0]

			clear_all_light();
 80007bc:	f000 fb68 	bl	8000e90 <clear_all_light>
			clearAll();
 80007c0:	f7ff fe54 	bl	800046c <clearAll>

//			setTimer(LED7SEG, led7SEG_duration);
		}

		break;
 80007c4:	e059      	b.n	800087a <fsm_automatic_run+0x1ce>
	case AUTO_GREEN_RED:
		light_green_X();
 80007c6:	f000 fb33 	bl	8000e30 <light_green_X>
		light_red_Y();
 80007ca:	f000 fae9 	bl	8000da0 <light_red_Y>

		count_second_by_timer7SEG_auto();
 80007ce:	f7ff ff4b 	bl	8000668 <count_second_by_timer7SEG_auto>

		if (light_countdown_X == 0) {
 80007d2:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d106      	bne.n	80007e8 <fsm_automatic_run+0x13c>
			status = AUTO_YELLOW_RED;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <fsm_automatic_run+0x1dc>)
 80007dc:	2204      	movs	r2, #4
 80007de:	601a      	str	r2, [r3, #0]

			light_countdown_X = yellow_duration;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <fsm_automatic_run+0x1e8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a2f      	ldr	r2, [pc, #188]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 80007e6:	6013      	str	r3, [r2, #0]
		}

		display7SEG_H(light_countdown_X);
 80007e8:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fed3 	bl	8000598 <display7SEG_H>
		display7SEG_V(light_countdown_Y);
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff02 	bl	8000600 <display7SEG_V>

		if (is_button_pressed(0)) {
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fa6d 	bl	8000cdc <is_button_pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d03a      	beq.n	800087e <fsm_automatic_run+0x1d2>
			status = MAN_RED;
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <fsm_automatic_run+0x1dc>)
 800080a:	220a      	movs	r2, #10
 800080c:	601a      	str	r2, [r3, #0]

			clear_all_light();
 800080e:	f000 fb3f 	bl	8000e90 <clear_all_light>
			clearAll();
 8000812:	f7ff fe2b 	bl	800046c <clearAll>

//			setTimer(LED7SEG, led7SEG_duration);
		}

		break;
 8000816:	e032      	b.n	800087e <fsm_automatic_run+0x1d2>
	case AUTO_YELLOW_RED:
		light_yellow_X();
 8000818:	f000 fada 	bl	8000dd0 <light_yellow_X>
		light_red_Y();
 800081c:	f000 fac0 	bl	8000da0 <light_red_Y>

		count_second_by_timer7SEG_auto();
 8000820:	f7ff ff22 	bl	8000668 <count_second_by_timer7SEG_auto>

		if (light_countdown_X == 0) {
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10a      	bne.n	8000842 <fsm_automatic_run+0x196>
			status = AUTO_RED_GREEN;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <fsm_automatic_run+0x1dc>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]

			light_countdown_X = red_duration;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <fsm_automatic_run+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 8000838:	6013      	str	r3, [r2, #0]
			light_countdown_Y = green_duration;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <fsm_automatic_run+0x1f0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1a      	ldr	r2, [pc, #104]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 8000840:	6013      	str	r3, [r2, #0]
		}

		display7SEG_H(light_countdown_X);
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <fsm_automatic_run+0x1f8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fea6 	bl	8000598 <display7SEG_H>
		display7SEG_V(light_countdown_Y);
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <fsm_automatic_run+0x1fc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fed5 	bl	8000600 <display7SEG_V>

		if (is_button_pressed(0)) {
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fa40 	bl	8000cdc <is_button_pressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00f      	beq.n	8000882 <fsm_automatic_run+0x1d6>
			status = MAN_RED;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <fsm_automatic_run+0x1dc>)
 8000864:	220a      	movs	r2, #10
 8000866:	601a      	str	r2, [r3, #0]

			clear_all_light();
 8000868:	f000 fb12 	bl	8000e90 <clear_all_light>
			clearAll();
 800086c:	f7ff fdfe 	bl	800046c <clearAll>

//			setTimer(LED7SEG, led7SEG_duration);
		}

		break;
 8000870:	e007      	b.n	8000882 <fsm_automatic_run+0x1d6>
	default:
		break;
 8000872:	bf00      	nop
 8000874:	e006      	b.n	8000884 <fsm_automatic_run+0x1d8>
		break;
 8000876:	bf00      	nop
 8000878:	e004      	b.n	8000884 <fsm_automatic_run+0x1d8>
		break;
 800087a:	bf00      	nop
 800087c:	e002      	b.n	8000884 <fsm_automatic_run+0x1d8>
		break;
 800087e:	bf00      	nop
 8000880:	e000      	b.n	8000884 <fsm_automatic_run+0x1d8>
		break;
 8000882:	bf00      	nop
	}
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000068 	.word	0x20000068
 800088c:	20000000 	.word	0x20000000
 8000890:	2000006c 	.word	0x2000006c
 8000894:	20000004 	.word	0x20000004
 8000898:	20000070 	.word	0x20000070
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000074 	.word	0x20000074
 80008a4:	20000078 	.word	0x20000078
 80008a8:	2000007c 	.word	0x2000007c

080008ac <fsm_manual_run>:
 *  Created on: Jun 24, 2025
 *      Author: Lenovo
 */
#include "fsm_manual.h"

void fsm_manual_run () {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch (status) {
 80008b0:	4b44      	ldr	r3, [pc, #272]	@ (80009c4 <fsm_manual_run+0x118>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b0c      	cmp	r3, #12
 80008b6:	d054      	beq.n	8000962 <fsm_manual_run+0xb6>
 80008b8:	2b0c      	cmp	r3, #12
 80008ba:	dc79      	bgt.n	80009b0 <fsm_manual_run+0x104>
 80008bc:	2b0a      	cmp	r3, #10
 80008be:	d002      	beq.n	80008c6 <fsm_manual_run+0x1a>
 80008c0:	2b0b      	cmp	r3, #11
 80008c2:	d027      	beq.n	8000914 <fsm_manual_run+0x68>

//			setTimer(LED7SEG, led7SEG_duration);
		}
		break;
	default:
		break;
 80008c4:	e074      	b.n	80009b0 <fsm_manual_run+0x104>
		check_timer_and_display(2, red_duration);
 80008c6:	4b40      	ldr	r3, [pc, #256]	@ (80009c8 <fsm_manual_run+0x11c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 f927 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fa02 	bl	8000cdc <is_button_pressed>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <fsm_manual_run+0x3c>
			status = MAN_YELLOW;
 80008de:	4b39      	ldr	r3, [pc, #228]	@ (80009c4 <fsm_manual_run+0x118>)
 80008e0:	220b      	movs	r2, #11
 80008e2:	601a      	str	r2, [r3, #0]
			clear_all_light();
 80008e4:	f000 fad4 	bl	8000e90 <clear_all_light>
		if (is_button_pressed(1)) {
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 f9f7 	bl	8000cdc <is_button_pressed>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d05f      	beq.n	80009b4 <fsm_manual_run+0x108>
			status = EDIT_RED;
 80008f4:	4b33      	ldr	r3, [pc, #204]	@ (80009c4 <fsm_manual_run+0x118>)
 80008f6:	2214      	movs	r2, #20
 80008f8:	601a      	str	r2, [r3, #0]
			red_edit++;
 80008fa:	4b34      	ldr	r3, [pc, #208]	@ (80009cc <fsm_manual_run+0x120>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a32      	ldr	r2, [pc, #200]	@ (80009cc <fsm_manual_run+0x120>)
 8000902:	6013      	str	r3, [r2, #0]
			if (red_edit > 99) {
 8000904:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <fsm_manual_run+0x120>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b63      	cmp	r3, #99	@ 0x63
 800090a:	dd53      	ble.n	80009b4 <fsm_manual_run+0x108>
				red_edit = 1;
 800090c:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <fsm_manual_run+0x120>)
 800090e:	2201      	movs	r2, #1
 8000910:	601a      	str	r2, [r3, #0]
		break;
 8000912:	e04f      	b.n	80009b4 <fsm_manual_run+0x108>
		check_timer_and_display(3, yellow_duration);
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <fsm_manual_run+0x124>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	2003      	movs	r0, #3
 800091c:	f000 f900 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f9db 	bl	8000cdc <is_button_pressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d004      	beq.n	8000936 <fsm_manual_run+0x8a>
			status = MAN_GREEN;
 800092c:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <fsm_manual_run+0x118>)
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
			clear_all_light();
 8000932:	f000 faad 	bl	8000e90 <clear_all_light>
		if (is_button_pressed(1)) {
 8000936:	2001      	movs	r0, #1
 8000938:	f000 f9d0 	bl	8000cdc <is_button_pressed>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d03a      	beq.n	80009b8 <fsm_manual_run+0x10c>
			status = EDIT_YELLOW;
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <fsm_manual_run+0x118>)
 8000944:	2215      	movs	r2, #21
 8000946:	601a      	str	r2, [r3, #0]
			yellow_edit++;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <fsm_manual_run+0x128>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <fsm_manual_run+0x128>)
 8000950:	6013      	str	r3, [r2, #0]
			if (yellow_edit > 99) {
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <fsm_manual_run+0x128>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b63      	cmp	r3, #99	@ 0x63
 8000958:	dd2e      	ble.n	80009b8 <fsm_manual_run+0x10c>
				yellow_edit = 1;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <fsm_manual_run+0x128>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
		break;
 8000960:	e02a      	b.n	80009b8 <fsm_manual_run+0x10c>
		check_timer_and_display(4, green_duration);
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <fsm_manual_run+0x12c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	2004      	movs	r0, #4
 800096a:	f000 f8d9 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f9b4 	bl	8000cdc <is_button_pressed>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <fsm_manual_run+0xd8>
			status = INIT;
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <fsm_manual_run+0x118>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
			clear_all_light();
 8000980:	f000 fa86 	bl	8000e90 <clear_all_light>
		if (is_button_pressed(1)) {
 8000984:	2001      	movs	r0, #1
 8000986:	f000 f9a9 	bl	8000cdc <is_button_pressed>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d015      	beq.n	80009bc <fsm_manual_run+0x110>
			status = EDIT_GREEN;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <fsm_manual_run+0x118>)
 8000992:	2216      	movs	r2, #22
 8000994:	601a      	str	r2, [r3, #0]
			green_edit++;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <fsm_manual_run+0x130>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3301      	adds	r3, #1
 800099c:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <fsm_manual_run+0x130>)
 800099e:	6013      	str	r3, [r2, #0]
			if(green_edit > 99) {
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <fsm_manual_run+0x130>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b63      	cmp	r3, #99	@ 0x63
 80009a6:	dd09      	ble.n	80009bc <fsm_manual_run+0x110>
				green_edit = 1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <fsm_manual_run+0x130>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
		break;
 80009ae:	e005      	b.n	80009bc <fsm_manual_run+0x110>
		break;
 80009b0:	bf00      	nop
 80009b2:	e004      	b.n	80009be <fsm_manual_run+0x112>
		break;
 80009b4:	bf00      	nop
 80009b6:	e002      	b.n	80009be <fsm_manual_run+0x112>
		break;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <fsm_manual_run+0x112>
		break;
 80009bc:	bf00      	nop
	}
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000068 	.word	0x20000068
 80009c8:	20000000 	.word	0x20000000
 80009cc:	2000006c 	.word	0x2000006c
 80009d0:	20000004 	.word	0x20000004
 80009d4:	20000070 	.word	0x20000070
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000074 	.word	0x20000074

080009e0 <fsm_setting_run>:
 *      Author: Lenovo
 */

#include "fsm_setting.h"

void fsm_setting_run() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	switch (status) {
 80009e4:	4b47      	ldr	r3, [pc, #284]	@ (8000b04 <fsm_setting_run+0x124>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b16      	cmp	r3, #22
 80009ea:	d058      	beq.n	8000a9e <fsm_setting_run+0xbe>
 80009ec:	2b16      	cmp	r3, #22
 80009ee:	dc7f      	bgt.n	8000af0 <fsm_setting_run+0x110>
 80009f0:	2b14      	cmp	r3, #20
 80009f2:	d002      	beq.n	80009fa <fsm_setting_run+0x1a>
 80009f4:	2b15      	cmp	r3, #21
 80009f6:	d029      	beq.n	8000a4c <fsm_setting_run+0x6c>
//			setTimer(LED7SEG, led7SEG_duration);
		}
		break;

	default:
		break;
 80009f8:	e07a      	b.n	8000af0 <fsm_setting_run+0x110>
		check_timer_and_display(2, red_edit);
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <fsm_setting_run+0x128>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 f88d 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {};
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f968 	bl	8000cdc <is_button_pressed>
		if (is_button_pressed(1)) {
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 f965 	bl	8000cdc <is_button_pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <fsm_setting_run+0x50>
			red_edit++;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	@ (8000b08 <fsm_setting_run+0x128>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b08 <fsm_setting_run+0x128>)
 8000a20:	6013      	str	r3, [r2, #0]
			if (red_edit > 99) red_edit = 1;
 8000a22:	4b39      	ldr	r3, [pc, #228]	@ (8000b08 <fsm_setting_run+0x128>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b63      	cmp	r3, #99	@ 0x63
 8000a28:	dd02      	ble.n	8000a30 <fsm_setting_run+0x50>
 8000a2a:	4b37      	ldr	r3, [pc, #220]	@ (8000b08 <fsm_setting_run+0x128>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 8000a30:	2002      	movs	r0, #2
 8000a32:	f000 f953 	bl	8000cdc <is_button_pressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d05b      	beq.n	8000af4 <fsm_setting_run+0x114>
			red_duration = red_edit;
 8000a3c:	4b32      	ldr	r3, [pc, #200]	@ (8000b08 <fsm_setting_run+0x128>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a32      	ldr	r2, [pc, #200]	@ (8000b0c <fsm_setting_run+0x12c>)
 8000a42:	6013      	str	r3, [r2, #0]
			status = MAN_RED;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <fsm_setting_run+0x124>)
 8000a46:	220a      	movs	r2, #10
 8000a48:	601a      	str	r2, [r3, #0]
		break;
 8000a4a:	e053      	b.n	8000af4 <fsm_setting_run+0x114>
		check_timer_and_display(3, yellow_edit);
 8000a4c:	4b30      	ldr	r3, [pc, #192]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	2003      	movs	r0, #3
 8000a54:	f000 f864 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {};
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f93f 	bl	8000cdc <is_button_pressed>
		if (is_button_pressed(1)) {
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 f93c 	bl	8000cdc <is_button_pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00b      	beq.n	8000a82 <fsm_setting_run+0xa2>
			yellow_edit++;
 8000a6a:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a72:	6013      	str	r3, [r2, #0]
			if (yellow_edit > 99) yellow_edit = 1;
 8000a74:	4b26      	ldr	r3, [pc, #152]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b63      	cmp	r3, #99	@ 0x63
 8000a7a:	dd02      	ble.n	8000a82 <fsm_setting_run+0xa2>
 8000a7c:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 8000a82:	2002      	movs	r0, #2
 8000a84:	f000 f92a 	bl	8000cdc <is_button_pressed>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d034      	beq.n	8000af8 <fsm_setting_run+0x118>
			yellow_duration = yellow_edit;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <fsm_setting_run+0x130>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <fsm_setting_run+0x134>)
 8000a94:	6013      	str	r3, [r2, #0]
			status = MAN_YELLOW;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <fsm_setting_run+0x124>)
 8000a98:	220b      	movs	r2, #11
 8000a9a:	601a      	str	r2, [r3, #0]
		break;
 8000a9c:	e02c      	b.n	8000af8 <fsm_setting_run+0x118>
		check_timer_and_display(4, green_edit);
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <fsm_setting_run+0x138>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f000 f83b 	bl	8000b20 <check_timer_and_display>
		if (is_button_pressed(0)) {};
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 f916 	bl	8000cdc <is_button_pressed>
		if (is_button_pressed(1)) {
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 f913 	bl	8000cdc <is_button_pressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <fsm_setting_run+0xf4>
			green_edit++;
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <fsm_setting_run+0x138>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a15      	ldr	r2, [pc, #84]	@ (8000b18 <fsm_setting_run+0x138>)
 8000ac4:	6013      	str	r3, [r2, #0]
			if (green_edit > 99) green_edit = 1;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <fsm_setting_run+0x138>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b63      	cmp	r3, #99	@ 0x63
 8000acc:	dd02      	ble.n	8000ad4 <fsm_setting_run+0xf4>
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <fsm_setting_run+0x138>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
		if (is_button_pressed(2)) {
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f000 f901 	bl	8000cdc <is_button_pressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00d      	beq.n	8000afc <fsm_setting_run+0x11c>
			green_duration = green_edit;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <fsm_setting_run+0x138>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <fsm_setting_run+0x13c>)
 8000ae6:	6013      	str	r3, [r2, #0]
			status = MAN_GREEN;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <fsm_setting_run+0x124>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
		break;
 8000aee:	e005      	b.n	8000afc <fsm_setting_run+0x11c>
		break;
 8000af0:	bf00      	nop
 8000af2:	e004      	b.n	8000afe <fsm_setting_run+0x11e>
		break;
 8000af4:	bf00      	nop
 8000af6:	e002      	b.n	8000afe <fsm_setting_run+0x11e>
		break;
 8000af8:	bf00      	nop
 8000afa:	e000      	b.n	8000afe <fsm_setting_run+0x11e>
		break;
 8000afc:	bf00      	nop
	}
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000068 	.word	0x20000068
 8000b08:	2000006c 	.word	0x2000006c
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000070 	.word	0x20000070
 8000b14:	20000004 	.word	0x20000004
 8000b18:	20000074 	.word	0x20000074
 8000b1c:	20000008 	.word	0x20000008

08000b20 <check_timer_and_display>:
int light_countdown_Y = 0;

int counter_for_7SEG = 0;
int led7SEG_duration = 250;

void check_timer_and_display(int mode, int duration) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	counter_for_7SEG++;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <check_timer_and_display+0x64>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <check_timer_and_display+0x64>)
 8000b32:	6013      	str	r3, [r2, #0]
	if (counter_for_7SEG >= 4) counter_for_7SEG = 0;
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <check_timer_and_display+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	dd02      	ble.n	8000b42 <check_timer_and_display+0x22>
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <check_timer_and_display+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
	if (counter_for_7SEG %2 == 0) {
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <check_timer_and_display+0x64>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d110      	bne.n	8000b70 <check_timer_and_display+0x50>
		if (mode == 2) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d102      	bne.n	8000b5a <check_timer_and_display+0x3a>
			blink_red();
 8000b54:	f000 f8dc 	bl	8000d10 <blink_red>
 8000b58:	e00a      	b.n	8000b70 <check_timer_and_display+0x50>
		}
		else if (mode == 3) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d102      	bne.n	8000b66 <check_timer_and_display+0x46>
			blink_yellow();
 8000b60:	f000 f8e6 	bl	8000d30 <blink_yellow>
 8000b64:	e004      	b.n	8000b70 <check_timer_and_display+0x50>
		}
		else if (mode == 4) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d101      	bne.n	8000b70 <check_timer_and_display+0x50>
			blink_green();
 8000b6c:	f000 f8f0 	bl	8000d50 <blink_green>
		}
	}

	display7SEG_H(mode);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fd11 	bl	8000598 <display7SEG_H>
	display7SEG_V(duration);
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f7ff fd42 	bl	8000600 <display7SEG_V>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000080 	.word	0x20000080

08000b88 <getKeyInput>:
int keyReg0[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg1[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg2[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int keyReg3[BTN_COUNT] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

void getKeyInput() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	uint8_t index;
	for (index = 0; index < BTN_COUNT; index++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e08c      	b.n	8000cae <getKeyInput+0x126>
		keyReg2[index] = keyReg1[index];
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4949      	ldr	r1, [pc, #292]	@ (8000cc0 <getKeyInput+0x138>)
 8000b9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b9e:	4949      	ldr	r1, [pc, #292]	@ (8000cc4 <getKeyInput+0x13c>)
 8000ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[index] = keyReg0[index];
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4947      	ldr	r1, [pc, #284]	@ (8000cc8 <getKeyInput+0x140>)
 8000baa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bae:	4944      	ldr	r1, [pc, #272]	@ (8000cc0 <getKeyInput+0x138>)
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (index == 0) {
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10b      	bne.n	8000bd2 <getKeyInput+0x4a>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4843      	ldr	r0, [pc, #268]	@ (8000ccc <getKeyInput+0x144>)
 8000bbe:	f000 fffb 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc8 <getKeyInput+0x140>)
 8000bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bd0:	e01c      	b.n	8000c0c <getKeyInput+0x84>
		}
		else if (index == 1) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10b      	bne.n	8000bf0 <getKeyInput+0x68>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000bd8:	2120      	movs	r1, #32
 8000bda:	483c      	ldr	r0, [pc, #240]	@ (8000ccc <getKeyInput+0x144>)
 8000bdc:	f000 ffec 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4a37      	ldr	r2, [pc, #220]	@ (8000cc8 <getKeyInput+0x140>)
 8000bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bee:	e00d      	b.n	8000c0c <getKeyInput+0x84>
		}
		else if (index == 2) {
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d10a      	bne.n	8000c0c <getKeyInput+0x84>
			keyReg0[index] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000bf6:	2140      	movs	r1, #64	@ 0x40
 8000bf8:	4834      	ldr	r0, [pc, #208]	@ (8000ccc <getKeyInput+0x144>)
 8000bfa:	f000 ffdd 	bl	8001bb8 <HAL_GPIO_ReadPin>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a30      	ldr	r2, [pc, #192]	@ (8000cc8 <getKeyInput+0x140>)
 8000c08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if (keyReg0[index] == keyReg1[index] && keyReg1[index] == keyReg2[index]) {
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc8 <getKeyInput+0x140>)
 8000c10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	492a      	ldr	r1, [pc, #168]	@ (8000cc0 <getKeyInput+0x138>)
 8000c18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d143      	bne.n	8000ca8 <getKeyInput+0x120>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a27      	ldr	r2, [pc, #156]	@ (8000cc0 <getKeyInput+0x138>)
 8000c24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4926      	ldr	r1, [pc, #152]	@ (8000cc4 <getKeyInput+0x13c>)
 8000c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d139      	bne.n	8000ca8 <getKeyInput+0x120>
			if (keyReg0[index] != keyReg3[index]) {
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <getKeyInput+0x140>)
 8000c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4924      	ldr	r1, [pc, #144]	@ (8000cd0 <getKeyInput+0x148>)
 8000c40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d02f      	beq.n	8000ca8 <getKeyInput+0x120>
				keyReg3[index] = keyReg0[index];
 8000c48:	79fa      	ldrb	r2, [r7, #7]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	491e      	ldr	r1, [pc, #120]	@ (8000cc8 <getKeyInput+0x140>)
 8000c4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c52:	491f      	ldr	r1, [pc, #124]	@ (8000cd0 <getKeyInput+0x148>)
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg0[index] == PRESSED_STATE) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc8 <getKeyInput+0x140>)
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <getKeyInput+0xf0>
					TimeOutForKeyPress = 500;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <getKeyInput+0x14c>)
 8000c66:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c6a:	601a      	str	r2, [r3, #0]
					button_flag[index] = 1;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000cd8 <getKeyInput+0x150>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c76:	e017      	b.n	8000ca8 <getKeyInput+0x120>
				}
				else {
					TimeOutForKeyPress--;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <getKeyInput+0x14c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <getKeyInput+0x14c>)
 8000c80:	6013      	str	r3, [r2, #0]
					if (TimeOutForKeyPress == 0) {
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <getKeyInput+0x14c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10e      	bne.n	8000ca8 <getKeyInput+0x120>
						TimeOutForKeyPress = 500;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <getKeyInput+0x14c>)
 8000c8c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c90:	601a      	str	r2, [r3, #0]
						if (keyReg0[index] == PRESSED_STATE) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc8 <getKeyInput+0x140>)
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d104      	bne.n	8000ca8 <getKeyInput+0x120>
							button_flag[index] = 1;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <getKeyInput+0x150>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; index < BTN_COUNT; index++) {
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	3301      	adds	r3, #1
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	f67f af6f 	bls.w	8000b94 <getKeyInput+0xc>
				}
			}
		}
	}

}
 8000cb6:	bf00      	nop
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	20000028 	.word	0x20000028
 8000cc8:	20000010 	.word	0x20000010
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	20000034 	.word	0x20000034
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	20000084 	.word	0x20000084

08000cdc <is_button_pressed>:


int is_button_pressed(int index) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <is_button_pressed+0x30>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d106      	bne.n	8000cfe <is_button_pressed+0x22>
		button_flag[index] = 0;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <is_button_pressed+0x30>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <is_button_pressed+0x24>
	}
	return 0;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000084 	.word	0x20000084

08000d10 <blink_red>:
 *      Author: Lenovo
 */

#include "led_blinking.h"

void blink_red() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin);
 8000d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <blink_red+0x1c>)
 8000d1a:	f000 ff7c 	bl	8001c16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin);
 8000d1e:	2180      	movs	r1, #128	@ 0x80
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <blink_red+0x1c>)
 8000d22:	f000 ff78 	bl	8001c16 <HAL_GPIO_TogglePin>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010800 	.word	0x40010800

08000d30 <blink_yellow>:

void blink_yellow() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin);
 8000d34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <blink_yellow+0x1c>)
 8000d3a:	f000 ff6c 	bl	8001c16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin);
 8000d3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d42:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <blink_yellow+0x1c>)
 8000d44:	f000 ff67 	bl	8001c16 <HAL_GPIO_TogglePin>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40010800 	.word	0x40010800

08000d50 <blink_green>:

void blink_green() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin);
 8000d54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <blink_green+0x1c>)
 8000d5a:	f000 ff5c 	bl	8001c16 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin);
 8000d5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d62:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <blink_green+0x1c>)
 8000d64:	f000 ff57 	bl	8001c16 <HAL_GPIO_TogglePin>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010800 	.word	0x40010800

08000d70 <light_red_X>:
 *      Author: Lenovo
 */

#include "light_control.h"

void light_red_X() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d7a:	4808      	ldr	r0, [pc, #32]	@ (8000d9c <light_red_X+0x2c>)
 8000d7c:	f000 ff33 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <light_red_X+0x2c>)
 8000d88:	f000 ff2d 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d92:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <light_red_X+0x2c>)
 8000d94:	f000 ff27 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010800 	.word	0x40010800

08000da0 <light_red_Y>:

void light_red_Y() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2180      	movs	r1, #128	@ 0x80
 8000da8:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <light_red_Y+0x2c>)
 8000daa:	f000 ff1c 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <light_red_Y+0x2c>)
 8000db6:	f000 ff16 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <light_red_Y+0x2c>)
 8000dc2:	f000 ff10 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40010800 	.word	0x40010800

08000dd0 <light_yellow_X>:

void light_yellow_X() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4808      	ldr	r0, [pc, #32]	@ (8000dfc <light_yellow_X+0x2c>)
 8000ddc:	f000 ff03 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <light_yellow_X+0x2c>)
 8000de8:	f000 fefd 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df2:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <light_yellow_X+0x2c>)
 8000df4:	f000 fef7 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010800 	.word	0x40010800

08000e00 <light_yellow_Y>:

void light_yellow_Y() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <light_yellow_Y+0x2c>)
 8000e0a:	f000 feec 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <light_yellow_Y+0x2c>)
 8000e16:	f000 fee6 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <light_yellow_Y+0x2c>)
 8000e22:	f000 fee0 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010800 	.word	0x40010800

08000e30 <light_green_X>:

void light_green_X() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3a:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <light_green_X+0x2c>)
 8000e3c:	f000 fed3 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <light_green_X+0x2c>)
 8000e48:	f000 fecd 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin, SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e52:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <light_green_X+0x2c>)
 8000e54:	f000 fec7 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40010800 	.word	0x40010800

08000e60 <light_green_Y>:

void light_green_Y() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2180      	movs	r1, #128	@ 0x80
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <light_green_Y+0x2c>)
 8000e6a:	f000 febc 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <light_green_Y+0x2c>)
 8000e76:	f000 feb6 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <light_green_Y+0x2c>)
 8000e82:	f000 feb0 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010800 	.word	0x40010800

08000e90 <clear_all_light>:

void clear_all_light () {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_X_GPIO_Port, Red_Led_X_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9a:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <clear_all_light+0x50>)
 8000e9c:	f000 fea3 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_X_GPIO_Port, Yellow_Led_X_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea6:	480e      	ldr	r0, [pc, #56]	@ (8000ee0 <clear_all_light+0x50>)
 8000ea8:	f000 fe9d 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_X_GPIO_Port, Green_Led_X_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <clear_all_light+0x50>)
 8000eb4:	f000 fe97 	bl	8001be6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(Red_Led_Y_GPIO_Port, Red_Led_Y_Pin, RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	4808      	ldr	r0, [pc, #32]	@ (8000ee0 <clear_all_light+0x50>)
 8000ebe:	f000 fe92 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_Led_Y_GPIO_Port, Yellow_Led_Y_Pin, RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <clear_all_light+0x50>)
 8000eca:	f000 fe8c 	bl	8001be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_Led_Y_GPIO_Port, Green_Led_Y_Pin, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <clear_all_light+0x50>)
 8000ed6:	f000 fe86 	bl	8001be6 <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fb72 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f846 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f8cc 	bl	800108c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f87e 	bl	8000ff4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ef8:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <main+0x70>)
 8000efa:	f001 fad3 	bl	80024a4 <HAL_TIM_Base_Start_IT>

  status = INIT;
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <main+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
  red_duration = 5;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <main+0x78>)
 8000f06:	2205      	movs	r2, #5
 8000f08:	601a      	str	r2, [r3, #0]
  yellow_duration = 2;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <main+0x7c>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	601a      	str	r2, [r3, #0]
  green_duration = 3;
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <main+0x80>)
 8000f12:	2203      	movs	r2, #3
 8000f14:	601a      	str	r2, [r3, #0]

  SCH_Init();
 8000f16:	f000 f92b 	bl	8001170 <SCH_Init>
  SCH_Add_Task(unittest_blink, 0, 500);
 8000f1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <main+0x84>)
 8000f22:	f000 f9f7 	bl	8001314 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 250, 250);
 8000f26:	22fa      	movs	r2, #250	@ 0xfa
 8000f28:	21fa      	movs	r1, #250	@ 0xfa
 8000f2a:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <main+0x88>)
 8000f2c:	f000 f9f2 	bl	8001314 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 250, 250);
 8000f30:	22fa      	movs	r2, #250	@ 0xfa
 8000f32:	21fa      	movs	r1, #250	@ 0xfa
 8000f34:	480e      	ldr	r0, [pc, #56]	@ (8000f70 <main+0x8c>)
 8000f36:	f000 f9ed 	bl	8001314 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 250, 250);
 8000f3a:	22fa      	movs	r2, #250	@ 0xfa
 8000f3c:	21fa      	movs	r1, #250	@ 0xfa
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <main+0x90>)
 8000f40:	f000 f9e8 	bl	8001314 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 10, 10);
 8000f44:	220a      	movs	r2, #10
 8000f46:	210a      	movs	r1, #10
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <main+0x94>)
 8000f4a:	f000 f9e3 	bl	8001314 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Task();
 8000f4e:	f000 f995 	bl	800127c <SCH_Dispatch_Task>
 8000f52:	e7fc      	b.n	8000f4e <main+0x6a>
 8000f54:	20000090 	.word	0x20000090
 8000f58:	20000068 	.word	0x20000068
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004
 8000f64:	20000008 	.word	0x20000008
 8000f68:	0800156d 	.word	0x0800156d
 8000f6c:	080006ad 	.word	0x080006ad
 8000f70:	080008ad 	.word	0x080008ad
 8000f74:	080009e1 	.word	0x080009e1
 8000f78:	08000b89 	.word	0x08000b89

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b090      	sub	sp, #64	@ 0x40
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	2228      	movs	r2, #40	@ 0x28
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fe0e 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fe48 	bl	8001c48 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f8d1 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 f8b6 	bl	800214c <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 f8bd 	bl	8001164 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	@ 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001010:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001012:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_TIM2_Init+0x94>)
 800101a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001028:	2209      	movs	r2, #9
 800102a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_TIM2_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	@ (8001088 <MX_TIM2_Init+0x94>)
 800103a:	f001 f9e3 	bl	8002404 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 f88e 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001056:	f001 fb61 	bl	800271c <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 f880 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_TIM2_Init+0x94>)
 8001072:	f001 fd31 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 f872 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000090 	.word	0x20000090

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0308 	add.w	r3, r7, #8
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <MX_GPIO_Init+0xb8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_Led_Y_Pin|Yellow_Led_Y_Pin|Green_Led_Y_Pin|Red_Led_X_Pin
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 80010d6:	481c      	ldr	r0, [pc, #112]	@ (8001148 <MX_GPIO_Init+0xbc>)
 80010d8:	f000 fd85 	bl	8001be6 <HAL_GPIO_WritePin>
                          |Yellow_Led_X_Pin|Green_Led_X_Pin|Blink_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_H_Pin|B_H_Pin|C_H_Pin|EN3_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80010e2:	481a      	ldr	r0, [pc, #104]	@ (800114c <MX_GPIO_Init+0xc0>)
 80010e4:	f000 fd7f 	bl	8001be6 <HAL_GPIO_WritePin>
                          |D_H_Pin|E_H_Pin|F_H_Pin|G_H_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80010e8:	2370      	movs	r3, #112	@ 0x70
 80010ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	4813      	ldr	r0, [pc, #76]	@ (8001148 <MX_GPIO_Init+0xbc>)
 80010fc:	f000 fbd8 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Led_Y_Pin Yellow_Led_Y_Pin Green_Led_Y_Pin Red_Led_X_Pin
                           Yellow_Led_X_Pin Green_Led_X_Pin Blink_led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Y_Pin|Yellow_Led_Y_Pin|Green_Led_Y_Pin|Red_Led_X_Pin
 8001100:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8001104:	60bb      	str	r3, [r7, #8]
                          |Yellow_Led_X_Pin|Green_Led_X_Pin|Blink_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	@ (8001148 <MX_GPIO_Init+0xbc>)
 800111a:	f000 fbc9 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_H_Pin B_H_Pin C_H_Pin EN3_Pin
                           D_H_Pin E_H_Pin F_H_Pin G_H_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = A_H_Pin|B_H_Pin|C_H_Pin|EN3_Pin
 800111e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001122:	60bb      	str	r3, [r7, #8]
                          |D_H_Pin|E_H_Pin|F_H_Pin|G_H_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_GPIO_Init+0xc0>)
 8001138:	f000 fbba 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00

08001150 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	SCH_Updated();
 8001158:	f000 f820 	bl	800119c <SCH_Updated>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <SCH_Init>:
#define RETURN_NORMAL	1
#define tick 			10

sTask SCH_task_G[SCH_MAX_TASK];

void SCH_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	uint8_t index;

	for (index = 0; index < SCH_MAX_TASK; index++) {
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e006      	b.n	800118a <SCH_Init+0x1a>
		SCH_Delete_Task(index);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f920 	bl	80013c4 <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASK; index++) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3301      	adds	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b27      	cmp	r3, #39	@ 0x27
 800118e:	d9f5      	bls.n	800117c <SCH_Init+0xc>
	}
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <SCH_Updated>:

void SCH_Updated(void) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
	uint8_t index;

	for (index = 0; index < SCH_MAX_TASK; index++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	e05d      	b.n	8001264 <SCH_Updated+0xc8>
		if (SCH_task_G[index].pTask) {
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	4933      	ldr	r1, [pc, #204]	@ (8001278 <SCH_Updated+0xdc>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d050      	beq.n	800125e <SCH_Updated+0xc2>
			if (SCH_task_G[index].Delay == 0) {
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	492e      	ldr	r1, [pc, #184]	@ (8001278 <SCH_Updated+0xdc>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d132      	bne.n	8001238 <SCH_Updated+0x9c>
				SCH_task_G[index].RunMe += 1;
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4928      	ldr	r1, [pc, #160]	@ (8001278 <SCH_Updated+0xdc>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	330c      	adds	r3, #12
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	4923      	ldr	r1, [pc, #140]	@ (8001278 <SCH_Updated+0xdc>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	4602      	mov	r2, r0
 80011fa:	701a      	strb	r2, [r3, #0]
				if (SCH_task_G[index].Period) {
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	491e      	ldr	r1, [pc, #120]	@ (8001278 <SCH_Updated+0xdc>)
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3308      	adds	r3, #8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d025      	beq.n	800125e <SCH_Updated+0xc2>
					SCH_task_G[index].Delay = SCH_task_G[index].Period;
 8001212:	79f9      	ldrb	r1, [r7, #7]
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	4818      	ldr	r0, [pc, #96]	@ (8001278 <SCH_Updated+0xdc>)
 8001218:	460b      	mov	r3, r1
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4403      	add	r3, r0
 8001222:	3308      	adds	r3, #8
 8001224:	6819      	ldr	r1, [r3, #0]
 8001226:	4814      	ldr	r0, [pc, #80]	@ (8001278 <SCH_Updated+0xdc>)
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	3304      	adds	r3, #4
 8001234:	6019      	str	r1, [r3, #0]
 8001236:	e012      	b.n	800125e <SCH_Updated+0xc2>
				}
			}
			else {
				SCH_task_G[index].Delay -= 1;
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	490f      	ldr	r1, [pc, #60]	@ (8001278 <SCH_Updated+0xdc>)
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	1e59      	subs	r1, r3, #1
 800124e:	480a      	ldr	r0, [pc, #40]	@ (8001278 <SCH_Updated+0xdc>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4403      	add	r3, r0
 800125a:	3304      	adds	r3, #4
 800125c:	6019      	str	r1, [r3, #0]
	for (index = 0; index < SCH_MAX_TASK; index++) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	3301      	adds	r3, #1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b27      	cmp	r3, #39	@ 0x27
 8001268:	d99e      	bls.n	80011a8 <SCH_Updated+0xc>
			}
		}
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200000d8 	.word	0x200000d8

0800127c <SCH_Dispatch_Task>:

void SCH_Dispatch_Task() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	uint8_t index;

	for (index = 0; index < SCH_MAX_TASK; index++) {
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e03a      	b.n	80012fe <SCH_Dispatch_Task+0x82>
		if (SCH_task_G[index].RunMe > 0) {
 8001288:	79fa      	ldrb	r2, [r7, #7]
 800128a:	4921      	ldr	r1, [pc, #132]	@ (8001310 <SCH_Dispatch_Task+0x94>)
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	330c      	adds	r3, #12
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01d      	beq.n	80012da <SCH_Dispatch_Task+0x5e>
			(*SCH_task_G[index].pTask)();
 800129e:	79fa      	ldrb	r2, [r7, #7]
 80012a0:	491b      	ldr	r1, [pc, #108]	@ (8001310 <SCH_Dispatch_Task+0x94>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4798      	blx	r3
			SCH_task_G[index].RunMe -= 1;
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4917      	ldr	r1, [pc, #92]	@ (8001310 <SCH_Dispatch_Task+0x94>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	330c      	adds	r3, #12
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	4911      	ldr	r1, [pc, #68]	@ (8001310 <SCH_Dispatch_Task+0x94>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	330c      	adds	r3, #12
 80012d6:	4602      	mov	r2, r0
 80012d8:	701a      	strb	r2, [r3, #0]
		}
		if (SCH_task_G[index].Period == 0) {
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	490c      	ldr	r1, [pc, #48]	@ (8001310 <SCH_Dispatch_Task+0x94>)
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3308      	adds	r3, #8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <SCH_Dispatch_Task+0x7c>
			SCH_Delete_Task(index);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f866 	bl	80013c4 <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASK; index++) {
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3301      	adds	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b27      	cmp	r3, #39	@ 0x27
 8001302:	d9c1      	bls.n	8001288 <SCH_Dispatch_Task+0xc>
		}
	}
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000d8 	.word	0x200000d8

08001314 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	75fb      	strb	r3, [r7, #23]

	while((SCH_task_G[index].pTask != 0) && (index < SCH_MAX_TASK)) {
 8001324:	e002      	b.n	800132c <SCH_Add_Task+0x18>
		index++;
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	3301      	adds	r3, #1
 800132a:	75fb      	strb	r3, [r7, #23]
	while((SCH_task_G[index].pTask != 0) && (index < SCH_MAX_TASK)) {
 800132c:	7dfa      	ldrb	r2, [r7, #23]
 800132e:	4923      	ldr	r1, [pc, #140]	@ (80013bc <SCH_Add_Task+0xa8>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <SCH_Add_Task+0x32>
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b27      	cmp	r3, #39	@ 0x27
 8001344:	d9ef      	bls.n	8001326 <SCH_Add_Task+0x12>
	}
	if (index == SCH_MAX_TASK) {
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b28      	cmp	r3, #40	@ 0x28
 800134a:	d101      	bne.n	8001350 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASK;
 800134c:	2328      	movs	r3, #40	@ 0x28
 800134e:	e02f      	b.n	80013b0 <SCH_Add_Task+0x9c>
	}

	SCH_task_G[index].pTask = pFunction;
 8001350:	7dfa      	ldrb	r2, [r7, #23]
 8001352:	491a      	ldr	r1, [pc, #104]	@ (80013bc <SCH_Add_Task+0xa8>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	601a      	str	r2, [r3, #0]
	SCH_task_G[index].Delay = DELAY/tick;
 8001362:	7dfa      	ldrb	r2, [r7, #23]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4916      	ldr	r1, [pc, #88]	@ (80013c0 <SCH_Add_Task+0xac>)
 8001368:	fba1 1303 	umull	r1, r3, r1, r3
 800136c:	08d9      	lsrs	r1, r3, #3
 800136e:	4813      	ldr	r0, [pc, #76]	@ (80013bc <SCH_Add_Task+0xa8>)
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4403      	add	r3, r0
 800137a:	3304      	adds	r3, #4
 800137c:	6019      	str	r1, [r3, #0]
	SCH_task_G[index].RunMe = 0;
 800137e:	7dfa      	ldrb	r2, [r7, #23]
 8001380:	490e      	ldr	r1, [pc, #56]	@ (80013bc <SCH_Add_Task+0xa8>)
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	330c      	adds	r3, #12
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	SCH_task_G[index].Period = PERIOD/tick;
 8001392:	7dfa      	ldrb	r2, [r7, #23]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	490a      	ldr	r1, [pc, #40]	@ (80013c0 <SCH_Add_Task+0xac>)
 8001398:	fba1 1303 	umull	r1, r3, r1, r3
 800139c:	08d9      	lsrs	r1, r3, #3
 800139e:	4807      	ldr	r0, [pc, #28]	@ (80013bc <SCH_Add_Task+0xa8>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4403      	add	r3, r0
 80013aa:	3308      	adds	r3, #8
 80013ac:	6019      	str	r1, [r3, #0]

	return index;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000d8 	.word	0x200000d8
 80013c0:	cccccccd 	.word	0xcccccccd

080013c4 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t taskID) {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	uint8_t Return_code;

	if (SCH_task_G[taskID].pTask == 0) {
 80013cc:	491d      	ldr	r1, [pc, #116]	@ (8001444 <SCH_Delete_Task+0x80>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <SCH_Delete_Task+0x22>
		Return_code = RETURN_ERROR;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <SCH_Delete_Task+0x26>
	}
	else {
		Return_code = RETURN_NORMAL;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
	}

	SCH_task_G[taskID].pTask = 0x0000;
 80013ea:	4916      	ldr	r1, [pc, #88]	@ (8001444 <SCH_Delete_Task+0x80>)
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
	SCH_task_G[taskID].Delay = 0;
 80013fc:	4911      	ldr	r1, [pc, #68]	@ (8001444 <SCH_Delete_Task+0x80>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	3304      	adds	r3, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	SCH_task_G[taskID].RunMe = 0;
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <SCH_Delete_Task+0x80>)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	330c      	adds	r3, #12
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
	SCH_task_G[taskID].Period = 0;
 8001424:	4907      	ldr	r1, [pc, #28]	@ (8001444 <SCH_Delete_Task+0x80>)
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3308      	adds	r3, #8
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

	return Return_code;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	200000d8 	.word	0x200000d8

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <HAL_MspInit+0x60>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <HAL_MspInit+0x60>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 f9b1 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f000 f9ca 	bl	800187a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f88a 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <TIM2_IRQHandler+0x10>)
 8001552:	f000 fff3 	bl	800253c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000090 	.word	0x20000090

08001560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <unittest_blink>:
 *  Created on: Jun 25, 2025
 *      Author: Lenovo
 */
#include "unittest.h"

void unittest_blink() {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Blink_led_GPIO_Port, Blink_led_Pin);
 8001570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <unittest_blink+0x14>)
 8001576:	f000 fb4e 	bl	8001c16 <HAL_GPIO_TogglePin>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010800 	.word	0x40010800

08001584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f7ff ffec 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158a:	490c      	ldr	r1, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800158c:	4a0c      	ldr	r2, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a09      	ldr	r2, [pc, #36]	@ (80015c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a0:	4c09      	ldr	r4, [pc, #36]	@ (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f001 fb05 	bl	8002bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b2:	f7ff fc97 	bl	8000ee4 <main>
  bx lr
 80015b6:	4770      	bx	lr
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80015c0:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 80015c4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80015c8:	200003fc 	.word	0x200003fc

080015cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <HAL_Init+0x28>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_Init+0x28>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f923 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	200f      	movs	r0, #15
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff ff2c 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40022000 	.word	0x40022000

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f93b 	bl	8001896 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 f903 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	@ (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000040 	.word	0x20000040
 8001654:	20000048 	.word	0x20000048
 8001658:	20000044 	.word	0x20000044

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_IncTick+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x20>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a03      	ldr	r2, [pc, #12]	@ (800167c <HAL_IncTick+0x20>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000048 	.word	0x20000048
 800167c:	200003f8 	.word	0x200003f8

08001680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b02      	ldr	r3, [pc, #8]	@ (8001690 <HAL_GetTick+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	200003f8 	.word	0x200003f8

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	2b00      	cmp	r3, #0
 8001708:	db0b      	blt.n	8001722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	4906      	ldr	r1, [pc, #24]	@ (800172c <__NVIC_EnableIRQ+0x34>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	2001      	movs	r0, #1
 800171a:	fa00 f202 	lsl.w	r2, r0, r2
 800171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	@ (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff90 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff2d 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff42 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff90 	bl	8001784 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5f 	bl	8001730 <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff35 	bl	80016f8 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b08b      	sub	sp, #44	@ 0x2c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e169      	b.n	8001b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c4:	2201      	movs	r2, #1
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8158 	bne.w	8001b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b50 <HAL_GPIO_Init+0x2a0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d05e      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 80018ec:	4a98      	ldr	r2, [pc, #608]	@ (8001b50 <HAL_GPIO_Init+0x2a0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d875      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 80018f2:	4a98      	ldr	r2, [pc, #608]	@ (8001b54 <HAL_GPIO_Init+0x2a4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d058      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 80018f8:	4a96      	ldr	r2, [pc, #600]	@ (8001b54 <HAL_GPIO_Init+0x2a4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d86f      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 80018fe:	4a96      	ldr	r2, [pc, #600]	@ (8001b58 <HAL_GPIO_Init+0x2a8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d052      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 8001904:	4a94      	ldr	r2, [pc, #592]	@ (8001b58 <HAL_GPIO_Init+0x2a8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d869      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 800190a:	4a94      	ldr	r2, [pc, #592]	@ (8001b5c <HAL_GPIO_Init+0x2ac>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04c      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 8001910:	4a92      	ldr	r2, [pc, #584]	@ (8001b5c <HAL_GPIO_Init+0x2ac>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d863      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 8001916:	4a92      	ldr	r2, [pc, #584]	@ (8001b60 <HAL_GPIO_Init+0x2b0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d046      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
 800191c:	4a90      	ldr	r2, [pc, #576]	@ (8001b60 <HAL_GPIO_Init+0x2b0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d85d      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 8001922:	2b12      	cmp	r3, #18
 8001924:	d82a      	bhi.n	800197c <HAL_GPIO_Init+0xcc>
 8001926:	2b12      	cmp	r3, #18
 8001928:	d859      	bhi.n	80019de <HAL_GPIO_Init+0x12e>
 800192a:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <HAL_GPIO_Init+0x80>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	080019ab 	.word	0x080019ab
 8001934:	08001985 	.word	0x08001985
 8001938:	08001997 	.word	0x08001997
 800193c:	080019d9 	.word	0x080019d9
 8001940:	080019df 	.word	0x080019df
 8001944:	080019df 	.word	0x080019df
 8001948:	080019df 	.word	0x080019df
 800194c:	080019df 	.word	0x080019df
 8001950:	080019df 	.word	0x080019df
 8001954:	080019df 	.word	0x080019df
 8001958:	080019df 	.word	0x080019df
 800195c:	080019df 	.word	0x080019df
 8001960:	080019df 	.word	0x080019df
 8001964:	080019df 	.word	0x080019df
 8001968:	080019df 	.word	0x080019df
 800196c:	080019df 	.word	0x080019df
 8001970:	080019df 	.word	0x080019df
 8001974:	0800198d 	.word	0x0800198d
 8001978:	080019a1 	.word	0x080019a1
 800197c:	4a79      	ldr	r2, [pc, #484]	@ (8001b64 <HAL_GPIO_Init+0x2b4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001982:	e02c      	b.n	80019de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e029      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e024      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	3308      	adds	r3, #8
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e01f      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	330c      	adds	r3, #12
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e01a      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019b2:	2304      	movs	r3, #4
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e013      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	611a      	str	r2, [r3, #16]
          break;
 80019ca:	e009      	b.n	80019e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	615a      	str	r2, [r3, #20]
          break;
 80019d6:	e003      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x130>
          break;
 80019de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2bff      	cmp	r3, #255	@ 0xff
 80019e4:	d801      	bhi.n	80019ea <HAL_GPIO_Init+0x13a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	e001      	b.n	80019ee <HAL_GPIO_Init+0x13e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	@ 0xff
 80019f4:	d802      	bhi.n	80019fc <HAL_GPIO_Init+0x14c>
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x152>
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	3b08      	subs	r3, #8
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	210f      	movs	r1, #15
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80b1 	beq.w	8001b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a30:	4b4d      	ldr	r3, [pc, #308]	@ (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a4c      	ldr	r2, [pc, #304]	@ (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a48:	4a48      	ldr	r2, [pc, #288]	@ (8001b6c <HAL_GPIO_Init+0x2bc>)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a40      	ldr	r2, [pc, #256]	@ (8001b70 <HAL_GPIO_Init+0x2c0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_GPIO_Init+0x1ec>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a3f      	ldr	r2, [pc, #252]	@ (8001b74 <HAL_GPIO_Init+0x2c4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d00d      	beq.n	8001a98 <HAL_GPIO_Init+0x1e8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b78 <HAL_GPIO_Init+0x2c8>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d007      	beq.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a3d      	ldr	r2, [pc, #244]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_GPIO_Init+0x1e0>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1ee>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aae:	492f      	ldr	r1, [pc, #188]	@ (8001b6c <HAL_GPIO_Init+0x2bc>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	492c      	ldr	r1, [pc, #176]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4928      	ldr	r1, [pc, #160]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af0:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4922      	ldr	r1, [pc, #136]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	491e      	ldr	r1, [pc, #120]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4914      	ldr	r1, [pc, #80]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d021      	beq.n	8001b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	490e      	ldr	r1, [pc, #56]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e021      	b.n	8001b92 <HAL_GPIO_Init+0x2e2>
 8001b4e:	bf00      	nop
 8001b50:	10320000 	.word	0x10320000
 8001b54:	10310000 	.word	0x10310000
 8001b58:	10220000 	.word	0x10220000
 8001b5c:	10210000 	.word	0x10210000
 8001b60:	10120000 	.word	0x10120000
 8001b64:	10110000 	.word	0x10110000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40010800 	.word	0x40010800
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	40011000 	.word	0x40011000
 8001b7c:	40011400 	.word	0x40011400
 8001b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4909      	ldr	r1, [pc, #36]	@ (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae8e 	bne.w	80018c4 <HAL_GPIO_Init+0x14>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	372c      	adds	r7, #44	@ 0x2c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	807b      	strh	r3, [r7, #2]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf6:	787b      	ldrb	r3, [r7, #1]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c02:	e003      	b.n	8001c0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	400b      	ands	r3, r1
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e272      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b92      	ldr	r3, [pc, #584]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c74:	4b8f      	ldr	r3, [pc, #572]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x12c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e24c      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x76>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b78      	ldr	r3, [pc, #480]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a77      	ldr	r2, [pc, #476]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xbc>
 8001cea:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fcac 	bl	8001680 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fca8 	bl	8001680 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e200      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe4>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fc98 	bl	8001680 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fc94 	bl	8001680 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1ec      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x10c>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8e:	4b49      	ldr	r3, [pc, #292]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
 8001d9a:	4b46      	ldr	r3, [pc, #280]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1c0      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4939      	ldr	r1, [pc, #228]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fc4d 	bl	8001680 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fc49 	bl	8001680 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1a1      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4927      	ldr	r1, [pc, #156]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fc2c 	bl	8001680 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fc28 	bl	8001680 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e180      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03a      	beq.n	8001ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fc0c 	bl	8001680 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fc08 	bl	8001680 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e160      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 fa9c 	bl	80023c8 <RCC_Delay>
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fbf2 	bl	8001680 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fbee 	bl	8001680 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e146      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	42420000 	.word	0x42420000
 8001ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b92      	ldr	r3, [pc, #584]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e9      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b8b      	ldr	r3, [pc, #556]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a87      	ldr	r2, [pc, #540]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b85      	ldr	r3, [pc, #532]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b82      	ldr	r3, [pc, #520]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b7f      	ldr	r3, [pc, #508]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7e      	ldr	r2, [pc, #504]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fbaf 	bl	8001680 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7ff fbab 	bl	8001680 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	@ 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e103      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b75      	ldr	r3, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a6e      	ldr	r2, [pc, #440]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f62:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a69      	ldr	r2, [pc, #420]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b67      	ldr	r3, [pc, #412]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a66      	ldr	r2, [pc, #408]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x356>
 8001f84:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a60      	ldr	r2, [pc, #384]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	4b5e      	ldr	r3, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fb5f 	bl	8001680 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fb5b 	bl	8001680 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0b1      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb49 	bl	8001680 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fb45 	bl	8001680 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e09b      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b36      	ldr	r3, [pc, #216]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d061      	beq.n	8002100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d146      	bne.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fb19 	bl	8001680 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff fb15 	bl	8001680 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e06d      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4921      	ldr	r1, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	430b      	orrs	r3, r1
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff fae9 	bl	8001680 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff fae5 	bl	8001680 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
 80020d0:	e035      	b.n	800213e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff fad2 	bl	8001680 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff face 	bl	8001680 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e026      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
 80020fe:	e01e      	b.n	800213e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e019      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_OscConfig+0x500>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	429a      	cmp	r2, r3
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d0      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b67      	ldr	r3, [pc, #412]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4965      	ldr	r1, [pc, #404]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d040      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d115      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e073      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4936      	ldr	r1, [pc, #216]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7ff fa20 	bl	8001680 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff fa1c 	bl	8001680 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e053      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b27      	ldr	r3, [pc, #156]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d210      	bcs.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4922      	ldr	r1, [pc, #136]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	@ (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <HAL_RCC_ClockConfig+0x1cc>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x1d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f97e 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	08002c1c 	.word	0x08002c1c
 8002318:	20000040 	.word	0x20000040
 800231c:	20000044 	.word	0x20000044

08002320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x30>
 800234a:	2b08      	cmp	r3, #8
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x36>
 800234e:	e027      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002352:	613b      	str	r3, [r7, #16]
      break;
 8002354:	e027      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	0c9b      	lsrs	r3, r3, #18
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0c5b      	lsrs	r3, r3, #17
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	fb03 f202 	mul.w	r2, r3, r2
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	613b      	str	r3, [r7, #16]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	613b      	str	r3, [r7, #16]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	693b      	ldr	r3, [r7, #16]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	08002c2c 	.word	0x08002c2c
 80023c0:	08002c3c 	.word	0x08002c3c
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d0:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <RCC_Delay+0x34>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <RCC_Delay+0x38>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0a5b      	lsrs	r3, r3, #9
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e4:	bf00      	nop
  }
  while (Delay --);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	60fa      	str	r2, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <RCC_Delay+0x1c>
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000040 	.word	0x20000040
 8002400:	10624dd3 	.word	0x10624dd3

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e041      	b.n	800249a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f83e 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fa56 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e035      	b.n	8002528 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024dc:	d009      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_TIM_Base_Start_IT+0x90>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <HAL_TIM_Base_Start_IT+0x94>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d010      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	e007      	b.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800

0800253c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d020      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0202 	mvn.w	r2, #2
 8002570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f998 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f98b 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f99a 	bl	80028ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d020      	beq.n	80025ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0204 	mvn.w	r2, #4
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f972 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f965 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f974 	bl	80028ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0208 	mvn.w	r2, #8
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f94c 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f93f 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f94e 	bl	80028ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0210 	mvn.w	r2, #16
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2208      	movs	r2, #8
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f926 	bl	80028bc <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f919 	bl	80028aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f928 	bl	80028ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0201 	mvn.w	r2, #1
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fd54 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa67 	bl	8002b9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8f8 	bl	80028e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0220 	mvn.w	r2, #32
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa3a 	bl	8002b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_TIM_ConfigClockSource+0x1c>
 8002734:	2302      	movs	r3, #2
 8002736:	e0b4      	b.n	80028a2 <HAL_TIM_ConfigClockSource+0x186>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800275e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002770:	d03e      	beq.n	80027f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002776:	f200 8087 	bhi.w	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277e:	f000 8086 	beq.w	800288e <HAL_TIM_ConfigClockSource+0x172>
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002786:	d87f      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b70      	cmp	r3, #112	@ 0x70
 800278a:	d01a      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xa6>
 800278c:	2b70      	cmp	r3, #112	@ 0x70
 800278e:	d87b      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b60      	cmp	r3, #96	@ 0x60
 8002792:	d050      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x11a>
 8002794:	2b60      	cmp	r3, #96	@ 0x60
 8002796:	d877      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b50      	cmp	r3, #80	@ 0x50
 800279a:	d03c      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0xfa>
 800279c:	2b50      	cmp	r3, #80	@ 0x50
 800279e:	d873      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b40      	cmp	r3, #64	@ 0x40
 80027a2:	d058      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x13a>
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d86f      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b30      	cmp	r3, #48	@ 0x30
 80027aa:	d064      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027ac:	2b30      	cmp	r3, #48	@ 0x30
 80027ae:	d86b      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d060      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d867      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d05a      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	e062      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d2:	f000 f962 	bl	8002a9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	609a      	str	r2, [r3, #8]
      break;
 80027ee:	e04f      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002800:	f000 f94b 	bl	8002a9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002812:	609a      	str	r2, [r3, #8]
      break;
 8002814:	e03c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f8c2 	bl	80029ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2150      	movs	r1, #80	@ 0x50
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f919 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002834:	e02c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	461a      	mov	r2, r3
 8002844:	f000 f8e0 	bl	8002a08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2160      	movs	r1, #96	@ 0x60
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f909 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002854:	e01c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	461a      	mov	r2, r3
 8002864:	f000 f8a2 	bl	80029ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2140      	movs	r1, #64	@ 0x40
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f8f9 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002874:	e00c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f000 f8f0 	bl	8002a66 <TIM_ITRx_SetConfig>
      break;
 8002886:	e003      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e000      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800288e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x28>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a25      	ldr	r2, [pc, #148]	@ (80029a4 <TIM_Base_SetConfig+0xb0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x28>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <TIM_Base_SetConfig+0xb4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x52>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <TIM_Base_SetConfig+0xb0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x52>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <TIM_Base_SetConfig+0xb4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]
  }
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800

080029ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0201 	bic.w	r2, r3, #1
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f023 030a 	bic.w	r3, r3, #10
 80029e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	621a      	str	r2, [r3, #32]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0210 	bic.w	r2, r3, #16
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	031b      	lsls	r3, r3, #12
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	621a      	str	r2, [r3, #32]
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f043 0307 	orr.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b087      	sub	sp, #28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	021a      	lsls	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	609a      	str	r2, [r3, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e041      	b.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b32:	d009      	beq.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a11      	ldr	r2, [pc, #68]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10c      	bne.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <memset>:
 8002bac:	4603      	mov	r3, r0
 8002bae:	4402      	add	r2, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <__libc_init_array>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2600      	movs	r6, #0
 8002bc0:	4d0c      	ldr	r5, [pc, #48]	@ (8002bf4 <__libc_init_array+0x38>)
 8002bc2:	4c0d      	ldr	r4, [pc, #52]	@ (8002bf8 <__libc_init_array+0x3c>)
 8002bc4:	1b64      	subs	r4, r4, r5
 8002bc6:	10a4      	asrs	r4, r4, #2
 8002bc8:	42a6      	cmp	r6, r4
 8002bca:	d109      	bne.n	8002be0 <__libc_init_array+0x24>
 8002bcc:	f000 f81a 	bl	8002c04 <_init>
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	4d0a      	ldr	r5, [pc, #40]	@ (8002bfc <__libc_init_array+0x40>)
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c00 <__libc_init_array+0x44>)
 8002bd6:	1b64      	subs	r4, r4, r5
 8002bd8:	10a4      	asrs	r4, r4, #2
 8002bda:	42a6      	cmp	r6, r4
 8002bdc:	d105      	bne.n	8002bea <__libc_init_array+0x2e>
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
 8002be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be4:	4798      	blx	r3
 8002be6:	3601      	adds	r6, #1
 8002be8:	e7ee      	b.n	8002bc8 <__libc_init_array+0xc>
 8002bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bee:	4798      	blx	r3
 8002bf0:	3601      	adds	r6, #1
 8002bf2:	e7f2      	b.n	8002bda <__libc_init_array+0x1e>
 8002bf4:	08002c40 	.word	0x08002c40
 8002bf8:	08002c40 	.word	0x08002c40
 8002bfc:	08002c40 	.word	0x08002c40
 8002c00:	08002c44 	.word	0x08002c44

08002c04 <_init>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr

08002c10 <_fini>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr
