
Traffic_Light_with_7Segment_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001e58  08001e58  00002e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef4  08001ef4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ef4  08001ef4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ef4  08001ef4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef4  08001ef4  00002ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ef8  08001ef8  00002ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001efc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  08001f08  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001f08  0000303c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ca0  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010e8  00000000  00000000  00005cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00006dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ec  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e8fb  00000000  00000000  000074cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005880  00000000  00000000  00015dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005613e  00000000  00000000  0001b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd8  00000000  00000000  000717c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000725a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e40 	.word	0x08001e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e40 	.word	0x08001e40

0800014c <init_control_light>:

int LedX_state, LedY_state;
int counter_x = 0, counter_y = 0;


void init_control_light() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	LedX_state = RED;
 8000150:	4b16      	ldr	r3, [pc, #88]	@ (80001ac <init_control_light+0x60>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
	counter_x = 5;
 8000156:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <init_control_light+0x64>)
 8000158:	2205      	movs	r2, #5
 800015a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Led_Red_X_GPIO_Port, Led_Red_X_Pin, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	2180      	movs	r1, #128	@ 0x80
 8000160:	4814      	ldr	r0, [pc, #80]	@ (80001b4 <init_control_light+0x68>)
 8000162:	f001 fa4b 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow_X_GPIO_Port, Led_Yellow_X_Pin, RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800016c:	4811      	ldr	r0, [pc, #68]	@ (80001b4 <init_control_light+0x68>)
 800016e:	f001 fa45 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green_X_GPIO_Port, Led_Green_X_Pin, RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000178:	480e      	ldr	r0, [pc, #56]	@ (80001b4 <init_control_light+0x68>)
 800017a:	f001 fa3f 	bl	80015fc <HAL_GPIO_WritePin>

	LedY_state = GREEN;
 800017e:	4b0e      	ldr	r3, [pc, #56]	@ (80001b8 <init_control_light+0x6c>)
 8000180:	2202      	movs	r2, #2
 8000182:	601a      	str	r2, [r3, #0]
	counter_y = 3;
 8000184:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <init_control_light+0x70>)
 8000186:	2203      	movs	r2, #3
 8000188:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Led_Red_Y_GPIO_Port, Led_Red_Y_Pin, RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	2110      	movs	r1, #16
 800018e:	4809      	ldr	r0, [pc, #36]	@ (80001b4 <init_control_light+0x68>)
 8000190:	f001 fa34 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow_Y_GPIO_Port, Led_Yellow_Y_Pin, RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	2120      	movs	r1, #32
 8000198:	4806      	ldr	r0, [pc, #24]	@ (80001b4 <init_control_light+0x68>)
 800019a:	f001 fa2f 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green_Y_GPIO_Port, Led_Green_Y_Pin, SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2140      	movs	r1, #64	@ 0x40
 80001a2:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <init_control_light+0x68>)
 80001a4:	f001 fa2a 	bl	80015fc <HAL_GPIO_WritePin>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	20000030 	.word	0x20000030
 80001b4:	40010800 	.word	0x40010800
 80001b8:	2000002c 	.word	0x2000002c
 80001bc:	20000034 	.word	0x20000034

080001c0 <control_1_light>:

void control_1_light(int* LED_state, int* counter, int order) {
 80001c0:	b5b0      	push	{r4, r5, r7, lr}
 80001c2:	b08e      	sub	sp, #56	@ 0x38
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	60f8      	str	r0, [r7, #12]
 80001c8:	60b9      	str	r1, [r7, #8]
 80001ca:	607a      	str	r2, [r7, #4]
	GPIO_TypeDef* GPIO_Port [3][2] = {
 80001cc:	4b58      	ldr	r3, [pc, #352]	@ (8000330 <control_1_light+0x170>)
 80001ce:	f107 0420 	add.w	r4, r7, #32
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001dc:	e884 0003 	stmia.w	r4, {r0, r1}
			{Led_Red_X_GPIO_Port, Led_Red_Y_GPIO_Port},
			{Led_Yellow_X_GPIO_Port, Led_Yellow_Y_GPIO_Port},
			{Led_Green_X_GPIO_Port, Led_Green_Y_GPIO_Port}
	};

	uint16_t GPIO_PIN [3][2] = {
 80001e0:	4a54      	ldr	r2, [pc, #336]	@ (8000334 <control_1_light+0x174>)
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{Led_Red_X_Pin, Led_Red_Y_Pin},
			{Led_Yellow_X_Pin, Led_Yellow_Y_Pin},
			{Led_Green_X_Pin, Led_Green_Y_Pin}
	};

	switch (*LED_state) {
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d062      	beq.n	80002ba <control_1_light+0xfa>
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	f300 808f 	bgt.w	8000318 <control_1_light+0x158>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d002      	beq.n	8000204 <control_1_light+0x44>
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d02e      	beq.n	8000260 <control_1_light+0xa0>
			*counter  = 2;
		}
		break;

	default:
		break;
 8000202:	e089      	b.n	8000318 <control_1_light+0x158>
		if (*counter  <= 0) {
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	f300 8087 	bgt.w	800031c <control_1_light+0x15c>
			HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	3338      	adds	r3, #56	@ 0x38
 8000214:	443b      	add	r3, r7
 8000216:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	3338      	adds	r3, #56	@ 0x38
 8000220:	443b      	add	r3, r7
 8000222:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000226:	2200      	movs	r2, #0
 8000228:	4619      	mov	r1, r3
 800022a:	f001 f9e7 	bl	80015fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], SET);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3304      	adds	r3, #4
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	3338      	adds	r3, #56	@ 0x38
 8000236:	443b      	add	r3, r7
 8000238:	f853 0c18 	ldr.w	r0, [r3, #-24]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3304      	adds	r3, #4
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	3338      	adds	r3, #56	@ 0x38
 8000244:	443b      	add	r3, r7
 8000246:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800024a:	2201      	movs	r2, #1
 800024c:	4619      	mov	r1, r3
 800024e:	f001 f9d5 	bl	80015fc <HAL_GPIO_WritePin>
			*LED_state = GREEN;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2202      	movs	r2, #2
 8000256:	601a      	str	r2, [r3, #0]
			*counter = 3;
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	2203      	movs	r2, #3
 800025c:	601a      	str	r2, [r3, #0]
		break;
 800025e:	e05d      	b.n	800031c <control_1_light+0x15c>
		if (*counter  <= 0) {
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dc5b      	bgt.n	8000320 <control_1_light+0x160>
			HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3302      	adds	r3, #2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	3338      	adds	r3, #56	@ 0x38
 8000270:	443b      	add	r3, r7
 8000272:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3302      	adds	r3, #2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	3338      	adds	r3, #56	@ 0x38
 800027e:	443b      	add	r3, r7
 8000280:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000284:	2200      	movs	r2, #0
 8000286:	4619      	mov	r1, r3
 8000288:	f001 f9b8 	bl	80015fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], SET);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	3338      	adds	r3, #56	@ 0x38
 8000292:	443b      	add	r3, r7
 8000294:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	3338      	adds	r3, #56	@ 0x38
 800029e:	443b      	add	r3, r7
 80002a0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4619      	mov	r1, r3
 80002a8:	f001 f9a8 	bl	80015fc <HAL_GPIO_WritePin>
			*LED_state = RED;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
			*counter  = 5;
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	2205      	movs	r2, #5
 80002b6:	601a      	str	r2, [r3, #0]
		break;
 80002b8:	e032      	b.n	8000320 <control_1_light+0x160>
		if (*counter  <= 0) {
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dc30      	bgt.n	8000324 <control_1_light+0x164>
			HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3304      	adds	r3, #4
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	3338      	adds	r3, #56	@ 0x38
 80002ca:	443b      	add	r3, r7
 80002cc:	f853 0c18 	ldr.w	r0, [r3, #-24]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3304      	adds	r3, #4
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	3338      	adds	r3, #56	@ 0x38
 80002d8:	443b      	add	r3, r7
 80002da:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80002de:	2200      	movs	r2, #0
 80002e0:	4619      	mov	r1, r3
 80002e2:	f001 f98b 	bl	80015fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], SET);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3302      	adds	r3, #2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	3338      	adds	r3, #56	@ 0x38
 80002ee:	443b      	add	r3, r7
 80002f0:	f853 0c18 	ldr.w	r0, [r3, #-24]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3302      	adds	r3, #2
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	3338      	adds	r3, #56	@ 0x38
 80002fc:	443b      	add	r3, r7
 80002fe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	f001 f979 	bl	80015fc <HAL_GPIO_WritePin>
			*LED_state = YELLOW;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2201      	movs	r2, #1
 800030e:	601a      	str	r2, [r3, #0]
			*counter  = 2;
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	2202      	movs	r2, #2
 8000314:	601a      	str	r2, [r3, #0]
		break;
 8000316:	e005      	b.n	8000324 <control_1_light+0x164>
		break;
 8000318:	bf00      	nop
 800031a:	e004      	b.n	8000326 <control_1_light+0x166>
		break;
 800031c:	bf00      	nop
 800031e:	e002      	b.n	8000326 <control_1_light+0x166>
		break;
 8000320:	bf00      	nop
 8000322:	e000      	b.n	8000326 <control_1_light+0x166>
		break;
 8000324:	bf00      	nop
	}
}
 8000326:	bf00      	nop
 8000328:	3738      	adds	r7, #56	@ 0x38
 800032a:	46bd      	mov	sp, r7
 800032c:	bdb0      	pop	{r4, r5, r7, pc}
 800032e:	bf00      	nop
 8000330:	08001e58 	.word	0x08001e58
 8000334:	08001e70 	.word	0x08001e70

08000338 <control_4_light>:

void control_4_light() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	control_1_light(&LedX_state, &counter_x, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	4910      	ldr	r1, [pc, #64]	@ (8000380 <control_4_light+0x48>)
 8000340:	4810      	ldr	r0, [pc, #64]	@ (8000384 <control_4_light+0x4c>)
 8000342:	f7ff ff3d 	bl	80001c0 <control_1_light>
	display_7SEG(counter_x, 0);
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <control_4_light+0x48>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f81f 	bl	8000390 <display_7SEG>
	counter_x--;
 8000352:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <control_4_light+0x48>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <control_4_light+0x48>)
 800035a:	6013      	str	r3, [r2, #0]

	control_1_light(&LedY_state, &counter_y, 1);
 800035c:	2201      	movs	r2, #1
 800035e:	490a      	ldr	r1, [pc, #40]	@ (8000388 <control_4_light+0x50>)
 8000360:	480a      	ldr	r0, [pc, #40]	@ (800038c <control_4_light+0x54>)
 8000362:	f7ff ff2d 	bl	80001c0 <control_1_light>
	display_7SEG(counter_y, 1);
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <control_4_light+0x50>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2101      	movs	r1, #1
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f80f 	bl	8000390 <display_7SEG>
	counter_y--;
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <control_4_light+0x50>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <control_4_light+0x50>)
 800037a:	6013      	str	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000030 	.word	0x20000030
 8000384:	20000028 	.word	0x20000028
 8000388:	20000034 	.word	0x20000034
 800038c:	2000002c 	.word	0x2000002c

08000390 <display_7SEG>:
 *      Author: Lenovo
 */

#include "display_7SEG.h"

void display_7SEG(int num, int order) {
 8000390:	b5b0      	push	{r4, r5, r7, lr}
 8000392:	b098      	sub	sp, #96	@ 0x60
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	GPIO_TypeDef* GPIO_Port [7][2] = {
 800039a:	4bd5      	ldr	r3, [pc, #852]	@ (80006f0 <display_7SEG+0x360>)
 800039c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80003a0:	461d      	mov	r5, r3
 80003a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003b2:	e884 0003 	stmia.w	r4, {r0, r1}
			{E_H_GPIO_Port, E_V_GPIO_Port},
			{F_H_GPIO_Port, F_V_GPIO_Port},
			{G_H_GPIO_Port, G_V_GPIO_Port}
	};

	uint16_t GPIO_PIN [7][2] = {
 80003b6:	4bcf      	ldr	r3, [pc, #828]	@ (80006f4 <display_7SEG+0x364>)
 80003b8:	f107 040c 	add.w	r4, r7, #12
 80003bc:	461d      	mov	r5, r3
 80003be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{E_H_Pin, E_V_Pin},
			{F_H_Pin, F_V_Pin},
			{G_H_Pin, G_V_Pin}
	};

	switch (num) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b09      	cmp	r3, #9
 80003ce:	f200 84fe 	bhi.w	8000dce <display_7SEG+0xa3e>
 80003d2:	a201      	add	r2, pc, #4	@ (adr r2, 80003d8 <display_7SEG+0x48>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	08000401 	.word	0x08000401
 80003dc:	080004fd 	.word	0x080004fd
 80003e0:	080005f7 	.word	0x080005f7
 80003e4:	080006f9 	.word	0x080006f9
 80003e8:	080007f3 	.word	0x080007f3
 80003ec:	080008ed 	.word	0x080008ed
 80003f0:	080009e7 	.word	0x080009e7
 80003f4:	08000ae1 	.word	0x08000ae1
 80003f8:	08000bdb 	.word	0x08000bdb
 80003fc:	08000cd5 	.word	0x08000cd5
	case 0:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	3360      	adds	r3, #96	@ 0x60
 8000406:	443b      	add	r3, r7
 8000408:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	3360      	adds	r3, #96	@ 0x60
 8000412:	443b      	add	r3, r7
 8000414:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	f001 f8ee 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	3302      	adds	r3, #2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	3360      	adds	r3, #96	@ 0x60
 8000428:	443b      	add	r3, r7
 800042a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	3302      	adds	r3, #2
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	3360      	adds	r3, #96	@ 0x60
 8000436:	443b      	add	r3, r7
 8000438:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	f001 f8dc 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	3304      	adds	r3, #4
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	3360      	adds	r3, #96	@ 0x60
 800044c:	443b      	add	r3, r7
 800044e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	3304      	adds	r3, #4
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	3360      	adds	r3, #96	@ 0x60
 800045a:	443b      	add	r3, r7
 800045c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000460:	2200      	movs	r2, #0
 8000462:	4619      	mov	r1, r3
 8000464:	f001 f8ca 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	3306      	adds	r3, #6
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	3360      	adds	r3, #96	@ 0x60
 8000470:	443b      	add	r3, r7
 8000472:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	3306      	adds	r3, #6
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	3360      	adds	r3, #96	@ 0x60
 800047e:	443b      	add	r3, r7
 8000480:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	f001 f8b8 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], RESET);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	3308      	adds	r3, #8
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	3360      	adds	r3, #96	@ 0x60
 8000494:	443b      	add	r3, r7
 8000496:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	3308      	adds	r3, #8
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	3360      	adds	r3, #96	@ 0x60
 80004a2:	443b      	add	r3, r7
 80004a4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f001 f8a6 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	330a      	adds	r3, #10
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	3360      	adds	r3, #96	@ 0x60
 80004b8:	443b      	add	r3, r7
 80004ba:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	330a      	adds	r3, #10
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	3360      	adds	r3, #96	@ 0x60
 80004c6:	443b      	add	r3, r7
 80004c8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80004cc:	2200      	movs	r2, #0
 80004ce:	4619      	mov	r1, r3
 80004d0:	f001 f894 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], SET);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	330c      	adds	r3, #12
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	3360      	adds	r3, #96	@ 0x60
 80004dc:	443b      	add	r3, r7
 80004de:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	330c      	adds	r3, #12
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	3360      	adds	r3, #96	@ 0x60
 80004ea:	443b      	add	r3, r7
 80004ec:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	f001 f882 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80004f8:	f000 bc69 	b.w	8000dce <display_7SEG+0xa3e>
	case 1:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], SET);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	3360      	adds	r3, #96	@ 0x60
 8000502:	443b      	add	r3, r7
 8000504:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	3360      	adds	r3, #96	@ 0x60
 800050e:	443b      	add	r3, r7
 8000510:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000514:	2201      	movs	r2, #1
 8000516:	4619      	mov	r1, r3
 8000518:	f001 f870 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	3302      	adds	r3, #2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	3360      	adds	r3, #96	@ 0x60
 8000524:	443b      	add	r3, r7
 8000526:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	3302      	adds	r3, #2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	3360      	adds	r3, #96	@ 0x60
 8000532:	443b      	add	r3, r7
 8000534:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000538:	2200      	movs	r2, #0
 800053a:	4619      	mov	r1, r3
 800053c:	f001 f85e 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	3360      	adds	r3, #96	@ 0x60
 8000548:	443b      	add	r3, r7
 800054a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	3304      	adds	r3, #4
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	3360      	adds	r3, #96	@ 0x60
 8000556:	443b      	add	r3, r7
 8000558:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	f001 f84c 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], SET);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	3306      	adds	r3, #6
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	3360      	adds	r3, #96	@ 0x60
 800056c:	443b      	add	r3, r7
 800056e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	3306      	adds	r3, #6
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	3360      	adds	r3, #96	@ 0x60
 800057a:	443b      	add	r3, r7
 800057c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	f001 f83a 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	3308      	adds	r3, #8
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	3360      	adds	r3, #96	@ 0x60
 8000590:	443b      	add	r3, r7
 8000592:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	3308      	adds	r3, #8
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	3360      	adds	r3, #96	@ 0x60
 800059e:	443b      	add	r3, r7
 80005a0:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	f001 f828 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], SET);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	330a      	adds	r3, #10
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	3360      	adds	r3, #96	@ 0x60
 80005b4:	443b      	add	r3, r7
 80005b6:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	330a      	adds	r3, #10
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	3360      	adds	r3, #96	@ 0x60
 80005c2:	443b      	add	r3, r7
 80005c4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f001 f816 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], SET);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	330c      	adds	r3, #12
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	3360      	adds	r3, #96	@ 0x60
 80005d8:	443b      	add	r3, r7
 80005da:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	330c      	adds	r3, #12
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	3360      	adds	r3, #96	@ 0x60
 80005e6:	443b      	add	r3, r7
 80005e8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	f001 f804 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80005f4:	e3eb      	b.n	8000dce <display_7SEG+0xa3e>
	case 2:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	3360      	adds	r3, #96	@ 0x60
 80005fc:	443b      	add	r3, r7
 80005fe:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	3360      	adds	r3, #96	@ 0x60
 8000608:	443b      	add	r3, r7
 800060a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	f000 fff3 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3302      	adds	r3, #2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	3360      	adds	r3, #96	@ 0x60
 800061e:	443b      	add	r3, r7
 8000620:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	3302      	adds	r3, #2
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	3360      	adds	r3, #96	@ 0x60
 800062c:	443b      	add	r3, r7
 800062e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	f000 ffe1 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], SET);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	3304      	adds	r3, #4
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	3360      	adds	r3, #96	@ 0x60
 8000642:	443b      	add	r3, r7
 8000644:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	3304      	adds	r3, #4
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	3360      	adds	r3, #96	@ 0x60
 8000650:	443b      	add	r3, r7
 8000652:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	f000 ffcf 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	3306      	adds	r3, #6
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	3360      	adds	r3, #96	@ 0x60
 8000666:	443b      	add	r3, r7
 8000668:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	3306      	adds	r3, #6
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	3360      	adds	r3, #96	@ 0x60
 8000674:	443b      	add	r3, r7
 8000676:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	f000 ffbd 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], RESET);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	3308      	adds	r3, #8
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	3360      	adds	r3, #96	@ 0x60
 800068a:	443b      	add	r3, r7
 800068c:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	3308      	adds	r3, #8
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	3360      	adds	r3, #96	@ 0x60
 8000698:	443b      	add	r3, r7
 800069a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	f000 ffab 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], SET);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	330a      	adds	r3, #10
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	3360      	adds	r3, #96	@ 0x60
 80006ae:	443b      	add	r3, r7
 80006b0:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	330a      	adds	r3, #10
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	3360      	adds	r3, #96	@ 0x60
 80006bc:	443b      	add	r3, r7
 80006be:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80006c2:	2201      	movs	r2, #1
 80006c4:	4619      	mov	r1, r3
 80006c6:	f000 ff99 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	330c      	adds	r3, #12
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	3360      	adds	r3, #96	@ 0x60
 80006d2:	443b      	add	r3, r7
 80006d4:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	330c      	adds	r3, #12
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	3360      	adds	r3, #96	@ 0x60
 80006e0:	443b      	add	r3, r7
 80006e2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f000 ff87 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80006ee:	e36e      	b.n	8000dce <display_7SEG+0xa3e>
 80006f0:	08001e7c 	.word	0x08001e7c
 80006f4:	08001eb4 	.word	0x08001eb4
	case 3:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	3360      	adds	r3, #96	@ 0x60
 80006fe:	443b      	add	r3, r7
 8000700:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	3360      	adds	r3, #96	@ 0x60
 800070a:	443b      	add	r3, r7
 800070c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f000 ff72 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	3302      	adds	r3, #2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	3360      	adds	r3, #96	@ 0x60
 8000720:	443b      	add	r3, r7
 8000722:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	3302      	adds	r3, #2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3360      	adds	r3, #96	@ 0x60
 800072e:	443b      	add	r3, r7
 8000730:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	f000 ff60 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3304      	adds	r3, #4
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3360      	adds	r3, #96	@ 0x60
 8000744:	443b      	add	r3, r7
 8000746:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	3360      	adds	r3, #96	@ 0x60
 8000752:	443b      	add	r3, r7
 8000754:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	f000 ff4e 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3306      	adds	r3, #6
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	3360      	adds	r3, #96	@ 0x60
 8000768:	443b      	add	r3, r7
 800076a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	3306      	adds	r3, #6
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	3360      	adds	r3, #96	@ 0x60
 8000776:	443b      	add	r3, r7
 8000778:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f000 ff3c 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	3308      	adds	r3, #8
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	3360      	adds	r3, #96	@ 0x60
 800078c:	443b      	add	r3, r7
 800078e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	3308      	adds	r3, #8
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	3360      	adds	r3, #96	@ 0x60
 800079a:	443b      	add	r3, r7
 800079c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	f000 ff2a 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], SET);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	330a      	adds	r3, #10
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	3360      	adds	r3, #96	@ 0x60
 80007b0:	443b      	add	r3, r7
 80007b2:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	330a      	adds	r3, #10
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	3360      	adds	r3, #96	@ 0x60
 80007be:	443b      	add	r3, r7
 80007c0:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f000 ff18 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	330c      	adds	r3, #12
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	3360      	adds	r3, #96	@ 0x60
 80007d4:	443b      	add	r3, r7
 80007d6:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	330c      	adds	r3, #12
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	3360      	adds	r3, #96	@ 0x60
 80007e2:	443b      	add	r3, r7
 80007e4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	f000 ff06 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80007f0:	e2ed      	b.n	8000dce <display_7SEG+0xa3e>
	case 4:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], SET);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	3360      	adds	r3, #96	@ 0x60
 80007f8:	443b      	add	r3, r7
 80007fa:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	3360      	adds	r3, #96	@ 0x60
 8000804:	443b      	add	r3, r7
 8000806:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	f000 fef5 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	3302      	adds	r3, #2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	3360      	adds	r3, #96	@ 0x60
 800081a:	443b      	add	r3, r7
 800081c:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3302      	adds	r3, #2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	3360      	adds	r3, #96	@ 0x60
 8000828:	443b      	add	r3, r7
 800082a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f000 fee3 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	3304      	adds	r3, #4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	3360      	adds	r3, #96	@ 0x60
 800083e:	443b      	add	r3, r7
 8000840:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	3304      	adds	r3, #4
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	3360      	adds	r3, #96	@ 0x60
 800084c:	443b      	add	r3, r7
 800084e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	f000 fed1 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], SET);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3306      	adds	r3, #6
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	3360      	adds	r3, #96	@ 0x60
 8000862:	443b      	add	r3, r7
 8000864:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	3306      	adds	r3, #6
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	3360      	adds	r3, #96	@ 0x60
 8000870:	443b      	add	r3, r7
 8000872:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000876:	2201      	movs	r2, #1
 8000878:	4619      	mov	r1, r3
 800087a:	f000 febf 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	3308      	adds	r3, #8
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	3360      	adds	r3, #96	@ 0x60
 8000886:	443b      	add	r3, r7
 8000888:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3308      	adds	r3, #8
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	3360      	adds	r3, #96	@ 0x60
 8000894:	443b      	add	r3, r7
 8000896:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	f000 fead 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	330a      	adds	r3, #10
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	3360      	adds	r3, #96	@ 0x60
 80008aa:	443b      	add	r3, r7
 80008ac:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	330a      	adds	r3, #10
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	3360      	adds	r3, #96	@ 0x60
 80008b8:	443b      	add	r3, r7
 80008ba:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 fe9b 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	330c      	adds	r3, #12
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	3360      	adds	r3, #96	@ 0x60
 80008ce:	443b      	add	r3, r7
 80008d0:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	330c      	adds	r3, #12
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	3360      	adds	r3, #96	@ 0x60
 80008dc:	443b      	add	r3, r7
 80008de:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	f000 fe89 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80008ea:	e270      	b.n	8000dce <display_7SEG+0xa3e>
	case 5:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	3360      	adds	r3, #96	@ 0x60
 80008f2:	443b      	add	r3, r7
 80008f4:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	3360      	adds	r3, #96	@ 0x60
 80008fe:	443b      	add	r3, r7
 8000900:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	f000 fe78 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], SET);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	3302      	adds	r3, #2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	3360      	adds	r3, #96	@ 0x60
 8000914:	443b      	add	r3, r7
 8000916:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3302      	adds	r3, #2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	3360      	adds	r3, #96	@ 0x60
 8000922:	443b      	add	r3, r7
 8000924:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	f000 fe66 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	3304      	adds	r3, #4
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	3360      	adds	r3, #96	@ 0x60
 8000938:	443b      	add	r3, r7
 800093a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	3304      	adds	r3, #4
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	3360      	adds	r3, #96	@ 0x60
 8000946:	443b      	add	r3, r7
 8000948:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	f000 fe54 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	3306      	adds	r3, #6
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	3360      	adds	r3, #96	@ 0x60
 800095c:	443b      	add	r3, r7
 800095e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	3306      	adds	r3, #6
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	3360      	adds	r3, #96	@ 0x60
 800096a:	443b      	add	r3, r7
 800096c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	f000 fe42 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	3308      	adds	r3, #8
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	3360      	adds	r3, #96	@ 0x60
 8000980:	443b      	add	r3, r7
 8000982:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3308      	adds	r3, #8
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	3360      	adds	r3, #96	@ 0x60
 800098e:	443b      	add	r3, r7
 8000990:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	f000 fe30 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	330a      	adds	r3, #10
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	3360      	adds	r3, #96	@ 0x60
 80009a4:	443b      	add	r3, r7
 80009a6:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	330a      	adds	r3, #10
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	3360      	adds	r3, #96	@ 0x60
 80009b2:	443b      	add	r3, r7
 80009b4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	f000 fe1e 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	330c      	adds	r3, #12
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	3360      	adds	r3, #96	@ 0x60
 80009c8:	443b      	add	r3, r7
 80009ca:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	330c      	adds	r3, #12
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	3360      	adds	r3, #96	@ 0x60
 80009d6:	443b      	add	r3, r7
 80009d8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	f000 fe0c 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 80009e4:	e1f3      	b.n	8000dce <display_7SEG+0xa3e>
	case 6:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	3360      	adds	r3, #96	@ 0x60
 80009ec:	443b      	add	r3, r7
 80009ee:	f853 0c38 	ldr.w	r0, [r3, #-56]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3360      	adds	r3, #96	@ 0x60
 80009f8:	443b      	add	r3, r7
 80009fa:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	f000 fdfb 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], SET);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	3360      	adds	r3, #96	@ 0x60
 8000a0e:	443b      	add	r3, r7
 8000a10:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	3302      	adds	r3, #2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	3360      	adds	r3, #96	@ 0x60
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	f000 fde9 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	3360      	adds	r3, #96	@ 0x60
 8000a32:	443b      	add	r3, r7
 8000a34:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	3304      	adds	r3, #4
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	3360      	adds	r3, #96	@ 0x60
 8000a40:	443b      	add	r3, r7
 8000a42:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000a46:	2200      	movs	r2, #0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f000 fdd7 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	3306      	adds	r3, #6
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3360      	adds	r3, #96	@ 0x60
 8000a56:	443b      	add	r3, r7
 8000a58:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	3306      	adds	r3, #6
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	3360      	adds	r3, #96	@ 0x60
 8000a64:	443b      	add	r3, r7
 8000a66:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f000 fdc5 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], RESET);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3308      	adds	r3, #8
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	3360      	adds	r3, #96	@ 0x60
 8000a7a:	443b      	add	r3, r7
 8000a7c:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3308      	adds	r3, #8
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	3360      	adds	r3, #96	@ 0x60
 8000a88:	443b      	add	r3, r7
 8000a8a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f000 fdb3 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	330a      	adds	r3, #10
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	3360      	adds	r3, #96	@ 0x60
 8000a9e:	443b      	add	r3, r7
 8000aa0:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	330a      	adds	r3, #10
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3360      	adds	r3, #96	@ 0x60
 8000aac:	443b      	add	r3, r7
 8000aae:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f000 fda1 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	330c      	adds	r3, #12
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	3360      	adds	r3, #96	@ 0x60
 8000ac2:	443b      	add	r3, r7
 8000ac4:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	330c      	adds	r3, #12
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	3360      	adds	r3, #96	@ 0x60
 8000ad0:	443b      	add	r3, r7
 8000ad2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f000 fd8f 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 8000ade:	e176      	b.n	8000dce <display_7SEG+0xa3e>
	case 7:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	3360      	adds	r3, #96	@ 0x60
 8000ae6:	443b      	add	r3, r7
 8000ae8:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	3360      	adds	r3, #96	@ 0x60
 8000af2:	443b      	add	r3, r7
 8000af4:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	f000 fd7e 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3302      	adds	r3, #2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	3360      	adds	r3, #96	@ 0x60
 8000b08:	443b      	add	r3, r7
 8000b0a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	3302      	adds	r3, #2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	3360      	adds	r3, #96	@ 0x60
 8000b16:	443b      	add	r3, r7
 8000b18:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f000 fd6c 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	3304      	adds	r3, #4
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	3360      	adds	r3, #96	@ 0x60
 8000b2c:	443b      	add	r3, r7
 8000b2e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3304      	adds	r3, #4
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	3360      	adds	r3, #96	@ 0x60
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	f000 fd5a 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], SET);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	3360      	adds	r3, #96	@ 0x60
 8000b50:	443b      	add	r3, r7
 8000b52:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3306      	adds	r3, #6
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	3360      	adds	r3, #96	@ 0x60
 8000b5e:	443b      	add	r3, r7
 8000b60:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000b64:	2201      	movs	r2, #1
 8000b66:	4619      	mov	r1, r3
 8000b68:	f000 fd48 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	3360      	adds	r3, #96	@ 0x60
 8000b74:	443b      	add	r3, r7
 8000b76:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	3360      	adds	r3, #96	@ 0x60
 8000b82:	443b      	add	r3, r7
 8000b84:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f000 fd36 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], SET);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	330a      	adds	r3, #10
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	3360      	adds	r3, #96	@ 0x60
 8000b98:	443b      	add	r3, r7
 8000b9a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	330a      	adds	r3, #10
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	3360      	adds	r3, #96	@ 0x60
 8000ba6:	443b      	add	r3, r7
 8000ba8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000bac:	2201      	movs	r2, #1
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f000 fd24 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], SET);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	330c      	adds	r3, #12
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	3360      	adds	r3, #96	@ 0x60
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	330c      	adds	r3, #12
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	3360      	adds	r3, #96	@ 0x60
 8000bca:	443b      	add	r3, r7
 8000bcc:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f000 fd12 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 8000bd8:	e0f9      	b.n	8000dce <display_7SEG+0xa3e>
	case 8:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	3360      	adds	r3, #96	@ 0x60
 8000be0:	443b      	add	r3, r7
 8000be2:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	3360      	adds	r3, #96	@ 0x60
 8000bec:	443b      	add	r3, r7
 8000bee:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f000 fd01 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	3360      	adds	r3, #96	@ 0x60
 8000c02:	443b      	add	r3, r7
 8000c04:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3360      	adds	r3, #96	@ 0x60
 8000c10:	443b      	add	r3, r7
 8000c12:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f000 fcef 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	3304      	adds	r3, #4
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	3360      	adds	r3, #96	@ 0x60
 8000c26:	443b      	add	r3, r7
 8000c28:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	3304      	adds	r3, #4
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	3360      	adds	r3, #96	@ 0x60
 8000c34:	443b      	add	r3, r7
 8000c36:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f000 fcdd 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	3306      	adds	r3, #6
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	3360      	adds	r3, #96	@ 0x60
 8000c4a:	443b      	add	r3, r7
 8000c4c:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	3306      	adds	r3, #6
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	3360      	adds	r3, #96	@ 0x60
 8000c58:	443b      	add	r3, r7
 8000c5a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	f000 fccb 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], RESET);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3308      	adds	r3, #8
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	3360      	adds	r3, #96	@ 0x60
 8000c6e:	443b      	add	r3, r7
 8000c70:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	3308      	adds	r3, #8
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	3360      	adds	r3, #96	@ 0x60
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	f000 fcb9 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	330a      	adds	r3, #10
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	3360      	adds	r3, #96	@ 0x60
 8000c92:	443b      	add	r3, r7
 8000c94:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	330a      	adds	r3, #10
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	3360      	adds	r3, #96	@ 0x60
 8000ca0:	443b      	add	r3, r7
 8000ca2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f000 fca7 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	3360      	adds	r3, #96	@ 0x60
 8000cb6:	443b      	add	r3, r7
 8000cb8:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	330c      	adds	r3, #12
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	3360      	adds	r3, #96	@ 0x60
 8000cc4:	443b      	add	r3, r7
 8000cc6:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f000 fc95 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 8000cd2:	e07c      	b.n	8000dce <display_7SEG+0xa3e>
	case 9:
		HAL_GPIO_WritePin(GPIO_Port [0][order], GPIO_PIN [0][order], RESET);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	3360      	adds	r3, #96	@ 0x60
 8000cda:	443b      	add	r3, r7
 8000cdc:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	3360      	adds	r3, #96	@ 0x60
 8000ce6:	443b      	add	r3, r7
 8000ce8:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f000 fc84 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [1][order], GPIO_PIN [1][order], RESET);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	3360      	adds	r3, #96	@ 0x60
 8000cfc:	443b      	add	r3, r7
 8000cfe:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	3302      	adds	r3, #2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	3360      	adds	r3, #96	@ 0x60
 8000d0a:	443b      	add	r3, r7
 8000d0c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f000 fc72 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [2][order], GPIO_PIN [2][order], RESET);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	3360      	adds	r3, #96	@ 0x60
 8000d20:	443b      	add	r3, r7
 8000d22:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	3360      	adds	r3, #96	@ 0x60
 8000d2e:	443b      	add	r3, r7
 8000d30:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	f000 fc60 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [3][order], GPIO_PIN [3][order], RESET);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	3306      	adds	r3, #6
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	3360      	adds	r3, #96	@ 0x60
 8000d44:	443b      	add	r3, r7
 8000d46:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	3306      	adds	r3, #6
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	3360      	adds	r3, #96	@ 0x60
 8000d52:	443b      	add	r3, r7
 8000d54:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f000 fc4e 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [4][order], GPIO_PIN [4][order], SET);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	3308      	adds	r3, #8
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	3360      	adds	r3, #96	@ 0x60
 8000d68:	443b      	add	r3, r7
 8000d6a:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3308      	adds	r3, #8
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	3360      	adds	r3, #96	@ 0x60
 8000d76:	443b      	add	r3, r7
 8000d78:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f000 fc3c 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [5][order], GPIO_PIN [5][order], RESET);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	330a      	adds	r3, #10
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	3360      	adds	r3, #96	@ 0x60
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	330a      	adds	r3, #10
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	3360      	adds	r3, #96	@ 0x60
 8000d9a:	443b      	add	r3, r7
 8000d9c:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	f000 fc2a 	bl	80015fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port [6][order], GPIO_PIN [6][order], RESET);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	330c      	adds	r3, #12
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	3360      	adds	r3, #96	@ 0x60
 8000db0:	443b      	add	r3, r7
 8000db2:	f853 0c38 	ldr.w	r0, [r3, #-56]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	330c      	adds	r3, #12
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	3360      	adds	r3, #96	@ 0x60
 8000dbe:	443b      	add	r3, r7
 8000dc0:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f000 fc18 	bl	80015fc <HAL_GPIO_WritePin>
		break;
 8000dcc:	bf00      	nop
	}
}
 8000dce:	bf00      	nop
 8000dd0:	3760      	adds	r7, #96	@ 0x60
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000dd6:	bf00      	nop

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 f920 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f80c 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f846 	bl	8000e74 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  init_control_light();
 8000de8:	f7ff f9b0 	bl	800014c <init_control_light>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  control_4_light();
 8000dec:	f7ff faa4 	bl	8000338 <control_4_light>
	  HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df4:	f000 f976 	bl	80010e4 <HAL_Delay>
	  control_4_light();
 8000df8:	bf00      	nop
 8000dfa:	e7f7      	b.n	8000dec <main+0x14>

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	@ 0x40
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	2228      	movs	r2, #40	@ 0x28
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ffec 	bl	8001de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e26:	2310      	movs	r3, #16
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fbfa 	bl	800162c <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e3e:	f000 f86f 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fe68 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e66:	f000 f85b 	bl	8000f20 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3740      	adds	r7, #64	@ 0x40
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_GPIO_Init+0xa0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_Red_Y_Pin|Led_Yellow_Y_Pin|Led_Green_Y_Pin|Led_Red_X_Pin
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8000ebe:	4816      	ldr	r0, [pc, #88]	@ (8000f18 <MX_GPIO_Init+0xa4>)
 8000ec0:	f000 fb9c 	bl	80015fc <HAL_GPIO_WritePin>
                          |Led_Yellow_X_Pin|Led_Green_X_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_H_Pin|B_H_Pin|C_H_Pin|D_V_Pin
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8000eca:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000ecc:	f000 fb96 	bl	80015fc <HAL_GPIO_WritePin>
                          |E_H_Pin|F_H_Pin|G_H_Pin|A_V_Pin
                          |B_V_Pin|C_V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_Red_Y_Pin Led_Yellow_Y_Pin Led_Green_Y_Pin Led_Red_X_Pin
                           Led_Yellow_X_Pin Led_Green_X_Pin */
  GPIO_InitStruct.Pin = Led_Red_Y_Pin|Led_Yellow_Y_Pin|Led_Green_Y_Pin|Led_Red_X_Pin
 8000ed0:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8000ed4:	60bb      	str	r3, [r7, #8]
                          |Led_Yellow_X_Pin|Led_Green_X_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <MX_GPIO_Init+0xa4>)
 8000eea:	f000 fa03 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_H_Pin B_H_Pin C_H_Pin D_V_Pin
                           E_V_Pin F_V_Pin G_V_Pin D_H_Pin
                           E_H_Pin F_H_Pin G_H_Pin A_V_Pin
                           B_V_Pin C_V_Pin */
  GPIO_InitStruct.Pin = A_H_Pin|B_H_Pin|C_H_Pin|D_V_Pin
 8000eee:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000ef2:	60bb      	str	r3, [r7, #8]
                          |E_V_Pin|F_V_Pin|G_V_Pin|D_H_Pin
                          |E_H_Pin|F_H_Pin|G_H_Pin|A_V_Pin
                          |B_V_Pin|C_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2302      	movs	r3, #2
 8000efe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_GPIO_Init+0xa8>)
 8000f08:	f000 f9f4 	bl	80012f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f32:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_MspInit+0x40>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <NMI_Handler+0x4>

08000f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <MemManage_Handler+0x4>

08000f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f874 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff fff8 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fda:	490c      	ldr	r1, [pc, #48]	@ (800100c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ff0:	4c09      	ldr	r4, [pc, #36]	@ (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f000 fefb 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff fee9 	bl	8000dd8 <main>
  bx lr
 8001006:	4770      	bx	lr
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001010:	08001efc 	.word	0x08001efc
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001018:	2000003c 	.word	0x2000003c

0800101c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x28>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f92b 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	200f      	movs	r0, #15
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff ff76 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f935 	bl	80012da <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f90b 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a03      	ldr	r2, [pc, #12]	@ (80010cc <HAL_IncTick+0x20>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000038 	.word	0x20000038

080010d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <HAL_GetTick+0x10>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000038 	.word	0x20000038

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fff0 	bl	80010d0 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffe0 	bl	80010d0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	@ 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff90 	bl	8001190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff49 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff5e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff90 	bl	80011e4 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5f 	bl	8001190 <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffb0 	bl	8001248 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b08b      	sub	sp, #44	@ 0x2c
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001306:	e169      	b.n	80015dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001308:	2201      	movs	r2, #1
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8158 	bne.w	80015d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a9a      	ldr	r2, [pc, #616]	@ (8001594 <HAL_GPIO_Init+0x2a0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d05e      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001330:	4a98      	ldr	r2, [pc, #608]	@ (8001594 <HAL_GPIO_Init+0x2a0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d875      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001336:	4a98      	ldr	r2, [pc, #608]	@ (8001598 <HAL_GPIO_Init+0x2a4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d058      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 800133c:	4a96      	ldr	r2, [pc, #600]	@ (8001598 <HAL_GPIO_Init+0x2a4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d86f      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001342:	4a96      	ldr	r2, [pc, #600]	@ (800159c <HAL_GPIO_Init+0x2a8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d052      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001348:	4a94      	ldr	r2, [pc, #592]	@ (800159c <HAL_GPIO_Init+0x2a8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d869      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800134e:	4a94      	ldr	r2, [pc, #592]	@ (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04c      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001354:	4a92      	ldr	r2, [pc, #584]	@ (80015a0 <HAL_GPIO_Init+0x2ac>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d863      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800135a:	4a92      	ldr	r2, [pc, #584]	@ (80015a4 <HAL_GPIO_Init+0x2b0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d046      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
 8001360:	4a90      	ldr	r2, [pc, #576]	@ (80015a4 <HAL_GPIO_Init+0x2b0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d85d      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d82a      	bhi.n	80013c0 <HAL_GPIO_Init+0xcc>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d859      	bhi.n	8001422 <HAL_GPIO_Init+0x12e>
 800136e:	a201      	add	r2, pc, #4	@ (adr r2, 8001374 <HAL_GPIO_Init+0x80>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013c9 	.word	0x080013c9
 800137c:	080013db 	.word	0x080013db
 8001380:	0800141d 	.word	0x0800141d
 8001384:	08001423 	.word	0x08001423
 8001388:	08001423 	.word	0x08001423
 800138c:	08001423 	.word	0x08001423
 8001390:	08001423 	.word	0x08001423
 8001394:	08001423 	.word	0x08001423
 8001398:	08001423 	.word	0x08001423
 800139c:	08001423 	.word	0x08001423
 80013a0:	08001423 	.word	0x08001423
 80013a4:	08001423 	.word	0x08001423
 80013a8:	08001423 	.word	0x08001423
 80013ac:	08001423 	.word	0x08001423
 80013b0:	08001423 	.word	0x08001423
 80013b4:	08001423 	.word	0x08001423
 80013b8:	080013d1 	.word	0x080013d1
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	4a79      	ldr	r2, [pc, #484]	@ (80015a8 <HAL_GPIO_Init+0x2b4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c6:	e02c      	b.n	8001422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	623b      	str	r3, [r7, #32]
          break;
 80013ce:	e029      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	3304      	adds	r3, #4
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e024      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	3308      	adds	r3, #8
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e01f      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	330c      	adds	r3, #12
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e01a      	b.n	8001424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f6:	2304      	movs	r3, #4
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e013      	b.n	8001424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001404:	2308      	movs	r3, #8
 8001406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	611a      	str	r2, [r3, #16]
          break;
 800140e:	e009      	b.n	8001424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001410:	2308      	movs	r3, #8
 8001412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	615a      	str	r2, [r3, #20]
          break;
 800141a:	e003      	b.n	8001424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x130>
          break;
 8001422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d801      	bhi.n	800142e <HAL_GPIO_Init+0x13a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_Init+0x13e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2bff      	cmp	r3, #255	@ 0xff
 8001438:	d802      	bhi.n	8001440 <HAL_GPIO_Init+0x14c>
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x152>
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	3b08      	subs	r3, #8
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	210f      	movs	r1, #15
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	401a      	ands	r2, r3
 8001458:	6a39      	ldr	r1, [r7, #32]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	431a      	orrs	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80b1 	beq.w	80015d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001474:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a4c      	ldr	r2, [pc, #304]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <HAL_GPIO_Init+0x2b8>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800148c:	4a48      	ldr	r2, [pc, #288]	@ (80015b0 <HAL_GPIO_Init+0x2bc>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a40      	ldr	r2, [pc, #256]	@ (80015b4 <HAL_GPIO_Init+0x2c0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d013      	beq.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <HAL_GPIO_Init+0x2c4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1e8>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <HAL_GPIO_Init+0x2c8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1e4>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3d      	ldr	r2, [pc, #244]	@ (80015c0 <HAL_GPIO_Init+0x2cc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1e0>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e006      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d4:	2304      	movs	r3, #4
 80014d6:	e004      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014d8:	2302      	movs	r3, #2
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_GPIO_Init+0x1ee>
 80014e0:	2300      	movs	r3, #0
 80014e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	4093      	lsls	r3, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014f2:	492f      	ldr	r1, [pc, #188]	@ (80015b0 <HAL_GPIO_Init+0x2bc>)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	492c      	ldr	r1, [pc, #176]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800151a:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4928      	ldr	r1, [pc, #160]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	4922      	ldr	r1, [pc, #136]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	491e      	ldr	r1, [pc, #120]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800155c:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4918      	ldr	r1, [pc, #96]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	4914      	ldr	r1, [pc, #80]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d021      	beq.n	80015c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	490e      	ldr	r1, [pc, #56]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e021      	b.n	80015d6 <HAL_GPIO_Init+0x2e2>
 8001592:	bf00      	nop
 8001594:	10320000 	.word	0x10320000
 8001598:	10310000 	.word	0x10310000
 800159c:	10220000 	.word	0x10220000
 80015a0:	10210000 	.word	0x10210000
 80015a4:	10120000 	.word	0x10120000
 80015a8:	10110000 	.word	0x10110000
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000
 80015b4:	40010800 	.word	0x40010800
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40011400 	.word	0x40011400
 80015c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4909      	ldr	r1, [pc, #36]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f47f ae8e 	bne.w	8001308 <HAL_GPIO_Init+0x14>
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	372c      	adds	r7, #44	@ 0x2c
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40010400 	.word	0x40010400

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e272      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8087 	beq.w	800175a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800164c:	4b92      	ldr	r3, [pc, #584]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b04      	cmp	r3, #4
 8001656:	d00c      	beq.n	8001672 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001658:	4b8f      	ldr	r3, [pc, #572]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	2b08      	cmp	r3, #8
 8001662:	d112      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
 8001664:	4b8c      	ldr	r3, [pc, #560]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001670:	d10b      	bne.n	800168a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001672:	4b89      	ldr	r3, [pc, #548]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d06c      	beq.n	8001758 <HAL_RCC_OscConfig+0x12c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d168      	bne.n	8001758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e24c      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x76>
 8001694:	4b80      	ldr	r3, [pc, #512]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a7f      	ldr	r2, [pc, #508]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 800169a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e02e      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x98>
 80016aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b78      	ldr	r3, [pc, #480]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a77      	ldr	r2, [pc, #476]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0xbc>
 80016ce:	4b72      	ldr	r3, [pc, #456]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a71      	ldr	r2, [pc, #452]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6f      	ldr	r3, [pc, #444]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xd4>
 80016e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b68      	ldr	r3, [pc, #416]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a67      	ldr	r2, [pc, #412]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fce2 	bl	80010d0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fcde 	bl	80010d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e200      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5d      	ldr	r3, [pc, #372]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xe4>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fcce 	bl	80010d0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fcca 	bl	80010d0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1ec      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x10c>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001766:	4b4c      	ldr	r3, [pc, #304]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
 800177e:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1c0      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4939      	ldr	r1, [pc, #228]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b36      	ldr	r3, [pc, #216]	@ (800189c <HAL_RCC_OscConfig+0x270>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fc83 	bl	80010d0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc7f 	bl	80010d0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1a1      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4927      	ldr	r1, [pc, #156]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_RCC_OscConfig+0x270>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc62 	bl	80010d0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fc5e 	bl	80010d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e180      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d03a      	beq.n	80018b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d019      	beq.n	8001876 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7ff fc42 	bl	80010d0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fc3e 	bl	80010d0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e160      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <HAL_RCC_OscConfig+0x26c>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f000 fa9c 	bl	8001dac <RCC_Delay>
 8001874:	e01c      	b.n	80018b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <HAL_RCC_OscConfig+0x274>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fc28 	bl	80010d0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001882:	e00f      	b.n	80018a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fc24 	bl	80010d0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d908      	bls.n	80018a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e146      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	42420000 	.word	0x42420000
 80018a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a4:	4b92      	ldr	r3, [pc, #584]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e9      	bne.n	8001884 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80a6 	beq.w	8001a0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c2:	4b8b      	ldr	r3, [pc, #556]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10d      	bne.n	80018ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b88      	ldr	r3, [pc, #544]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a87      	ldr	r2, [pc, #540]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b85      	ldr	r3, [pc, #532]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbe5 	bl	80010d0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fbe1 	bl	80010d0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b64      	cmp	r3, #100	@ 0x64
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e103      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <HAL_RCC_OscConfig+0x4c8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x312>
 8001930:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a6e      	ldr	r2, [pc, #440]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e02d      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x334>
 8001946:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a69      	ldr	r2, [pc, #420]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b67      	ldr	r3, [pc, #412]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a66      	ldr	r2, [pc, #408]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
 800195e:	e01c      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b05      	cmp	r3, #5
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x356>
 8001968:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a60      	ldr	r2, [pc, #384]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	4b5e      	ldr	r3, [pc, #376]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a5d      	ldr	r2, [pc, #372]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e00b      	b.n	800199a <HAL_RCC_OscConfig+0x36e>
 8001982:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a5a      	ldr	r2, [pc, #360]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	4b58      	ldr	r3, [pc, #352]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4a57      	ldr	r2, [pc, #348]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d015      	beq.n	80019ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb95 	bl	80010d0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fb91 	bl	80010d0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0b1      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ee      	beq.n	80019aa <HAL_RCC_OscConfig+0x37e>
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb7f 	bl	80010d0 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff fb7b 	bl	80010d0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e09b      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	4b40      	ldr	r3, [pc, #256]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fe:	4b3c      	ldr	r3, [pc, #240]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a3b      	ldr	r2, [pc, #236]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a14:	4b36      	ldr	r3, [pc, #216]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d061      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d146      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fb4f 	bl	80010d0 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff fb4b 	bl	80010d0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e06d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5e:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4921      	ldr	r1, [pc, #132]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a19      	ldr	r1, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	430b      	orrs	r3, r1
 8001a82:	491b      	ldr	r1, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb1f 	bl	80010d0 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb1b 	bl	80010d0 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e03d      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x46a>
 8001ab4:	e035      	b.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb08 	bl	80010d0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fb04 	bl	80010d0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e026      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x498>
 8001ae2:	e01e      	b.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d107      	bne.n	8001afc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e019      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_OscConfig+0x500>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0d0      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d910      	bls.n	8001b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b67      	ldr	r3, [pc, #412]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4965      	ldr	r1, [pc, #404]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b63      	ldr	r3, [pc, #396]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0b8      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b8c:	4b59      	ldr	r3, [pc, #356]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4a58      	ldr	r2, [pc, #352]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb0:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	494d      	ldr	r1, [pc, #308]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d040      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d115      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07f      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4b41      	ldr	r3, [pc, #260]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e073      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06b      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4936      	ldr	r1, [pc, #216]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff fa56 	bl	80010d0 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff fa52 	bl	80010d0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e053      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d210      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4922      	ldr	r1, [pc, #136]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e032      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4916      	ldr	r1, [pc, #88]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	490e      	ldr	r1, [pc, #56]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cbe:	f000 f821 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490a      	ldr	r1, [pc, #40]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <HAL_RCC_ClockConfig+0x1cc>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_RCC_ClockConfig+0x1d0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9b4 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08001ed0 	.word	0x08001ed0
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d002      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x30>
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d003      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x36>
 8001d32:	e027      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d36:	613b      	str	r3, [r7, #16]
      break;
 8001d38:	e027      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	0c9b      	lsrs	r3, r3, #18
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0c5b      	lsrs	r3, r3, #17
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	4a11      	ldr	r2, [pc, #68]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d66:	fb03 f202 	mul.w	r2, r3, r2
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e004      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	613b      	str	r3, [r7, #16]
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001d86:	613b      	str	r3, [r7, #16]
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	693b      	ldr	r3, [r7, #16]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	007a1200 	.word	0x007a1200
 8001da0:	08001ee0 	.word	0x08001ee0
 8001da4:	08001ef0 	.word	0x08001ef0
 8001da8:	003d0900 	.word	0x003d0900

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc8:	bf00      	nop
  }
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <memset>:
 8001de8:	4603      	mov	r3, r0
 8001dea:	4402      	add	r2, r0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d100      	bne.n	8001df2 <memset+0xa>
 8001df0:	4770      	bx	lr
 8001df2:	f803 1b01 	strb.w	r1, [r3], #1
 8001df6:	e7f9      	b.n	8001dec <memset+0x4>

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	4d0c      	ldr	r5, [pc, #48]	@ (8001e30 <__libc_init_array+0x38>)
 8001dfe:	4c0d      	ldr	r4, [pc, #52]	@ (8001e34 <__libc_init_array+0x3c>)
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	f000 f81a 	bl	8001e40 <_init>
 8001e0c:	2600      	movs	r6, #0
 8001e0e:	4d0a      	ldr	r5, [pc, #40]	@ (8001e38 <__libc_init_array+0x40>)
 8001e10:	4c0a      	ldr	r4, [pc, #40]	@ (8001e3c <__libc_init_array+0x44>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08001ef4 	.word	0x08001ef4
 8001e34:	08001ef4 	.word	0x08001ef4
 8001e38:	08001ef4 	.word	0x08001ef4
 8001e3c:	08001ef8 	.word	0x08001ef8

08001e40 <_init>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	bf00      	nop
 8001e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e46:	bc08      	pop	{r3}
 8001e48:	469e      	mov	lr, r3
 8001e4a:	4770      	bx	lr

08001e4c <_fini>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr
